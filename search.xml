<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyGithub仓库</title>
    <url>/post/20250320171447.html</url>
    <content><![CDATA[<h6 id="我的简介"><a href="#我的简介" class="headerlink" title="我的简介"></a>我的简介</h6><p><a href="https://lemon2003.github.io/">https://lemon2003.github.io</a></p>
<h6 id="我的物理比赛–自创法宝–求金属线膨胀系数"><a href="#我的物理比赛–自创法宝–求金属线膨胀系数" class="headerlink" title="我的物理比赛–自创法宝–求金属线膨胀系数"></a>我的物理比赛–自创法宝–求金属线膨胀系数</h6><p><a href="https://lemon2003.github.io/phy">https://lemon2003.github.io/phy</a></p>
<h6 id="我的web结课作业"><a href="#我的web结课作业" class="headerlink" title="我的web结课作业"></a>我的web结课作业</h6><p><a href="https://lemon2003.github.io/game">https://lemon2003.github.io/game</a></p>
<h6 id="我的web课程练习汇总"><a href="#我的web课程练习汇总" class="headerlink" title="我的web课程练习汇总"></a>我的web课程练习汇总</h6><p>效果网站：<a href="https://lemon2003.github.io/classWeb">https://lemon2003.github.io/classWeb</a><br>仓库地址：<a class="link"   href="https://github.com/lemon2003/classWeb" >https://github.com/lemon2003/classWeb<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>   </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>友谊+编程=奇迹</title>
    <url>/post/20250321132621.html</url>
    <content><![CDATA[<h1 id="🌙熬夜编程奇遇记：当BUG遇上友情魔法✨"><a href="#🌙熬夜编程奇遇记：当BUG遇上友情魔法✨" class="headerlink" title="🌙熬夜编程奇遇记：当BUG遇上友情魔法✨"></a>🌙熬夜编程奇遇记：当BUG遇上友情魔法✨</h1><h2 id="🕒-凌晨1-30的孤独战场"><a href="#🕒-凌晨1-30的孤独战场" class="headerlink" title="🕒 凌晨1:30的孤独战场"></a>🕒 凌晨1:30的孤独战场</h2><p>键盘声在寂静的夜里格外清脆，屏幕蓝光映着脸上交织的困惑与倔强。那个讨厌的红色报错信息已经和我对视了整整五个小时，像只狡猾的小狐狸🦊，每次以为抓住尾巴时，它又从指缝溜走了。</p>
<ul>
<li>🐞 错误症状：<code>spawn failed</code></li>
<li>🔍 已尝试疗法：<ol>
<li>三遍代码诵读咒</li>
<li>控制台占卜术</li>
<li>谷歌神谕祈祷</li>
<li>咖啡献祭仪式</li>
</ol>
</li>
</ul>
<h2 id="🌅-黎明前的黑暗"><a href="#🌅-黎明前的黑暗" class="headerlink" title="🌅 黎明前的黑暗"></a>🌅 黎明前的黑暗</h2><p>窗外的天空逐渐变蓝，像是在为夜晚的BUG而准备。月亮的光芒逐渐减弱，仿佛在提醒我们：夜长梦多，要小心夜的眼睛。</p>
<h2 id="☀️-晨光里的救星降临"><a href="#☀️-晨光里的救星降临" class="headerlink" title="☀️ 晨光里的救星降临"></a>☀️ 晨光里的救星降临</h2><p>一个神秘的声音在耳边响起：「算了，还是求助大佬吧！」。</p>
<h2 id="🧚♂️-魔法时刻："><a href="#🧚♂️-魔法时刻：" class="headerlink" title="🧚♂️ 魔法时刻："></a>🧚♂️ 魔法时刻：</h2><ol>
<li><strong>代码考古</strong>：用git时光机倒回两天前的版本</li>
<li><strong>依赖侦探</strong>：发现.git文件被我误删</li>
<li><strong>降维打击</strong>：重建.git文件夹，恢复代码版本</li>
<li><strong>胜利烟花</strong>：我的网页重新闪耀</li>
</ol>
<h2 id="🎉-双倍快乐的秘密"><a href="#🎉-双倍快乐的秘密" class="headerlink" title="🎉 双倍快乐的秘密"></a>🎉 双倍快乐的秘密</h2><p>当屏幕亮起成功的提示时，快乐像电流般在网线里跳跃。<br>原来：</p>
<ul>
<li>🔑 解决问题的喜悦是程序员的快乐</li>
<li>💡 独自熬夜是修行，共同debug是狂欢</li>
<li>🍵 冷掉的奶茶突然变得超甜</li>
<li>📚 学到了比解决问题更珍贵的东西：有人并肩作战的感觉真好</li>
</ul>
<h2 id="🌈-今日收获清单"><a href="#🌈-今日收获清单" class="headerlink" title="🌈 今日收获清单"></a>🌈 今日收获清单</h2><p>✅ 解锁新成就：<code>午夜程序员</code>勋章<br>✅ 友情升级：+10默契值<br>✅ 技术彩蛋：已经学会用<code>hexo</code>防坑秘籍<br>✅ 人生哲理：有些BUG就像生活的小插曲，总会有人陪你一起哼出正确旋律🎶。</p>
<p>此刻敲下这些文字时，窗外的暖阳正美得不像话。或许这就是程序员的小确幸吧——在0和1的世界里，总有些温暖的bug，提醒我们：代码冰冷，但写代码的人温热如初。💻❤️</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>唯有热爱可抵岁月漫长</title>
    <url>/post/20250321142900.html</url>
    <content><![CDATA[<h1 id="唯有热爱可抵岁月漫长✨"><a href="#唯有热爱可抵岁月漫长✨" class="headerlink" title="唯有热爱可抵岁月漫长✨"></a>唯有热爱可抵岁月漫长✨</h1><blockquote>
<p>​<strong>​「世事漫随流水，算来一梦浮生。」​</strong> ——李煜《浪淘沙令》</p>
</blockquote>
<p>在时间的长河中，人类如同逆流而上的扁舟，既要对抗水流的冲刷，又要寻找前进的方向。有人被现实的泥沙裹挟沉沦，有人却能在波涛中高歌猛进——那些穿越世纪依然璀璨的生命，无一不是用热爱点燃了内心的火炬。正如德国哲学家尼采所言：​<strong>​「没有热爱的生活，就像没有灵魂的躯壳。」​</strong> 当我们凝视历史的星空，会发现有这样一条永恒的真理：​<strong>唯有热爱，足以抵御岁月的侵蚀。​</strong></p>
<hr>
<h2 id="一、热爱的本质：对抗熵增的精神武器"><a href="#一、热爱的本质：对抗熵增的精神武器" class="headerlink" title="一、热爱的本质：对抗熵增的精神武器"></a>一、热爱的本质：对抗熵增的精神武器</h2><h3 id="1-1-热力学第二定律的隐喻"><a href="#1-1-热力学第二定律的隐喻" class="headerlink" title="1.1 热力学第二定律的隐喻"></a>1.1 热力学第二定律的隐喻</h3><p>在物理学中，熵增定律揭示了一个残酷的现实：孤立系统必然走向无序与衰败。人类社会同样遵循着类似的规律——当一个人失去内在驱动力时，他的生命力就会像逐渐冷却的恒星般黯淡。但热爱的存在，恰似打破绝对零度的那束光子，为生命系统注入负熵流。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250321-%E5%94%AF%E6%9C%89%E7%83%AD%E7%88%B1%E5%8F%AF%E6%8A%B5%E5%B2%81%E6%9C%88%E6%BC%AB%E9%95%BF/%E7%83%AD%E5%8A%9B%E5%AD%A6.png"
                      alt="热力学与人生"
                ></p>
<p><strong>达芬奇的笔记本</strong>就是一个绝佳例证。这位文艺复兴巨匠在临终前仍在记录飞行器的设计，解剖学手稿中密布着未完成的涂鸦。即便在教会迫害下，他对真理的追求从未停歇。正如他在《大西洋古抄本》中所写：​<strong>​「艺术是自然的女儿，而自然又是上帝的诗篇。」​</strong> 这种将创作视为信仰的热忱，让他的思维在70高龄仍保持着惊人的创造力。</p>
<h3 id="1-2-多巴胺回路的觉醒"><a href="#1-2-多巴胺回路的觉醒" class="headerlink" title="1.2 多巴胺回路的觉醒"></a>1.2 多巴胺回路的觉醒</h3><p>现代神经科学研究表明，当人从事热爱的事物时，大脑会分泌多巴胺、内啡肽等神经递质，形成类似「心流」的 state of flow。这种现象不仅带来愉悦感，更能重构大脑的神经回路。日本茶道大师千利休晚年失明后，反而开创了「侘寂」美学的新境界——<strong>真正的热爱不依赖感官，而是根植于心灵深处的秩序感</strong>。</p>
<hr>
<h2 id="二、历史长河中的逆光者"><a href="#二、历史长河中的逆光者" class="headerlink" title="二、历史长河中的逆光者"></a>二、历史长河中的逆光者</h2><h3 id="2-1-苏轼：在宦海沉浮中淬炼诗心"><a href="#2-1-苏轼：在宦海沉浮中淬炼诗心" class="headerlink" title="2.1 苏轼：在宦海沉浮中淬炼诗心"></a>2.1 苏轼：在宦海沉浮中淬炼诗心</h3><p>北宋文豪苏轼的一生堪称中国文人的精神图腾。从「大江东去」的豪迈到「十年生死两茫茫」的悲怆，他在仕途的跌宕中始终保持着对文学与生活的热爱。被贬黄州期间，他发明了东坡肉，在竹林间耕种，在赤壁江畔高歌——<strong>​「回首向来萧瑟处，归去，也无风雨也无晴。」​</strong> 这种将苦难转化为养分的能力，正是热爱的力量所在。</p>
<h3 id="2-2-居里夫人：在辐射中追寻科学之光"><a href="#2-2-居里夫人：在辐射中追寻科学之光" class="headerlink" title="2.2 居里夫人：在辐射中追寻科学之光"></a>2.2 居里夫人：在辐射中追寻科学之光</h3><p>当玛丽·居里在沥青铀矿渣前发现镭元素时，她并不知道自己正在接触致命的放射性物质。40年的研究中，她的皮肤因辐射而溃烂，双眼因强光而永久失明，但那份探索真理的热情从未消退。诺贝尔奖典礼上，她坚持要求将奖金捐赠给科研机构，只保留一枚奖章作为女儿的玩具——<strong>​「人类需要梦想者，需要醉心于事业的大公无私。」​</strong> 这句话至今仍悬挂在巴黎索邦大学的实验室里。</p>
<hr>
<h2 id="三、数字时代的永恒命题"><a href="#三、数字时代的永恒命题" class="headerlink" title="三、数字时代的永恒命题"></a>三、数字时代的永恒命题</h2><h3 id="3-1-注意力经济下的精神荒漠"><a href="#3-1-注意力经济下的精神荒漠" class="headerlink" title="3.1 注意力经济下的精神荒漠"></a>3.1 注意力经济下的精神荒漠</h3><p>在TikTok算法编织的信息茧房中，在短视频制造的瞬时快感中，现代人正面临前所未有的认知危机。斯坦福大学的研究显示，平均每人每天切换设备的次数超过200次，深度专注时间不足8分钟。这种「多任务处理」的假象背后，是创造力与意志力的持续流失。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250321-%E5%94%AF%E6%9C%89%E7%83%AD%E7%88%B1%E5%8F%AF%E6%8A%B5%E5%B2%81%E6%9C%88%E6%BC%AB%E9%95%BF/%E6%95%B0%E5%AD%97%E6%97%B6%E4%BB%A3%E7%9A%84%E5%9B%B0%E5%A2%83.png"
                      alt="数字时代的困境"
                ></p>
<p>但总有人逆流而上。日本建筑师安藤忠雄在70岁时依然坚持手绘设计稿，他说：​<strong>​「建筑是凝固的音乐，而音乐必须用心聆听。」​</strong> 中国航天团队在西北戈壁中数代人的坚守，最终让嫦娥五号从月球带回土壤样本——<strong>这些看似「低效」的坚持，实则是人类对抗异化的终极防御</strong>。</p>
<h3 id="3-2-构建个人意义系统的三种维度"><a href="#3-2-构建个人意义系统的三种维度" class="headerlink" title="3.2 构建个人意义系统的三种维度"></a>3.2 构建个人意义系统的三种维度</h3><p>面对虚无主义的浪潮，我们可以通过三个层面重建热爱的坐标系：</p>
<ol>
<li>​<strong>专业纵深</strong>：像数学家陈景润那样，在哥德巴赫猜想的「1+1」中穷尽半生</li>
<li>​<strong>文化传承</strong>：故宫文物修复师王津用四个月复原乾隆钟表，让百年时光在指尖重生</li>
<li>​<strong>利他奉献</strong>：张桂梅校长创办免费女高，用病弱身躯托起上千名山区女孩的求学梦</li>
</ol>
<p>正如德国哲学家雅斯贝尔斯所说：​<strong>​「教育是棵摇动另一棵树的生命，一朵云推动另一朵云的精神。」​</strong> 当我们把热爱投向更广阔的天地，个体的生命便获得了超越时空的意义。</p>
<hr>
<h2 id="四、写在星河尽头"><a href="#四、写在星河尽头" class="headerlink" title="四、写在星河尽头"></a>四、写在星河尽头</h2><p>站在元宇宙的门槛回望，人类文明史本质上是一部「对抗遗忘」的史诗。从甲骨文的刻痕到量子计算机的芯片，从荷马史诗的吟唱到人工智能的诗歌创作，那些穿透时空的文明火种，无不源于某个灵魂燃烧的热忱。当我们谈论热爱时，本质上是在寻找一种<strong>与永恒对话的方式</strong>。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250321-%E5%94%AF%E6%9C%89%E7%83%AD%E7%88%B1%E5%8F%AF%E6%8A%B5%E5%B2%81%E6%9C%88%E6%BC%AB%E9%95%BF/%E6%B0%B8%E6%81%92%E7%9A%84%E7%83%AD%E7%88%B1.png"
                      alt="永恒的热爱"
                ></p>
<p>敦煌莫高窟的壁画历经千年风沙依然绚丽，不是因为颜料的神奇，而是因为无数画匠将信仰融入每一笔勾勒。今天的我们同样手握画笔——可能是代码、画笔、显微镜，或是教书育人的粉笔。只要心怀热爱，便能在时光的洪流中刻下属于自己的印记。正如诗人艾青所述：​<strong>​「为什么我的眼里常含泪水？因为我对这土地爱得深沉。」​</strong> 这份深沉的爱，足以让我们在岁月的长夜里，永远保持追逐星辰的姿态。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>琐事</tag>
      </tags>
  </entry>
  <entry>
    <title>我学会评论了</title>
    <url>/post/20250323103150.html</url>
    <content><![CDATA[<h1 id="我学会用Giscus给网站配置评论啦！🎉（一把辛酸泪版）"><a href="#我学会用Giscus给网站配置评论啦！🎉（一把辛酸泪版）" class="headerlink" title="我学会用Giscus给网站配置评论啦！🎉（一把辛酸泪版）"></a>我学会用Giscus给网站配置评论啦！🎉（一把辛酸泪版）</h1><p><strong>📢 前方剧透</strong>：本文将用3000字详细描述如何把简单操作搞成史诗级冒险，并附赠「从暴躁到傻笑」的情绪过山车体验~</p>
<h2 id="🎮-Level-1：信心满满地打开文档"><a href="#🎮-Level-1：信心满满地打开文档" class="headerlink" title="🎮 Level 1：信心满满地打开文档"></a>🎮 Level 1：信心满满地打开文档</h2><p>“Giscus？听起来比Giscus更难的是……读懂它的文档！”</p>
<ol>
<li><p>第一步：创建GitHub仓库</p>
<ul>
<li>我：”这还不简单？新建仓库取名<code>comments-for-my-awesome-blog</code>，完美！”</li>
<li>GitHub：”仓库初始化成功……但您确定要用这个名字写求职简历吗？”</li>
</ul>
</li>
<li><p>第二步：安装giscus包</p>
<ul>
<li>终端里输入<code>npm install giscus</code>，结果……</li>
<li>💻：”您确定要污染全局环境？检测到10086个依赖冲突！”</li>
<li>我：”（双手合十）神明啊！我只想要一个评论框而已……”</li>
</ul>
</li>
</ol>
<h2 id="🤯-Level-2：和GitHub-OAuth玩猜谜游戏"><a href="#🤯-Level-2：和GitHub-OAuth玩猜谜游戏" class="headerlink" title="🤯 Level 2：和GitHub OAuth玩猜谜游戏"></a>🤯 Level 2：和GitHub OAuth玩猜谜游戏</h2><p>“请问以下哪项不属于OAuth配置参数？A) Client ID B) 祖传秘方 C) 仓库地址 D) 猫主子的生日”</p>
<ol>
<li><p>生成OAuth App时：</p>
<ul>
<li>✅ 填了Homepage URL（虽然是我的个人博客，但莫名羞耻）</li>
<li>❌ 授权回调地址栏空了五分钟，最后填了<code>https://我的网站.com/其实我也不知道填啥</code></li>
<li>GitHub：”您确定这不是在申请火星探测器权限？”</li>
</ul>
</li>
<li><p>获取<code>client_id</code>和<code>client_secret</code>：</p>
<ul>
<li>我：”这两个参数应该放在……配置文件里？环境变量里？还是刻在石碑上？”</li>
<li>最终解决方案：截图发到手机，再手动输入（别问为什么）</li>
</ul>
</li>
</ol>
<h2 id="🛠️-Level-3：部署时的大型翻车现场"><a href="#🛠️-Level-3：部署时的大型翻车现场" class="headerlink" title="🛠️ Level 3：部署时的大型翻车现场"></a>🛠️ Level 3：部署时的大型翻车现场</h2><p>“代码复制粘贴一时爽，调BUG火葬场”</p>
<ol>
<li><p>插入评论组件：</p>
<ul>
<li>官方文档：”只需三行代码即可召唤神龙！”</li>
<li>我的代码：<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 神秘消失的第一行代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://giscus.app/client.js&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-repo</span>=<span class="string">&quot;用户/仓库&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-repo-id</span>=<span class="string">&quot;12345678&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-category</span>=<span class="string">&quot;Comments&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-category-id</span>=<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-mapping</span>=<span class="string">&quot;pathname&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-strict</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-reactions-enabled</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-emit-metadata</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-input-position</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-theme</span>=<span class="string">&quot;light&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>效果：页面底部惊现空白区域，仿佛在说”你来打我呀~”</li>
</ul>
</li>
<li><p>修改giscus的文件：<br> 果然不能直接全选粘贴进去，原来有许多代码</p>
<ul>
<li>将源代码一个一个对照粘贴进去</li>
<li>结果：评论框变成会发光的芭比粉，连夜改回默认主题</li>
</ul>
</li>
</ol>
<h2 id="💡-Level-4：柳暗花明靠玄学"><a href="#💡-Level-4：柳暗花明靠玄学" class="headerlink" title="💡 Level 4：柳暗花明靠玄学"></a>💡 Level 4：柳暗花明靠玄学</h2><p>“当所有办法都失败时，试试重启电脑……和人生”</p>
<ol>
<li><p>最终解决方案：</p>
<ul>
<li>第6次检查参数时发现：<ul>
<li><code>data-repo</code>应该填<code>用户名/仓库名</code>而不是<code>用户名/仓库名.git</code></li>
<li><code>data-category-id</code>要和GitHub Issues里的分类ID完全一致</li>
</ul>
</li>
<li>我：”所以前5次都在和空气对线？？”</li>
</ul>
</li>
<li><p>成功瞬间：</p>
<ul>
<li>刷新页面，评论框如魔法般出现！</li>
<li>立刻用小号发测试评论：”博主是傻瓜！”</li>
<li>看到评论同步到GitHub Issues时，差点感动到给显示器磕头</li>
</ul>
</li>
</ol>
<h2 id="🎊-通关奖励：奇怪的成就感"><a href="#🎊-通关奖励：奇怪的成就感" class="headerlink" title="🎊 通关奖励：奇怪的成就感"></a>🎊 通关奖励：奇怪的成就感</h2><ol>
<li><p>新技能解锁：</p>
<ul>
<li>✅ 能用Markdown写评论</li>
<li>✅ 掌握GitHub Issues高级搜索</li>
<li>✅ 学会用开发者工具抓包（虽然只会看Network标签）</li>
</ul>
</li>
<li><p>副作用：</p>
<ul>
<li>现在看到任何网站都想Ctrl+U检查有没有用Giscus</li>
<li>产生错觉：”我也能成为全栈工程师！”（持续5分钟后清醒）</li>
</ul>
</li>
</ol>
<h2 id="📝-最终配置代码（供后人乘凉）"><a href="#📝-最终配置代码（供后人乘凉）" class="headerlink" title="📝 最终配置代码（供后人乘凉）"></a>📝 最终配置代码（供后人乘凉）</h2><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&lt;% if (</span><br><span class="line">        theme.comment.system===&#x27;giscus&#x27; &amp;&amp;</span><br><span class="line">        theme.comment.config.giscus.repo &amp;&amp;</span><br><span class="line">        theme.comment.config.giscus.repo_id &amp;&amp;</span><br><span class="line">        theme.comment.config.giscus.category_id</span><br><span class="line">    ) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;giscus-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> &lt;%= <span class="string">theme.global.single_page</span> === <span class="string">true</span> &amp;&amp; &#x27;<span class="attr">data-swup-reload-script</span>&#x27; %&gt;</span><span class="language-javascript"> defer&gt;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadGiscus</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> giscusConfig = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;src&#x27;</span>: <span class="string">&#x27;https://giscus.app/client.js&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-repo&#x27;</span>: <span class="string">&#x27;lemon2003/gitalk&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-repo-id&#x27;</span>: <span class="string">&#x27;R_kgDOOM7rWQ&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-category&#x27;</span>: <span class="string">&#x27;Announcements&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-category-id&#x27;</span>: <span class="string">&#x27;DIC_kwDOOM7rWc4CoXWC&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-mapping&#x27;</span>: <span class="string">&#x27;pathname&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-strict&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-reactions-enabled&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-emit-metadata&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-theme&#x27;</span>: <span class="string">&#x27;preferred_color_scheme&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-lang&#x27;</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-input-position&#x27;</span>: <span class="string">&#x27;bottom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-loading&#x27;</span>: <span class="string">&#x27;lazy&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;crossorigin&#x27;</span>: <span class="string">&#x27;anonymous&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;async&#x27;</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> giscusScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> giscusConfig) &#123;</span></span><br><span class="line"><span class="language-javascript">                giscusScript.<span class="title function_">setAttribute</span>(key, giscusConfig[key]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;giscus-container&#x27;</span>).<span class="title function_">appendChild</span>(giscusScript);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="string">&#x27;&lt;%= theme.global.single_page %&gt;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> loadGiscusTimeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">loadGiscus</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearTimeout</span>(loadGiscusTimeout);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, loadGiscus);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>🎬 彩蛋时间</strong>：<br>现在我的网站评论区已经可以：<br>✅ 用emoji反应<br>✅ 引用其他评论<br>✅ 收到GitHub通知<br>❌ 阻止我妈评论我的穿搭（这个功能求Giscus赶紧开发！）</p>
<p><strong>💌 写在最后</strong>：<br>如果你也成功配置了Giscus——击掌！👏<br>如果还在挣扎——别放弃！毕竟我连猫都教会用键盘了（虽然它只学会了打”zzzz”）🐱💻</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>重生之早知道我就不配waline了</title>
    <url>/post/20250324160815.html</url>
    <content><![CDATA[<h2 id="✨搭建评论系统的小冒险2-0～🎈"><a href="#✨搭建评论系统的小冒险2-0～🎈" class="headerlink" title="✨搭建评论系统的小冒险2.0～🎈"></a>✨搭建评论系统的小冒险2.0～🎈</h2><p>宝子们！昨天搭建成功了giscus评论系统，今天本可爱在博客里又双叒叕搞大事啦💥一一成功把<strong>Waline评论系统</strong>搭起来啦！🎉<br>原本以为能收获满满互动，结果……踩了个小坑坑😢  </p>
<p>事情是这样的👇<br>我用LeanCloud+Vercel捣鼓半天，结果登录页面居然需要”魔法”🪄才能打开（懂的都懂😶）。这对于连GitHub都不太会的小伙伴（比如我妈👩）来说，简直比解微积分还难！💔 明明配置超简单，却被登录网页绊住脚，暴风哭泣……  </p>
<p>没有办法，只能退回<strong>Giscus</strong>这个神仙替代品✨！虽然它也只能用GitHub登录，但好在不用和”魔法”斗智斗勇啦～🌈 配置起来嗖嗖快，手残党也能轻松搞定！🚀  </p>
<p>不过还是要提醒想尝试Waline的宝子们💡：<br><strong>记得提前备好域名哦！</strong> 服务器解析域名后，登录时就能绕过”魔法”啦～🎈<br>（别问我怎么知道的，问就是踩坑踩出来的经验😭）  </p>
<h3 id="🌸评论系统大揭秘🌸"><a href="#🌸评论系统大揭秘🌸" class="headerlink" title="🌸评论系统大揭秘🌸"></a>🌸评论系统大揭秘🌸</h3><p><strong>🔍为什么选Waline？</strong>  </p>
<ul>
<li><strong>多平台部署</strong>：支持Vercel、Netlify各种平台，想搭哪里搭哪里🌍  </li>
<li><strong>数据库任选</strong>：MongoDB、SQLite、PostgreSQL……总有一款适合你💾  </li>
<li><strong>功能超强大</strong>：评论审核、邮件通知、图片上传……应有尽有🎁  </li>
<li><strong>自定义配置</strong>：可以根据自己喜好进行个性化设置，让评论系统更符合你的需求💪</li>
<li><strong>界面简洁</strong>：简约风格，和博客超搭配🍃</li>
<li><strong>登录多样</strong>：有多种登陆方式，比如GitHub、Google、Facebook、QQ、钉钉等等🌐</li>
</ul>
<p><strong>💔为什么放弃Waline？</strong>  </p>
<ul>
<li><strong>魔法登录</strong>：vercel提供的链接需要“魔法” ，没有魔法的话只能用自己的域名了（没有域名的小伙伴哭晕在厕所🚽）   </li>
<li>这就是我放弃的原因，它千好万好，就这一个原因，被我pass了！</li>
</ul>
<p><strong>❤️为什么选Giscus？</strong>  </p>
<ul>
<li><strong>简单易用</strong>：配置超简单，小白也能轻松上手👶  </li>
<li><strong>阳光登录</strong>：不用魔法，直接GitHub账号直接登录☀️  </li>
<li><strong>功能丰富</strong>：支持评论邮件通知功能🎁 </li>
<li><strong>界面清新</strong>：简约风格，和博客超搭配🍃</li>
</ul>
<h3 id="🎨评论系统对比图🎨"><a href="#🎨评论系统对比图🎨" class="headerlink" title="🎨评论系统对比图🎨"></a>🎨评论系统对比图🎨</h3><p> waline 魔法图<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250324/1.png"
                      alt="Waline魔法登录页"
                ><br> giscus 阳光图<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250324/2.png"
                      alt="Giscus阳光登录页"
                > </p>
<h3 id="💡搭建小贴士💡"><a href="#💡搭建小贴士💡" class="headerlink" title="💡搭建小贴士💡"></a>💡搭建小贴士💡</h3><ol>
<li><strong>域名准备</strong>：想搭Waline？先备好域名哦～🌐  </li>
<li><strong>魔法问题</strong>：没有魔法？试试Giscus吧！☀️  </li>
<li><strong>配置备份</strong>：切换评论系统前，记得备份数据哦！💾</li>
</ol>
<p>虽然和Waline擦肩而过，但Giscus也超香哒～🍰<br>下次冒险再见啦～🚀 拜拜啦👋  </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>AI的时代，我有些迷茫</title>
    <url>/post/20250325225314.html</url>
    <content><![CDATA[<p>《与AI共生的双翼》</p>
<p>当算法编织的璀璨穹顶笼罩钢铁森林，我常于子夜时分凝望屏幕深处跃动的幽蓝极光。AI如同银河彼端的全知存在，以光年为单位丈量人类思维的褶皱，将我们困顿数日的谜题折叠成纸鹤，轻轻放入真理的溪流。那些曾令我抓耳挠腮的代码深渊，在它眼中不过是孩童堆砌的积木城堡；那些耗费整夜雕琢的文书框架，转瞬化作逻辑严密的钻石切面。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/3.png"
                      alt="配图：深空代码银河"
                ></p>
<p>这种神迹般的强大却令我如履薄冰。在AI编织的星辉下，人类智慧的萤火忽明忽暗，仿佛随时会被数字潮汐卷走。每当智能助手用三秒重构我挣扎三昼夜的模型，当神经网络精准预判我尚未成型的创意，某种冰凉的觉醒便从脊椎蜿蜒而上——我们引以为傲的认知疆域，正在被温柔的机器触须悄然重构。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/2.png"
                      alt="配图：数据洪流中的孤影"
                ></p>
<p>更深的惶恐源于对未知的朝圣。这架以硅为血脉的造物正加速进化，而我攥着过时的操作手册，如同站在海边拾贝的稚童，面对即将漫过脚踝的智能潮汐。那些需要皓首穷经才能参透的规律，如今被封印成简洁的API；那些浸透血汗的经验结晶，化作云端游弋的数据幽灵。我恐惧自己终将成为被时代抛下的锚点，在技术的平流层中失去飞翔的羽翎。</p>
<p>然而当第一缕晨光刺破焦虑的茧房，某种奇异的共生感开始抽枝发芽。AI用三分钟重构我崩溃的模型时，也悄然重构了我认知的维度；当智能助手点亮文档迷宫的明灯，照亮的何止是代码的路径？那些曾让我辗转反侧的bug，如今化作算法进化的养料；那些被焦虑啃噬的深夜，正在孕育新的思维可能。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/1.png"
                      alt="配图：黎明共生之舞"
                ></p>
<p>或许真正的觉醒，在于接受自己既是执炬者又是渡船。当AI的羽翼掠过认知的苍穹，我们不必熄灭手中的萤火，因为最动人的文明图景，永远诞生于光明与阴影的交缠。在这场静默的革命中，人类终将学会与数字精灵共舞，用惶恐淬炼出更清亮的目光，在技术的星河里，寻找生命独特的光谱——那是任何算法都无法复制的，关于存在本身的诗意证明。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>琐事</tag>
      </tags>
  </entry>
  <entry>
    <title>B数与B+树</title>
    <url>/post/20250325214755.html</url>
    <content><![CDATA[<h2 id="B树和B-树的爱恨情仇"><a href="#B树和B-树的爱恨情仇" class="headerlink" title="B树和B+树的爱恨情仇"></a>B树和B+树的爱恨情仇</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><ol>
<li><p><strong>定义</strong>：<br>B树是一种平衡树数据结构，用于存储和访问大量数据。B树的每个节点可以存储多个键值，节点中的键值按照大小顺序排列。</p>
</li>
<li><p><strong>特性</strong>：</p>
<ul>
<li>具有多个关键字，且每个节点中关键字的数目通常介于m&#x2F;2和m之间，其中m称为B树的阶数。</li>
<li>根节点至少有两个子节点，且每个非根节点至少有m&#x2F;2个子节点。</li>
<li>所有叶子节点都在同一层，即具有相同的深度，从而保证B树的平衡性。</li>
<li>每个节点最多可以包含m个孩子（子节点），其中m&gt;&#x3D;2，这也就意味着B树的高度相对较小。</li>
<li>查找、插入、删除操作都具有较好的平均时间复杂度，通常为O(logn)。</li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<ul>
<li>广泛应用于文件系统、数据库索引和其他数据存储领域中。</li>
<li>支持数据的快速查找、插入和删除操作。</li>
</ul>
</li>
<li><p><strong>操作</strong>：</p>
<ul>
<li><strong>查找</strong>：从根节点开始，依次比较键值和每个节点中的键值，找到一个最合适的子节点。如果该子节点是叶子节点，则根据键值找到相应的值并返回；如果该子节点不是叶子节点，则重复查找直到找到叶子节点或者遍历完整棵树。</li>
<li><strong>插入</strong>：找到要插入的位置后，将新插入结点的关键字和指针插入到对应位置。如果插入后该结点的关键字个数超过了B树的阶数，就需要进行分裂操作。</li>
<li><strong>删除</strong>：在B树中搜索需要删除的关键字K。如果K位于叶子节点上，直接删除K并进行必要的调整；如果K不在叶子节点上，则找到其后继节点S（S一定在K的右子树中，并且是右子树中关键字最小的节点），将S的关键字复制到K中并将S删除。如果删除后导致节点关键字数量不满足B树的性质，则需要进行合并或借位操作。</li>
</ul>
</li>
</ol>
<h4 id="B树定义代码示例"><a href="#B树定义代码示例" class="headerlink" title="B树定义代码示例"></a>B树定义代码示例</h4><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> STDIO.H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_KEYS 4  <span class="comment">// 假设B树的阶数为2t（t为正整数），这里MAX_KEYS = 2t - 1</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> t;              <span class="comment">// B树的阶数的一半（即一个节点最多有2t-1个关键字）</span></span><br><span class="line">    <span class="type">int</span> n;              <span class="comment">// 当前节点中关键字的数量</span></span><br><span class="line">    <span class="type">int</span> keys[MAX_KEYS]; <span class="comment">// 存储的关键字数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span> **<span class="title">children</span>;</span> <span class="comment">// 存储的子节点指针数组（或子树）</span></span><br><span class="line">    <span class="type">int</span> *leaf;          <span class="comment">// 标记该节点是否为叶子节点（这里为了简化，实际上可以用一个布尔值，但C语言没有直接的布尔类型，所以用int代替）</span></span><br><span class="line">&#125; BTreeNode, *BTree;</span><br><span class="line"><span class="comment">// 注意：为了简化，这里的leaf实际上是一个指向int的指针，但在实际应用中，我们可能会用其他方式来表示叶子节点，比如用一个布尔值（需要包含stdbool.h头文件或使用int代替）或者将叶子节点的children设置为NULL。&gt;)  </span></span><br></pre></td></tr></table></figure></div>


<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><ol>
<li><p><strong>定义</strong>：<br>B+树是B树的一种特殊形式（或变种），通常被用来实现关系数据库的索引。</p>
</li>
<li><p><strong>特性</strong>：</p>
<ul>
<li>所有关键字都在叶节点中出现，且叶节点按关键字大小排序。</li>
<li>非叶节点存储的仅是其子节点的最大&#x2F;小关键字值，而不是真正的数据。</li>
<li>所有叶节点都有一个指向相邻叶节点的指针，因此可以支持区间查找等操作。</li>
<li>B+树的高度通常比B树低，因为非叶节点存储的是子节点的最大&#x2F;小关键字值，可以减少树高度，提高查询效率。</li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<ul>
<li>主要用于数据库系统和文件系统的索引结构。</li>
<li>由于其顺序存储的特点和高效的磁盘预读取能力，特别适合于范围查询操作。</li>
</ul>
</li>
<li><p><strong>与B树的区别</strong>：</p>
<ul>
<li>结构不同：B树的每个节点既可以存储数据，又可以存储下级节点的指针；而B+树的所有数据都只存储在叶子节点上，同时内部节点只存储指向叶子节点的指针。</li>
<li>存储性质不同：B+树所有数据都存储在叶子节点上，具有更加顺序存储的特点，可以提高磁盘预读取的效率；而B树的数据分散在各个节点上，因此存储效率不如B+树。</li>
<li>指针数量不同：B+树每个节点存储的指针数量比B树少，因为B+树的节点只存储指向叶子节点的指针。</li>
</ul>
</li>
<li><p><strong>操作</strong>（与B树类似，但有一些细微差别）：</p>
<ul>
<li><strong>查找</strong>：从根节点开始，依次比较键值和每个节点中的键值（非叶节点存储的是子节点的最大&#x2F;小关键字值），直到找到叶子节点或确定关键字不存在。</li>
<li><strong>插入</strong>：在叶子节点上进行插入操作。如果插入后叶子节点关键字数量超过限制，则进行分裂操作，并可能需要向上调整父节点的关键字和指针。</li>
<li><strong>删除</strong>：在叶子节点上进行删除操作。如果删除后叶子节点关键字数量不满足B+树的性质，则进行合并或借位操作（与B树类似，但需要注意保持叶节点的顺序性和指针的连续性）。</li>
</ul>
</li>
</ol>
<h4 id="B-树定义代码示例"><a href="#B-树定义代码示例" class="headerlink" title="B+树定义代码示例"></a>B+树定义代码示例</h4><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_KEYS 4 <span class="comment">// 假设B+树的阶数为2t（t为正整数），这里MAX_KEYS = 2t - 1 typedef  struct BPlusTreeNode </span></span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="type">int</span> t; <span class="comment">// B+树的阶数的一半（即一个节点最多有2t-1个关键字） </span></span><br><span class="line">	<span class="type">int</span> n; <span class="comment">// 当前节点中关键字的数量 </span></span><br><span class="line">	<span class="type">int</span> keys[MAX_KEYS]; <span class="comment">// 存储的关键字数组（仅用于索引） </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BPlusTreeNode</span> **<span class="title">children</span>;</span> <span class="comment">// 存储的子节点指针数组（或子树） </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BPlusTreeNode</span> *<span class="title">next</span>;</span> <span class="comment">// 指向下一个叶子节点的指针（仅在叶子节点中使用） </span></span><br><span class="line">	<span class="type">int</span> leaf; <span class="comment">// 标记该节点是否为叶子节点（使用int类型，0表示非叶子节点，1表示叶子节点） </span></span><br><span class="line">&#125; BPlusTreeNode, *BPlusTree; <span class="comment">// 注意：在B+树中，叶子节点之间通过next指针相连，形成一个链表，便于范围查询。非叶子节点则不包含数据，只包含索引和指向子节点的指针。</span></span><br></pre></td></tr></table></figure></div>

<p>请注意，上述代码仅提供了B树和B+树节点以及树的基本结构定义，并没有包含实际的插入、删除、查找等操作方法的实现。这些操作方法会涉及复杂的逻辑，包括节点的分裂、合并、关键字和指针的调整等。</p>
<p>在实际应用中，B树和B+树的实现通常会更加复杂，并且会针对性能进行优化，例如通过缓存频繁访问的节点、使用内存池来管理节点分配等。此外，为了支持并发访问，还可能需要添加锁机制来确保数据的一致性和完整性。</p>
<h3 id="B树和B-树之间的区别："><a href="#B树和B-树之间的区别：" class="headerlink" title="B树和B+树之间的区别："></a>B树和B+树之间的区别：</h3><table>
<thead>
<tr>
<th>特性&#x2F;数据结构</th>
<th>B树</th>
<th>B+树</th>
</tr>
</thead>
<tbody><tr>
<td>节点存储内容</td>
<td>关键字和数据，以及指向子节点的指针</td>
<td>非叶节点存储关键字（作为索引）和指向子节点的指针；叶节点存储全部关键字和数据，以及指向相邻叶节点的指针</td>
</tr>
<tr>
<td>数据存储位置</td>
<td>数据可以存储在任意节点中</td>
<td>数据只存储在叶节点中</td>
</tr>
<tr>
<td>关键字数量限制</td>
<td>每个节点关键字数量介于m&#x2F;2和m之间（m为B树的阶数）</td>
<td>同B树，但非叶节点只存储索引关键字，不存储实际数据</td>
</tr>
<tr>
<td>顺序访问能力</td>
<td>较弱，因为数据分散在各个节点中</td>
<td>较强，因为所有数据都集中在叶节点，且叶节点通过指针相连，支持高效的顺序访问和范围查询</td>
</tr>
<tr>
<td>内部节点指针数量</td>
<td>较多，因为每个内部节点都需要存储指向子节点的指针和数据（如果存储的话）</td>
<td>较少，因为每个内部节点只存储指向子节点的指针（作为索引）</td>
</tr>
<tr>
<td>树的高度</td>
<td>通常较高，因为每个节点都存储数据和指针</td>
<td>通常较低，因为非叶节点只存储索引，可以容纳更多的关键字，从而减少树的高度</td>
</tr>
<tr>
<td>磁盘I&#x2F;O效率</td>
<td>一般，因为数据分散，可能导致多次磁盘访问</td>
<td>较高，因为所有数据集中在叶节点，且叶节点通过指针相连，有利于磁盘的预读取和顺序访问</td>
</tr>
<tr>
<td>适用范围</td>
<td>适用于需要频繁插入、删除和查找单个关键字的场景</td>
<td>更适用于需要范围查询、顺序访问和磁盘I&#x2F;O效率较高的场景，如数据库索引</td>
</tr>
</tbody></table>
<h4 id="一句话总结B树和B-树的区别（说人话）："><a href="#一句话总结B树和B-树的区别（说人话）：" class="headerlink" title="一句话总结B树和B+树的区别（说人话）："></a>一句话总结B树和B+树的区别（说人话）：</h4><p>B树每个节点都可以存储数据和索引，而B+树则把所有数据都放在叶子节点，非叶子节点只存索引，且叶子节点之间通过指针相连，便于范围查询。<br>看图：B树非根节点上出现的数字，叶子节点就不会出现了，B+树叶子节点上出现了所有数字。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/b.png"
                      alt="B树"
                ><br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/b2.png"
                      alt="B+树"
                ></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>16个灯依次点亮（cubeMX+Keil uVision5+Proteus 8 Professional ）</title>
    <url>/post/20250326233925.html</url>
    <content><![CDATA[<h2 id="1-cubeMX部分"><a href="#1-cubeMX部分" class="headerlink" title="1.cubeMX部分"></a>1.cubeMX部分</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="(1)下载"></a>(1)下载</h3><p>如果没有下载cubeMX，需要先下载，可以到官网（st.com）上下载。<br>下载后运行：<br>①下图是运行后的第一步，可与去官网注册账号，推荐在官网注册，因为官网有中文模式，这一步想点个链接就点去看看，不想点的话，直接next就可以了。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/1.png"
                      alt="1"
                ><br>②✔并且点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/2.png"
                      alt="2"
                ><br>③✔并且点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/3.png"
                      alt="3"
                ><br>④选择下载的路径，然后点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/4.png"
                      alt="4"
                ><br>⑤点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/5.png"
                      alt="5"
                ><br>⑥点击next（这里比较慢，是正常的，请耐心等待）<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/6.png"
                      alt="6"
                ><br>⑦点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/7.png"
                      alt="7"
                ><br>⑧点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/8.png"
                      alt="8"
                ><br>⑨下载成功了，桌面上会出现这个图标<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/9.png"
                      alt="9"
                ></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="(2)配置"></a>(2)配置</h3><p>①打开cubeMX,点击file –&gt; new project<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/10.png"
                      alt="10"
                ><br>②如果出现这种情况，点击ok<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/11.png"
                      alt="11"
                ><br>③选择芯片型号，这里我选择的是STM32F103R6里面的STM32F103R6ATR<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/12.png"
                      alt="12"
                ><br>④点击System Core<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/13.png"
                      alt="13"
                ><br>⑤然后点击RCC<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/14.png"
                      alt="14"
                ><br>⑥按图修改<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/15.png"
                      alt="15"
                ><br>⑦点击Clock Configuration<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/16.png"
                      alt="16"
                ><br>⑧按图修改(这一步很重要，一定要修改，不然会出现错误)<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/17.png"
                      alt="17"
                ><br>⑨回到Pinout Configuration ，我这里需要做16个灯，所以我选择的是整个PB口（一个一个选择），选中一个后，然后点击GPIO Pinout<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/18.png"
                      alt="18"
                ><br>⑩我这里选择的是整个PB口，其他的不用管<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/19.png"
                      alt="19"
                ><br>⑪点击project manager<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/20.png"
                      alt="20"
                ><br>⑫修改红框画着的部分，小红框部分按照自己的uVision5版本修改<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/21.png"
                      alt="21"
                ><br>⑬点击generate code<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/22.png"
                      alt="22"
                ></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>①如果要是出现图中情况，先点yes<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/23.png"
                      alt="23"
                ><br>②登录你的邮件名称和密码，推荐去官网注册，因为官网有中文模式，好填，填完之后一定要去你的邮件中点击给你发的那个链接，相当于是激活你的账号。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/24.png"
                      alt="24"
                ><br>③这一步不一定所有人都出现<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/25.png"
                      alt="25"
                ><br>如果出现图中情况，我知道两个解决办法：<br>Ⅰ.关闭你的防火墙和杀毒软件(这个方法最快)，然后先关闭cubeMX，再打开<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/26.png"
                      alt="26"
                ><br>Ⅱ.先到防火墙，点击图中箭头所指的地方<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/27.png"
                      alt="27"
                ><br>然后把图中（你的界面不是这样的，我这个界面是为了告诉你路径）红框所指的软件添加到允许防火墙，然后先关闭cubeMX，再打开<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/28.png"
                      alt="28"
                ><br>之后就可以输入你的邮箱密码开始下载了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/29.png"
                      alt="29"
                ><br>然后。。。。等一下加载，就可以打开工程了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/30.png"
                      alt="30"
                ></p>
<h2 id="2-Keil-uVision5部分"><a href="#2-Keil-uVision5部分" class="headerlink" title="2.Keil uVision5部分"></a>2.Keil uVision5部分</h2><h3 id="打开工程"><a href="#打开工程" class="headerlink" title="打开工程"></a>打开工程</h3><p>①打开工程，找到main.c<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/31.png"
                      alt="31"
                ><br>②找到mian()函数，在main()函数里面找到while(1)，然后在里面添加代码了，我懒，我不想动脑子，你要是不想写的话直接复制我的代码，把整个main.c文件替换成我的就可以了，（我忘了我都改哪里了，直接全部放进去算了）然后编译一下，没有错误就可以了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/32.png"
                      alt="32"
                ></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Header */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @file           : main.c</span></span><br><span class="line"><span class="comment">  * @brief          : Main program body</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @attention</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * Copyright (c) 2025 STMicroelectronics.</span></span><br><span class="line"><span class="comment">  * All rights reserved.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * This software is licensed under terms that can be found in the LICENSE file</span></span><br><span class="line"><span class="comment">  * in the root directory of this software component.</span></span><br><span class="line"><span class="comment">  * If no LICENSE file comes with this software, it is provided AS-IS.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/* USER CODE END Header */</span></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private includes ----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private define ------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private variables ---------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">/* USER CODE BEGIN PFP */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PFP */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private user code ---------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  The application entry point.</span></span><br><span class="line"><span class="comment">  * @retval int</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HAL_Init();</span><br><span class="line">  SystemClock_Config();</span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  </span><br><span class="line">  <span class="type">uint16_t</span> temp,i,j;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the system clock */</span></span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize all configured peripherals */</span></span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123; </span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief System Clock Configuration</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class="line"><span class="comment">  * in the RCC_OscInitTypeDef structure.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;</span><br><span class="line">  RCC_OscInitStruct.HSEState = RCC_HSE_ON;</span><br><span class="line">  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;</span><br><span class="line">  RCC_OscInitStruct.HSIState = RCC_HSI_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK</span><br><span class="line">                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;</span><br><span class="line">  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class="line">  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;</span><br><span class="line">  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;</span><br><span class="line">  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief GPIO Initialization Function</span></span><br><span class="line"><span class="comment">  * @param None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN MX_GPIO_Init_1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END MX_GPIO_Init_1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOD_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10</span><br><span class="line">                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14</span><br><span class="line">                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5</span><br><span class="line">                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PB0 PB1 PB2 PB10</span></span><br><span class="line"><span class="comment">                           PB11 PB12 PB13 PB14</span></span><br><span class="line"><span class="comment">                           PB15 PB3 PB4 PB5</span></span><br><span class="line"><span class="comment">                           PB6 PB7 PB8 PB9 */</span></span><br><span class="line">  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10</span><br><span class="line">                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14</span><br><span class="line">                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5</span><br><span class="line">                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN MX_GPIO_Init_2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END MX_GPIO_Init_2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  This function is executed in case of error occurrence.</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Error_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class="line">  <span class="comment">/* User can add his own implementation to report the HAL error return state */</span></span><br><span class="line">  __disable_irq();</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END Error_Handler_Debug */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  USE_FULL_ASSERT</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Reports the name of the source file and the source line number</span></span><br><span class="line"><span class="comment">  *         where the assert_param error has occurred.</span></span><br><span class="line"><span class="comment">  * @param  file: pointer to the source file name</span></span><br><span class="line"><span class="comment">  * @param  line: assert_param error line source number</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">uint8_t</span> *file, <span class="type">uint32_t</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 6 */</span></span><br><span class="line">  <span class="comment">/* User can add his own implementation to report the file name and line number,</span></span><br><span class="line"><span class="comment">     ex: printf(&quot;Wrong parameters value: file %s on line %d\r\n&quot;, file, line) */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 6 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* USE_FULL_ASSERT */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="3-Proteus-8-Professional-部分"><a href="#3-Proteus-8-Professional-部分" class="headerlink" title="3.Proteus 8 Professional 部分"></a>3.Proteus 8 Professional 部分</h2><p>①创建一个新工程，名称、位置自己写也写，用它生成的也行<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/33.png"
                      alt="33"
                ><br>②选择“从选中的模板中创建原理图”<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/34.png"
                      alt="34"
                ><br>③选择“创建固件项目”（这部很重要，不要选错，选错后面执行不出来，但是他还不报错，别问我怎么知道的，一下午，没有一个错误就是不出结果，血泪泪的教训）<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/35.png"
                      alt="35"
                ><br>④选择“finish”<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/36.png"
                      alt="36"
                ><br>⑤打开后界面如下<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/37.png"
                      alt="37"
                ><br>⑥选择“添加元件”<br>灯是“led-颜色”，电阻是“res”，电池在“终端原件”里面选择“power”，一个小灯连一个电阻，然后整体要链接电源，电阻记得改成100，不然会有问题<br>⑦点击咱们的芯片，会有个弹框，把“.hex”文件配置进去，路径一般是“MDK-ARM\项目名称”，找不到的话，就退出去，在你的项目里面直接搜“.hex”选中后打开文件所在位置，看着导航栏，然后把“.hex”文件添加进去就可以了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/38.png"
                      alt="38"
                ></p>
<h3 id="注意，这里要把-OSC-Frequency-设置为-72MHz"><a href="#注意，这里要把-OSC-Frequency-设置为-72MHz" class="headerlink" title="注意，这里要把 OSC Frequency 设置为 72MHz"></a>注意，这里要把 OSC Frequency 设置为 72MHz</h3><p>然后画一下电路图就行了，我这里就直接放图了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/39.png"
                      alt="39"
                ><br>如果嫌麻烦的话，小灯用那个“LED-BARGRAPH-颜色”就可以了，电阻用那个“RESPACK-7”也行，但是记得每个小灯都要配置一个电阻。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/40.png"
                      alt="40"
                ></p>
<h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><p>然后就没了，别吐槽我代码low,我懒，我不想动脑子，你要是不想写的话直接复制我的代码吧，想写的话自己用用循环什么的写一下吧！对了HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);一次只能设置一个引脚的电平。</p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉排序树</title>
    <url>/post/20250328115300.html</url>
    <content><![CDATA[<h2 id="一、二叉排序树的基本概念"><a href="#一、二叉排序树的基本概念" class="headerlink" title="一、二叉排序树的基本概念"></a>一、二叉排序树的基本概念</h2><ol>
<li>定义：<br> • 二叉排序树（BST）是一种特殊的二叉树，它满足以下性质：<br> ①若左子树非空，则左子树上所有节点的值均小于根节点的值。<br> ② 若右子树非空，则右子树上所有节点的值均大于根节点的值。<br> ③左子树和右子树也分别为二叉排序树。</li>
<li>特点：<br> ①中序遍历二叉排序树，可以得到一个递增的有序序列。<br> ②没有键值相等的节点。</li>
</ol>
<h2 id="二、二叉排序树的基本操作"><a href="#二、二叉排序树的基本操作" class="headerlink" title="二、二叉排序树的基本操作"></a>二、二叉排序树的基本操作</h2><ol>
<li>查找操作：<br> • 过程：从根节点开始，如果当前节点的值等于目标值，则查找成功；如果当前节点的值大于目标值，则继续遍历左子树；如果当前节点的值小于目标值，则继续遍历右子树。<br> • 时间复杂度：最好情况下为O(log⁡n），最坏情况下为O(n)，取决于树的形态。<br>算法代码：</li>
</ol>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">BSTNode*<span class="title function_">BST_Search</span><span class="params">(BiTreeT,ElemTypekey)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(T!=<span class="literal">NULL</span>&amp;&amp;key!=T-&gt;data) <span class="comment">//若树空或等于根结点值，则结束循环</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(key&lt;T-&gt;data)T=T-&gt;lchild;<span class="comment">//小于，则在左子树上查找</span></span><br><span class="line">		elseT=T-&gt;rchild;<span class="comment">//大于，则在右子树上查找&#125;returnT</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>插入操作：<br> • 过程：首先查找要插入的位置（一定是叶子节点），然后创建新节点插入到该位置。<br> • 时间复杂度：O(logn)，取决于树的形态。<br>插入展示：<br> <img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/1.png"
                      alt="cr"
                ><br>算法代码：</li>
</ol>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BST_Insert</span><span class="params">(BiTree&amp;T,KeyTypek)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;<span class="comment">//原树为空，新插入的记录为根结点</span></span><br><span class="line">		T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">		T-&gt;data=k;</span><br><span class="line">		T-&gt;lchilds=T-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">		return1;<span class="comment">//返回1,插入成功).</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(k==sT-&gt;data)<span class="comment">//树中存在相同关键字的结点，插入失败</span></span><br><span class="line">		return0;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;T-&gt;data)<span class="comment">//插入到T的左子树</span></span><br><span class="line">		<span class="keyword">return</span> BST_Insert(T-&gt;lchildrk);</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//插入到T的右子树</span></span><br><span class="line">		<span class="keyword">return</span> BST_Insert(T-&gt;rchild,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>删除操作：<br> • 过程：<br> • 找到要删除的节点，并确定其父节点。<br> • 如果要删除的节点是叶子节点，直接删除。<br> • 如果要删除的节点只有一个子节点，将其子节点代替要删除的节点。<br> • 如果要删除的节点有两个子节点，找到其右子树中的最小节点或左子树中的最大节点，用该节点代替要删除的节点，并将其删除。<br> • 时间复杂度：O(logn)，取决于树的形态。</li>
</ol>
<p>删除展示：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/2.png"
                      alt="sc"
                ></p>
<h2 id="三、二叉排序树的性质与应用"><a href="#三、二叉排序树的性质与应用" class="headerlink" title="三、二叉排序树的性质与应用"></a>三、二叉排序树的性质与应用</h2><ol>
<li>性质：<br> • 由于二叉排序树的性质，查找、插入和删除操作的时间复杂度通常为O(log⁡n)，但在最坏情况下（如树退化为链表）可能达到O(n)。</li>
<li>应用：<br> • 二叉排序树在数据库索引、符号表、字典等应用中非常常见，用于实现高效的查找、插入和删除操作。</li>
</ol>
<h2 id="四、二叉排序树的构造与调整"><a href="#四、二叉排序树的构造与调整" class="headerlink" title="四、二叉排序树的构造与调整"></a>四、二叉排序树的构造与调整</h2><p>  1.二叉排序树的构造：从一棵空树出发，依次输入元素，将他们插入二叉排序树中的合适位置。<br>设查找的关键字序列为{45,24,53,45,12,24}<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/3.png"
                      alt="gz"
                ><br>算法代码：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Creat_BST</span><span class="params">(BiTree&amp;T,KeyTypestr[],<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	T=<span class="literal">NULL</span>;<span class="comment">//初始时T为空树</span></span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;n)</span><br><span class="line">	&#123;<span class="comment">//依次将每个关键字插入到二叉排序树中</span></span><br><span class="line">		BST_Insert(T,str[i]);</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>调整：<br> • 在实际应用中，为了避免二叉排序树退化为链表，可以采用平衡二叉树（如AVL树、红黑树）来保持树的平衡性。</li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>平衡二叉树（AVL）</title>
    <url>/post/20250328121706.html</url>
    <content><![CDATA[<h2 id="一、平衡二叉树的基本概念"><a href="#一、平衡二叉树的基本概念" class="headerlink" title="一、平衡二叉树的基本概念"></a>一、平衡二叉树的基本概念</h2><ol>
<li>定义：<br> • 平衡二叉树是一棵二叉排序树，其任何节点的两个子树的高度差（平衡因子）的绝对值不超过1。<br> • 平衡因子（Balance Factor，BF）：节点的左子树高度减去右子树高度的值。在AVL树中，平衡因子的取值只能为-1、0或1。</li>
<li>目的：<br> • 保持二叉排序树的平衡，使得查找、插入和删除操作的时间复杂度均为O(logn)。</li>
</ol>
<h2 id="二、平衡二叉树的性质"><a href="#二、平衡二叉树的性质" class="headerlink" title="二、平衡二叉树的性质"></a>二、平衡二叉树的性质</h2><ol>
<li>高度平衡：<br> • 平衡二叉树的任意节点的左右子树都是平衡二叉树，且高度差不超过1。</li>
<li>查找效率：<br> • 在平衡二叉树中查找一个节点，最多需要比较$$log_2N$$次（其中 N是树中节点的数量），保证了较高的查找效率。</li>
</ol>
<h2 id="三、平衡二叉树的调整方法"><a href="#三、平衡二叉树的调整方法" class="headerlink" title="三、平衡二叉树的调整方法"></a>三、平衡二叉树的调整方法</h2><ol>
<li>失衡类型：<br> • 在插入或删除节点后，平衡二叉树可能会出现失衡。失衡分为四种类型：左左失衡（LL）、左右失衡（LR）、右右失衡（RR）和右左失衡（RL）。</li>
<li>调整方法：<br> • 单旋转：<br> • 左左失衡（LL）：对失衡节点进行右旋。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/4.png"
                      alt="zz"
                ><br>          • 右右失衡（RR）：对失衡节点进行左旋。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/5.png"
                      alt="yy"
                ><br>      • 双旋转：<br>          • 左右失衡（LR）：先对失衡节点的左子节点进行左旋，再对失衡节点进行右旋。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/6.png"
                      alt="lr"
                ><br>          • 右左失衡（RL）：先对失衡节点的右子节点进行右旋，再对失衡节点进行左旋。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/7.png"
                      alt="rl"
                ></p>
<h2 id="四、平衡二叉树的插入操作"><a href="#四、平衡二叉树的插入操作" class="headerlink" title="四、平衡二叉树的插入操作"></a>四、平衡二叉树的插入操作</h2><ol>
<li>插入过程：<br> • 首先按照二叉排序树的插入规则，将新节点插入到适当的位置。<br> • 然后从插入节点开始，向上回溯，检查每个节点的平衡因子。<br> • 如果发现失衡，则根据失衡类型进行相应的旋转调整。<br><strong>【注意】①LR和RL旋转时，新节点究竟是插入C的左子树还是插入C的右子树，不影响旋转过程。</strong><br><strong>②每次的调整对象都是最小不平衡子树，也就是插入路径上的理解点最近的平衡因子的绝对值大于1的结点作为根的因子。</strong><br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/8.png"
                      alt="1a"
                ><br>例：{15,3,7,10,9,8}构造一棵平衡二叉树<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/9.png"
                      alt="aa"
                ></li>
<li>时间复杂度：<br> • 插入操作的时间复杂度为O(logn)，因为在最坏情况下，需要回溯到根节点并进行一次或多次旋转。</li>
</ol>
<h2 id="五、平衡二叉树的删除操作"><a href="#五、平衡二叉树的删除操作" class="headerlink" title="五、平衡二叉树的删除操作"></a>五、平衡二叉树的删除操作</h2><ol>
<li>删除过程：<br> • 首先按照二叉排序树的删除规则，删除指定节点。<br> • 然后从删除节点开始，向上回溯，检查每个节点的平衡因子。<br> • 如果发现失衡，则根据失衡类型进行相应的旋转调整。</li>
<li>时间复杂度：<br> • 删除操作的时间复杂度也为O(logn)，原因与插入操作相同。</li>
</ol>
<h2 id="六、平衡二叉树的查找操作"><a href="#六、平衡二叉树的查找操作" class="headerlink" title="六、平衡二叉树的查找操作"></a>六、平衡二叉树的查找操作</h2><p>  • 平衡二叉树的查找操作与二叉排序树相同，从根节点开始，根据目标值与当前节点值的比较结果，决定向左子树或右子树移动，直到找到目标值或遍历到叶子节点。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo写博客出现unknown path</title>
    <url>/post/20250330222251.html</url>
    <content><![CDATA[<h2 id="写hexo博客时报错Template-render-error-unknown-path"><a href="#写hexo博客时报错Template-render-error-unknown-path" class="headerlink" title="写hexo博客时报错Template render error: (unknown path)"></a>写hexo博客时报错Template render error: (unknown path)</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250330/5.png"
                      alt="aa"
                ></p>
<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>可能出现了<code>&#123;&#123;&#125;&#125;、&#123;（）&#125;、&#123;% %&#125;</code>等等，这种hexo无法转义的字符</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>加上键盘左上角的符号，下图所示<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250330/4.png"
                      alt="a"
                ><br>用这个符号将需要注释的部分括住，就行了<br>就像这样<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250330/6.png"
                      alt="a"
                ><br>然后显示的效果就是上面的错误示范那样，如下图所示<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250330/7.png"
                      alt="a"
                ></p>
]]></content>
      <categories>
        <category>解决错误</category>
      </categories>
      <tags>
        <tag>解决错误</tag>
      </tags>
  </entry>
  <entry>
    <title>一道例题带你理解LL(1)分析法</title>
    <url>/post/20250330114720.html</url>
    <content><![CDATA[<h2 id="LL（1）分析法步骤"><a href="#LL（1）分析法步骤" class="headerlink" title="LL（1）分析法步骤"></a>LL（1）分析法步骤</h2><ol>
<li><strong>对文法进行改造</strong></li>
<li><strong>求FIRST集</strong></li>
<li><strong>求FOLLOW集</strong></li>
<li><strong>求SELECT集</strong></li>
<li><strong>分析表分析</strong></li>
</ol>
<p>（❤️一道完整的例题及其解析与步骤）<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250330/1.png"
                      alt="a"
                ></p>
<h2 id="🌞🌞🌞FIRST集："><a href="#🌞🌞🌞FIRST集：" class="headerlink" title="🌞🌞🌞FIRST集："></a>🌞🌞🌞FIRST集：</h2><h3 id="（⭐能听懂版本的官方话）："><a href="#（⭐能听懂版本的官方话）：" class="headerlink" title="（⭐能听懂版本的官方话）："></a>（⭐能听懂版本的官方话）：</h3><ol>
<li>对终结符a，有FIRST(a)＝{a}</li>
<li>对非终结符A，FIRST(A)包含所有可以从A推导出的符号串的第一个符号（不包括“空串ε”，除非A能推导出ε）</li>
</ol>
<h3 id="（🌙人话）："><a href="#（🌙人话）：" class="headerlink" title="（🌙人话）："></a>（🌙人话）：</h3><p>比如第一句E→ TE’，求FIRST(E)，E → TE’，箭头后面第一个字符是T，那么FIRST(E)&#x3D;FIRST(T)。由T→FT’，得，箭头后面第一个字符是F，那么FIRST(E)&#x3D;FIRST(T)＝FIRST(F)。因为①F→(E)，第一个字符是“（”，那么括号就是E→ TE’ 的一个FIRST集里面的元素。②由于F还有一个式子F→i，箭头后面第一个字符是“i”，那么i也是E→ TE’ 的一个FIRST集里面的元素。也就是说FIRST(E)&#x3D;FIRST(T)＝FIRST(F)＝{（,i}。</p>
<h2 id="🌞🌞🌞FOLLOW集：【注意：FOLLOW集里面没有ε】"><a href="#🌞🌞🌞FOLLOW集：【注意：FOLLOW集里面没有ε】" class="headerlink" title="🌞🌞🌞FOLLOW集：【注意：FOLLOW集里面没有ε】"></a>🌞🌞🌞FOLLOW集：【注意：FOLLOW集里面没有ε】</h2><h3 id="（⭐能听懂版本的官方话）：-1"><a href="#（⭐能听懂版本的官方话）：-1" class="headerlink" title="（⭐能听懂版本的官方话）："></a>（⭐能听懂版本的官方话）：</h3><ol>
<li>如果S为识别符号，则把“#”添加进入FOLLOW(S)中。</li>
<li>若A→αBβ (β里面没有ε），那么把FIRST(β）加入到FOLLOW（B)中。</li>
<li>若A→αB或者A→αBβ（β里面有ε），那么把FOLLOW（A)加入FOLLOW(B)中。</li>
</ol>
<h3 id="（🌙人话）：情况比较多，举3个例子"><a href="#（🌙人话）：情况比较多，举3个例子" class="headerlink" title="（🌙人话）：情况比较多，举3个例子"></a>（🌙人话）：情况比较多，举3个例子</h3><ol>
<li>E→TE’，找哪个式子中有“谁→”能退出“E”的，找到了F→（E），那么就取E的右边第一个字符“）”。因为“E”又是开始符，需要再加一个“#”，所以FOLLOW(E)&#x3D;{<code>）</code>,<code>#</code>}。</li>
<li>E’→TE，找出 谁推出了“E’”，找到了E→TE’，那么看E’后面是啥，一看没东西，那就FOLLOW(E’)&#x3D;FOLLOW(E)。</li>
<li>T→FT’，找谁推出了T，找到了E’→TE’，看看T的后面是啥，一看是E’,那么我们应该把FIRST(E’)添加到FOLLOW（T）中，但是，咱们可以看到FIRST(E’)里面是有“ε”的，所以我们也应该把FOLLOW(E’)加入FOLLOW(T)中，所以咱可以写成FOLLOW(T)&#x3D;FOLLOW(E’)+FIRST(E’)。</li>
</ol>
<h2 id="🌞🌞🌞SELECT集：【注意：SELECT集里面没有ε】"><a href="#🌞🌞🌞SELECT集：【注意：SELECT集里面没有ε】" class="headerlink" title="🌞🌞🌞SELECT集：【注意：SELECT集里面没有ε】"></a>🌞🌞🌞SELECT集：【注意：SELECT集里面没有ε】</h2><h3 id="（⭐能听懂版本的官方话）：-2"><a href="#（⭐能听懂版本的官方话）：-2" class="headerlink" title="（⭐能听懂版本的官方话）："></a>（⭐能听懂版本的官方话）：</h3><p>看FIRST集，如果没“ε”，那么SELECT&#x3D;FIRST；如果有“ε”，那么SELECT&#x3D;FOLLOW</p>
<h3 id="（🌙人话）：-1"><a href="#（🌙人话）：-1" class="headerlink" title="（🌙人话）："></a>（🌙人话）：</h3><ol>
<li>比如E→TE’，其中FIRST(E)&#x3D;{<code>（</code>, i }这里面没有“ε”，那么SELECT(E)&#x3D;FIRST(E)&#x3D;{<code>（</code>, i }。</li>
<li>比如E’的第二个式子，E’→ε，这个里面是有“ε”的，那么SELECT(E’)&#x3D;FOLLOW(E’)&#x3D;{<code>）</code>,<code>#</code>}。</li>
</ol>
<p>（❤️列表格的时候建议：SELECT集和FIRST集一样，如果有两个式子的话，要分开写）</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250330/3.png"
                      alt="b"
                ></p>
<h2 id="步骤⑤分析表分析"><a href="#步骤⑤分析表分析" class="headerlink" title="步骤⑤分析表分析:"></a>步骤⑤分析表分析:</h2><p>表格是根据SELECT集画的，如E’→TE’填在了 “E’”行的“＋”列；E’→ε填在了“E’”行“）”列和“#”列。<br>此时可以画一个分析栈，旁边画一个“余留输入串”（❤️如下图）</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250330/2.png"
                      alt="c"
                ></p>
<p>此时的栈中元素有“#E”，栈顶元素是E，余留串首位是i，根据预测分析表表格，调用（栈顶元素）“E”行的（余留串首位）“i”列对应的产生式E→TE’，将栈中“E”弹出，将箭头后的“TE’”压入栈中（从右往左进入，“E’”先进，栈顶元素是T），然后再根据栈顶元素与余留输入串的串首，找相应的产生式，当栈顶元素＝余留串首位时，抵消。重复操作直到抵消完。</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250330/4.jpg"
                      alt="d"
                ></p>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>才女养成记-鼓励突破困境（1）</title>
    <url>/post/20250410214744.html</url>
    <content><![CDATA[<h3 id="文艺清新风"><a href="#文艺清新风" class="headerlink" title="文艺清新风"></a>文艺清新风</h3><p>在时光长河的浅滩，你或许正深陷泥沼，每一步都走得艰难又沉重，好似被无形的丝线缠绕，举步维艰。但请相信呀，每一次挣扎都是向光明的靠近，每一次呼吸都在积蓄破茧的力量。你就像春日里努力破土的嫩芽，带着破土而出的勇气。别放弃，怀揣信念，终会驶向繁花似锦的彼岸，那里阳光正暖，花香正浓。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/1.png"
                      alt="a"
                ></p>
<h3 id="激昂奋进风"><a href="#激昂奋进风" class="headerlink" title="激昂奋进风"></a>激昂奋进风</h3><p>人生恰似一场惊心动魄的马拉松，途中或许会遭遇狂风骤雨，狂风像咆哮的野兽，骤雨如冰冷的银针，让你跌倒、让你迷茫。可你骨子里藏着无尽的能量，那是内心深处对梦想滚烫的渴望，像熊熊燃烧的火焰。别放弃呀，咬紧牙关，以信念为剑，斩断前行路上的一切荆棘，胜利就在前方等你，那里有掌声，有鲜花，还有你梦寐以求的荣耀。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/2.png"
                      alt="a"
                ></p>
<h3 id="诗意浪漫风"><a href="#诗意浪漫风" class="headerlink" title="诗意浪漫风"></a>诗意浪漫风</h3><p>生活如一幅徐徐展开的画卷，此刻的你或许正被阴霾笼罩，世界仿佛失去了色彩，只剩灰暗与孤寂。但你要知道，黑暗只是暂时的，阳光总会穿透云层，像天使的羽翼轻轻拂过。你有着独特的光芒，宛如夜空中最璀璨的星辰，散发着迷人的魅力。只要不放弃，怀揣希望，定能在这画卷上绘出属于自己的绚丽篇章，让每一个色彩都绽放出温暖与美好。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/3.png"
                      alt="a"
                ></p>
<h3 id="哲理深邃风"><a href="#哲理深邃风" class="headerlink" title="哲理深邃风"></a>哲理深邃风</h3><p>人生之路，布满未知与挑战，挫折如同突如其来的暴风雨，试图将你击垮，让你在风雨中瑟瑟发抖。但你要明白，每一次挫折都是成长的契机，是命运给予你的珍贵礼物；每一次磨难都是灵魂的洗礼，让你的内心变得更加坚韧。坚守信念，不放弃自我，你将在风雨后遇见更强大的自己，拥抱更美好的未来，那未来里，有温暖的阳光，有轻柔的微风，还有无尽的希望。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/4.png"
                      alt="a"
                ></p>
<h3 id="温暖治愈风"><a href="#温暖治愈风" class="headerlink" title="温暖治愈风"></a>温暖治愈风</h3><p>亲爱的朋友，当你感到疲惫、想要放弃时，请摸摸自己的心，那里跳动着对生活的热爱，蕴含着无限的可能。你就像冬日里温暖的炉火，能给身边的人带来温暖与慰藉。别放弃呀，相信自己的光芒，它会像一束光，照亮你前行的道路，带你走向温暖与光明。无论前方的路有多难走，我都会在你身边，为你加油鼓劲，陪你一起走过每一个难关。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/5.png"
                      alt="a"
                ></p>
<h3 id="梦幻童话风"><a href="#梦幻童话风" class="headerlink" title="梦幻童话风"></a>梦幻童话风</h3><p>生活恰似一场奇幻的冒险之旅，此刻的你或许正被迷雾困住，四周是朦胧的灰色，找不到前行的方向，仿佛置身于神秘的魔法森林，迷失了回家的路。但你要坚信呀，每一声呼喊都在召唤希望的精灵，每一次思考都在解开迷雾的谜题。你如同勇敢的骑士，带着无畏的勇气和坚定的信念。别放弃，沿着心中的光，定能走出这片迷雾，到达那片洒满阳光的梦幻城堡，那里有糖果般的甜蜜，有彩虹般的绚丽。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/6.png"
                      alt="a"
                ></p>
<h3 id="清新自然风"><a href="#清新自然风" class="headerlink" title="清新自然风"></a>清新自然风</h3><p>人生宛如一片广袤的森林，途中或许会遭遇狂风呼啸，吹落枝头的繁花，让道路变得泥泞不堪；或许会遭遇暴雨倾盆，打湿你的衣衫，让你在风雨中瑟瑟发抖。可你本身就是森林里的一棵大树，有着顽强的生命力和不屈的精神。别放弃呀，用你粗壮的根系紧紧抓住大地，以信念为养分，汲取成长的力量。风雨过后，你会更加茁壮，迎接属于你的那片湛蓝天空，天空里有洁白的云朵，有清脆的鸟鸣。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/7.png"
                      alt="a"
                ></p>
<h3 id="励志温情风"><a href="#励志温情风" class="headerlink" title="励志温情风"></a>励志温情风</h3><p>生活就像一场漫长的马拉松，在奔跑的途中，你或许会感到双腿沉重，每一步都像是踩在棉花上，看不到终点的曙光，只觉得疲惫不堪。但你要知道，每一次的坚持都是对自我的超越，每一滴汗水都在浇灌着成功的花朵。你就像一颗闪耀的星星，在浩瀚的宇宙中努力散发着自己的光芒。别放弃，带着对未来的憧憬，一步一个脚印地向前，终会到达那个充满掌声和欢呼的终点，那里有温暖的拥抱，有真诚的赞美。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/8.png"
                      alt="a"
                ></p>
<h3 id="柔美诗意风"><a href="#柔美诗意风" class="headerlink" title="柔美诗意风"></a>柔美诗意风</h3><p>人生恰似一首悠扬的乐章，此刻的你或许正被低沉的音符环绕，旋律失去了往日的欢快，只剩下压抑和苦闷。但你要相信，每一个低沉的音符都是为了酝酿更激昂的高潮，每一次的停顿都是在积蓄爆发的力量。你如同乐章中的主旋律，有着独特的魅力和动人的旋律。别放弃呀，奏响心中的乐章，让每一个音符都充满希望和力量，终会谱写出属于你的华美乐章，那乐章里，有清风的呢喃，有流水的欢歌。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/9.png"
                      alt="a"
                ></p>
<h3 id="治愈鼓励风"><a href="#治愈鼓励风" class="headerlink" title="治愈鼓励风"></a>治愈鼓励风</h3><p>亲爱的朋友，当你陷入困境，感到无助和绝望时，请看看自己的眼睛，那里藏着对生活的热爱和对未来的期待，就像夜空中闪烁的微光。你就像一盏温暖的明灯，在黑暗中为他人照亮前行的道路。别放弃呀，相信自己内心的力量，它会像温暖的阳光，驱散你心中的阴霾。无论遇到多大的困难，我都会在你身旁，为你加油打气，陪你一起迎接美好的明天，明天里，有灿烂的笑容，有幸福的生活。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250410/10.png"
                      alt="a"
                ></p>
]]></content>
      <categories>
        <category>腹有诗书气自华</category>
      </categories>
      <tags>
        <tag>腹有诗书气自华</tag>
      </tags>
  </entry>
  <entry>
    <title>数码管静态显示0-9999</title>
    <url>/post/20250411205506.html</url>
    <content><![CDATA[<h2 id="1-任务描述："><a href="#1-任务描述：" class="headerlink" title="1.任务描述："></a>1.任务描述：</h2><p>使用 STM32F103R6 芯片的 PC0～PC15 ，PB0 ~ PB15引脚分别接两个共阴极 LED 数码管，其中个位数码管接 PC0～PC7，十位数码管接 PC8～PC15 , 百位数码管接 PB0～PB7，千位数码管接 PB8～PB15。采用静态显示方式，编写程序使两位数码管循环显示 0～9999。</p>
<h2 id="2-理论："><a href="#2-理论：" class="headerlink" title="2.理论："></a>2.理论：</h2><h4 id="①代码理论："><a href="#①代码理论：" class="headerlink" title="①代码理论："></a>①代码理论：</h4><p>设置一个数字i，从0~9999，依次识别每一位。<br>千位&#x3D;i&#x2F;1000<br>百位&#x3D;i&#x2F;100 - 千位数字×10<br>十位&#x3D;i&#x2F;10 - 百位数字×10 - 千位数字×100<br>个位&#x3D;i%1000</p>
<h4 id="②数码管："><a href="#②数码管：" class="headerlink" title="②数码管："></a>②数码管：</h4><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/2.png"
                      alt="a"
                ><br>右边接地：共阴级<br>左边接电源：共阳极</p>
<h4 id="③字形码（段码）："><a href="#③字形码（段码）：" class="headerlink" title="③字形码（段码）："></a>③字形码（段码）：</h4><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/1.png"
                      alt="a"
                ></p>
<h4 id="④74L254："><a href="#④74L254：" class="headerlink" title="④74L254："></a>④74L254：</h4><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/4.png"
                      alt="a"
                ><br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/5.png"
                      alt="a"
                ></p>
<blockquote>
<p>字母上面有横线的，意思是在低电平下作用，如上图，我们红框部分接的地，那么此原件，就显示字母带横线的，例如“BA”上面有横线，那么左边的B0<code>~</code>B7就是输入端，A0<code>~</code>A7就是输出端</p>
</blockquote>
<h2 id="3-代码："><a href="#3-代码：" class="headerlink" title="3.代码："></a>3.代码：</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span> </span></span><br><span class="line"><span class="type">uint16_t</span> table[]=&#123;<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>&#125;; </span><br><span class="line"><span class="type">uint16_t</span> disp[<span class="number">4</span>]; </span><br><span class="line"><span class="type">uint16_t</span> temp,i,temp2,a,b,c;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span> </span><br><span class="line">&#123; </span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> i; </span><br><span class="line"> <span class="keyword">for</span>(;count!=<span class="number">0</span>;count--)</span><br><span class="line">	&#123;</span><br><span class="line">		i=<span class="number">5000</span>; </span><br><span class="line">		<span class="keyword">while</span>(i--); </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); </span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = <span class="number">0xffff</span>; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; </span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"> GPIO_Init(GPIOC, &amp;GPIO_InitStructure); </span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure); </span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line"> &#123; </span><br><span class="line">	 <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">9999</span>;i++) </span><br><span class="line">	 &#123; </span><br><span class="line">		 a=i/<span class="number">1000</span>;</span><br><span class="line">		 b=i/<span class="number">100</span>-a*<span class="number">10</span>;</span><br><span class="line">		 c=i/<span class="number">10</span>-a*<span class="number">100</span>-b*<span class="number">10</span>;</span><br><span class="line">		 disp[<span class="number">3</span>]=table[a]; </span><br><span class="line">		 disp[<span class="number">2</span>]=table[b] ; </span><br><span class="line">		 disp[<span class="number">1</span>]=table[c]; </span><br><span class="line">		 disp[<span class="number">0</span>]=table[i%<span class="number">10</span>]; </span><br><span class="line">		 temp=(disp[<span class="number">1</span>]&lt;&lt;<span class="number">8</span>)|(disp[<span class="number">0</span>]&amp;<span class="number">0x0ff</span>); </span><br><span class="line">		 GPIO_Write(GPIOC,temp); </span><br><span class="line">		 temp2=(disp[<span class="number">3</span>]&lt;&lt;<span class="number">8</span>)|(disp[<span class="number">2</span>]&amp;<span class="number">0x0ff</span>); </span><br><span class="line">		 GPIO_Write(GPIOB,temp2);</span><br><span class="line">		 Delay(<span class="number">100</span>); </span><br><span class="line">	 &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="4-效果图（Proteus）："><a href="#4-效果图（Proteus）：" class="headerlink" title="4.效果图（Proteus）："></a>4.效果图（Proteus）：</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/3.png"
                      alt="a"
                ></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>砚中苔</title>
    <url>/post/20250411221034.html</url>
    <content><![CDATA[<p>《砚中苔》<br>夜雨叩窗时，台灯在稿纸上洇出第三十七个昏黄光晕。数学公式如未破译的甲骨，横亘在草稿纸废墟间，错题集里蜿蜒的红痕像未愈的伤口。李商隐笔下”春蚕到死丝方尽”的执念，此刻化作笔尖折断的脆响，零落在满地演算纸里。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/6.png"
                      alt="a"
                ><br>专业课书籍堆叠成摇摇欲坠的巴比伦塔，每个铅字都在宣纸上洇出潮湿的雾。庄周梦蝶的恍惚中，分明看见函数图像化作青鸟，衔着微分方程掠过《文心雕龙》的残卷。那些被红笔圈禁的重点，恰似李清照词中”寻寻觅觅”的雁字，总在记忆边缘失群。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/7.png"
                      alt="a"
                ><br>砚台里凝结的宿墨，倒映出无数个辗转的子夜。咖啡渍在《传播学概论》扉页洇出年轮，耳机里循环的《广陵散》弦音，竟与窗外梧桐叶的簌簌达成微妙和弦。当月光漫过《艺术哲学》的烫金书脊，恍惚听见蒋捷在《虞美人》里叹：”悲欢离合总无情，一任阶前点滴到天明。”<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/8.png"
                      alt="a"
                ><br>但苔痕总在无人处倔强攀附青砖。那些被揉皱的模拟卷，会在黎明前舒展成宣纸上的远山；错题的朱砂印记，终将在某个顿悟的刹那，化作《牡丹亭》里”原来姹紫嫣红开遍”的惊鸿一瞥。此刻书案上摇曳的枯枝，或许正酝酿着新芽破茧的震颤。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/9.png"
                      alt="a"
                ><br>夜愈深，砚池里的宿墨愈显凝重。笔尖悬而未落的刹那，忽想起陶渊明”采菊东篱下”的归隐志，却惊觉自己早已在书山题海中筑起另一座樊笼。错题本上的红痕如寒山寺的夜钟，每道裂痕都在叩问：这般春蚕自缚，究竟为哪般枇杷黄？<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/10.png"
                      alt="a"
                ><br>雨丝斜织窗纱时，总爱翻出旧手机里存的校园海棠。去年三月，重瓣叠彩的粉云下，曾对着《艺术概论》笑谈莫奈笔下的睡莲。如今连那抹浅笑都成了奢侈，倒像李清照后期词作里”物是人非事事休”的喟叹，未语泪先流。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/11.png"
                      alt="a"
                ><br>咖啡凉透的杯盏旁，蒋捷的”红药”在记忆里开得正好。那些与研友并肩的日子，分明如《牡丹亭》里”良辰美景奈何天”的唱词，转眼化作《长恨歌》中”此恨绵绵无绝期”的惆怅。书页间偶然飘落的银杏书签，叶脉里还蜿蜒着去年秋阳的温度。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/12.png"
                      alt="a"
                ><br>最煎熬是子夜梦回，分明听见张继在枫桥边的叹息：”月落乌啼霜满天”。专业课的生僻概念如潮水漫过脚背，数学公式化作《琵琶行》里的大珠小珠，错乱地敲击着神经。这时总要披衣起身，对着台灯抄写《小石潭记》：”青树翠蔓，蒙络摇缀”，让柳宗元的清冽暂时冻结眼底的热意。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/13.png"
                      alt="a"
                ><br>可苔痕总在暗处生长。某次整理错题本时，忽见某道困扰半月有余的积分题旁，自己曾用瘦金体写下”山重水复疑无路”。再抬头时，晨光正漫过《传播学教程》的铜版纸，在”议程设置”的章节标题上折出鎏金光泽。恍然惊觉，那些被红笔囚禁的日夜，竟在不知不觉中织就了《霓裳羽衣曲》的经纬。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/14.png"
                      alt="a"
                ><br>今晨见砚底苔痕又绿三分，忽忆起王维”行到水穷处，坐看云起时”的禅意。或许考研路本就如《桃花源记》中渔人的孤舟，需在迷津处另辟蹊径。错题的朱砂印终会化作《簪花仕女图》里的朱砂痣，而此刻书案上摇曳的枯枝，已在无人处绽出新芽——那抹翡翠色，恰似《千里江山图》里破云而出的第一缕天光。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250411/15.png"
                      alt="a"
                ></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>琐事</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客增加鼠标点击效果</title>
    <url>/post/20250412224129.html</url>
    <content><![CDATA[<h5 id="鼠标点击会出现5颗✨，星星会出现在点击点下方，随机排布且不重叠（直接放代码啦，在下面✨处，可以更换成你喜欢的图形）："><a href="#鼠标点击会出现5颗✨，星星会出现在点击点下方，随机排布且不重叠（直接放代码啦，在下面✨处，可以更换成你喜欢的图形）：" class="headerlink" title="鼠标点击会出现5颗✨，星星会出现在点击点下方，随机排布且不重叠（直接放代码啦，在下面✨处，可以更换成你喜欢的图形）："></a>鼠标点击会出现5颗✨，星星会出现在点击点下方，随机排布且不重叠（直接放代码啦，在下面✨处，可以更换成你喜欢的图形）：</h5><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&lt;%= config.language %&gt;&quot;</span>&gt;</span></span><br><span class="line">&lt;%- partial(&#x27;components/header/head&#x27;) %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在head部分结束前添加CSS样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.star</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">pointer-events</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation</span>: twinkle <span class="number">1.2s</span> ease-out forwards;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> twinkle &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>) <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">40px</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">80px</span>) <span class="built_in">scale</span>(<span class="number">1.2</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 颜色定义 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.red</span> &#123; <span class="attribute">color</span>: <span class="number">#ff4444</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.orange</span> &#123; <span class="attribute">color</span>: <span class="number">#ffaa00</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.yellow</span> &#123; <span class="attribute">color</span>: <span class="number">#ffff00</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.green</span> &#123; <span class="attribute">color</span>: <span class="number">#00ff00</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue</span> &#123; <span class="attribute">color</span>: <span class="number">#00aaff</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.purple</span> &#123; <span class="attribute">color</span>: <span class="number">#aa00ff</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.pink</span> &#123; <span class="attribute">color</span>: <span class="number">#ff00aa</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.cyan</span> &#123; <span class="attribute">color</span>: <span class="number">#00ffff</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.lime</span> &#123; <span class="attribute">color</span>: <span class="number">#aaff00</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.magenta</span> &#123; <span class="attribute">color</span>: <span class="number">#ff00ff</span>; &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	&lt;%- body %&gt;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 在scripts部分结束前添加JavaScript --&gt;</span></span><br><span class="line">	&lt;%- partial(&#x27;components/scripts&#x27;) %&gt;</span><br><span class="line">	&lt;% if (theme.plugins.aplayer.enable) &#123; %&gt;</span><br><span class="line">	&lt;%- partial(&#x27;components/plugins/aplayer&#x27;) %&gt;</span><br><span class="line">	&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 鼠标点击星星效果</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	  <span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">	                 <span class="string">&#x27;purple&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;cyan&#x27;</span>, <span class="string">&#x27;lime&#x27;</span>, <span class="string">&#x27;magenta&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">	  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript">	  </span></span><br><span class="line"><span class="language-javascript">	  <span class="comment">// 创建5颗星星</span></span></span><br><span class="line"><span class="language-javascript">	  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">	    <span class="keyword">const</span> star = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">	    star.<span class="property">className</span> = <span class="string">`star <span class="subst">$&#123;colors[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * colors.length)]&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">	    star.<span class="property">textContent</span> = <span class="string">&#x27;✨&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">	    </span></span><br><span class="line"><span class="language-javascript">	    <span class="comment">// 随机位置偏移（在点击点下方10-30px范围内）</span></span></span><br><span class="line"><span class="language-javascript">	    <span class="keyword">const</span> offsetX = (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>) * <span class="number">40</span>; <span class="comment">// 水平偏移±20px</span></span></span><br><span class="line"><span class="language-javascript">	    <span class="keyword">const</span> offsetY = (<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">20</span>) + <span class="number">10</span>;   <span class="comment">// 垂直偏移10-30px</span></span></span><br><span class="line"><span class="language-javascript">	    </span></span><br><span class="line"><span class="language-javascript">	    star.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;e.clientX + offsetX&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">	    star.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;e.clientY + offsetY&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">	    </span></span><br><span class="line"><span class="language-javascript">	    <span class="comment">// 添加旋转效果</span></span></span><br><span class="line"><span class="language-javascript">	    star.<span class="property">style</span>.<span class="property">transform</span> += <span class="string">`rotate(<span class="subst">$&#123;<span class="built_in">Math</span>.random() * <span class="number">360</span>&#125;</span>deg)`</span>;</span></span><br><span class="line"><span class="language-javascript">	    </span></span><br><span class="line"><span class="language-javascript">	    container.<span class="title function_">appendChild</span>(star);</span></span><br><span class="line"><span class="language-javascript">	    </span></span><br><span class="line"><span class="language-javascript">	    <span class="comment">// 动画结束后移除元素</span></span></span><br><span class="line"><span class="language-javascript">	    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> star.<span class="title function_">remove</span>(), <span class="number">1200</span>);</span></span><br><span class="line"><span class="language-javascript">	  &#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ol>
<li><p><strong>位置偏移控制</strong>：</p>
<ul>
<li>水平偏移范围：±20px（通过<code>offsetX</code>计算）</li>
<li>垂直偏移范围：10-30px（通过<code>offsetY</code>计算）</li>
<li>确保星星出现在点击点下方且有一定分布</li>
</ul>
</li>
<li><p><strong>间距控制</strong>：</p>
<ul>
<li>垂直方向最小间距10px，最大30px</li>
<li>水平方向随机分布，避免完全重叠</li>
</ul>
</li>
<li><p><strong>性能优化</strong>：</p>
<ul>
<li>星星元素在动画结束后自动移除</li>
<li>使用CSS transform实现高性能动画</li>
</ul>
</li>
</ol>
<p>效果特点：</p>
<ul>
<li>每次点击在光标下方生成5颗彩色星星</li>
<li>星星呈扇形分布，间距自然</li>
<li>星星会执行完整的闪烁+上升+消失动画</li>
</ul>
<p>可以通过以下参数调整效果：</p>
<ul>
<li>修改<code>offsetX</code>的乘数（当前是40）调整水平分布范围</li>
<li>修改<code>offsetY</code>的计算式（当前是10+Math.random()*20）调整垂直分布范围</li>
<li>调整<code>font-size</code>改变星星大小</li>
<li>修改颜色数组<code>colors</code>调整可用颜色</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>python--图像增广</title>
    <url>/post/20250412223500.html</url>
    <content><![CDATA[<h3 id="1-核心目的"><a href="#1-核心目的" class="headerlink" title="1. 核心目的"></a><strong>1. 核心目的</strong></h3><ul>
<li><strong>增加数据多样性</strong>：通过随机变换原始图像（如旋转、翻转、裁剪等），生成新的训练样本，提高模型的泛化能力。</li>
<li><strong>防止过拟合</strong>：丰富训练数据的信息量，减少模型对特定属性（如位置、亮度、颜色）的依赖。</li>
</ul>
<h3 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2. 常用方法"></a><strong>2. 常用方法</strong></h3><ul>
<li><strong>几何变换</strong>：<ul>
<li><strong>旋转</strong>：按一定角度（如90°、180°或任意角度）旋转图像。</li>
<li><strong>翻转</strong>：水平或垂直翻转图像（水平翻转常用于自然场景图像）。</li>
<li><strong>缩放</strong>：放大或缩小图像尺寸。</li>
<li><strong>裁剪</strong>：从图像中随机裁剪出部分区域。</li>
<li><strong>平移</strong>：沿X轴或Y轴移动图像内容。</li>
<li><strong>仿射变换</strong>：结合旋转、缩放和平移等多种变换。</li>
</ul>
</li>
<li><strong>颜色空间变换</strong>：<ul>
<li><strong>亮度调整</strong>：增加或减少图像亮度。</li>
<li><strong>对比度调整</strong>：增强或减弱图像对比度。</li>
<li><strong>饱和度调整</strong>：改变图像颜色的鲜艳程度。</li>
<li><strong>色调调整</strong>：改变图像的整体颜色倾向。</li>
<li><strong>颜色抖动</strong>：同时调整亮度、对比度、饱和度和色调。</li>
</ul>
</li>
<li><strong>噪声注入</strong>：<ul>
<li><strong>高斯噪声</strong>：向图像中添加高斯噪声。</li>
<li><strong>椒盐噪声</strong>：模拟低质量图像中的噪声。</li>
</ul>
</li>
<li><strong>模糊处理</strong>：使用高斯模糊、均值模糊等方法使图像变得模糊。</li>
<li><strong>锐化处理</strong>：增强图像的边缘细节。</li>
<li><strong>混合图像</strong>：如CutMix、CutOut等技术，混合两张或多张图像生成新样本。</li>
<li><strong>风格迁移</strong>：将一种艺术风格应用到图像上。</li>
<li><strong>图像拼接</strong>：将不同来源的图像元素组合在一起。</li>
<li><strong>弹性变形</strong>：模拟生物组织的非刚性形变。</li>
<li><strong>光照变化</strong>：改变光源的位置、强度和颜色。</li>
<li><strong>阴影效果</strong>：为图像中的物体添加阴影。</li>
</ul>
<h3 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a><strong>3. 使用场景</strong></h3><ul>
<li><strong>数据量不足</strong>：通过增广生成更多训练数据。</li>
<li><strong>模型过拟合</strong>：增加数据多样性，提高泛化能力。</li>
<li><strong>目标检测</strong>：帮助模型更好地处理目标的位置、大小和形状变化。</li>
<li><strong>人脸识别</strong>：增加人脸的角度、光照和表情等因素，提高鲁棒性。</li>
</ul>
<h3 id="4-工具与库"><a href="#4-工具与库" class="headerlink" title="4. 工具与库"></a><strong>4. 工具与库</strong></h3><ul>
<li><strong>OpenCV</strong>：提供丰富的图像处理功能，支持几何变换、滤波、色彩空间转换等。</li>
<li><strong>Albumentations</strong>：高效的图像增强库，提供大量变换方法，支持自定义增强流程。</li>
<li><strong>Imgaug</strong>：功能强大的图像增强库，支持多样化的转换和多类型标签。</li>
<li><strong>Augmentor</strong>：基于管道的图像增强库，适合快速设置简单增强流程。</li>
<li><strong>Kornia</strong>：专为PyTorch设计的计算机视觉库，支持GPU加速的增强操作。</li>
<li><strong>Torchvision Transforms</strong>：PyTorch官方提供的图像处理和增强模块。</li>
<li><strong>AugLy</strong>：多模态数据增强库，支持图像、音频、视频和文本的增强。</li>
<li><strong>Nvidia DALI</strong>：GPU加速的数据加载和增强库，适合大规模数据集。</li>
</ul>
<h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a><strong>5. 注意事项</strong></h3><ul>
<li><strong>增广策略选择</strong>：根据任务和数据集特点选择合适的增广方法（如目标检测任务中，避免使用可能影响标注框的变换）。</li>
<li><strong>参数调整</strong>：避免过度增广，导致引入噪声和冗余信息。</li>
<li><strong>标注同步</strong>：对于目标检测和分割任务，增广时需同步调整标注信息（如翻转图像后，标注框坐标也需相应调整）。</li>
<li><strong>性能影响</strong>：评估增广对模型训练速度和内存占用的影响。</li>
<li><strong>任务适配</strong>：某些增广方法可能不适用于特定任务（如肺结节检测中的横纵拉伸可能破坏结节特征）。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>基础流程</strong>：选择增广方法 → 调整参数 → 应用变换 → 生成新样本。</li>
<li><strong>常用场景</strong>：数据量不足、模型过拟合、目标检测、人脸识别。</li>
<li><strong>工具选择</strong>：根据需求选择高效、灵活的库（如Albumentations、Imgaug）。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的cv2库</title>
    <url>/post/20250412220639.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>计算机视觉</strong>：支持图像处理、视频分析、特征提取、目标检测等任务。</li>
<li><strong>跨平台</strong>：可在 Windows、Linux、macOS 等系统上运行。</li>
<li><strong>算法丰富</strong>：提供 2500+ 优化算法，涵盖经典和先进的计算机视觉技术。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>图像读取与显示</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像（支持 JPG、PNG 等格式）</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>, cv2.IMREAD_COLOR)  <span class="comment"># 彩色模式（默认）</span></span><br><span class="line"><span class="comment"># img = cv2.imread(&quot;image.jpg&quot;, cv2.IMREAD_GRAYSCALE)  # 灰度模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Image Window&quot;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)          <span class="comment"># 等待按键（0 表示无限等待）</span></span><br><span class="line">cv2.destroyAllWindows() <span class="comment"># 关闭所有窗口</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>图像处理</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 颜色空间转换（BGR 转灰度）</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整图像大小</span></span><br><span class="line">resized = cv2.resize(img, (<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 边缘检测（Canny 算法）</span></span><br><span class="line">edges = cv2.Canny(gray, <span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>特征检测与匹配</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SIFT 特征检测</span></span><br><span class="line">sift = cv2.SIFT_create()</span><br><span class="line">keypoints, descriptors = sift.detectAndCompute(img, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征匹配（Brute-Force）</span></span><br><span class="line">bf = cv2.BFMatcher()</span><br><span class="line">matches = bf.<span class="keyword">match</span>(descriptors1, descriptors2)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>视频处理</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开视频文件或摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&quot;video.mp4&quot;</span>)  <span class="comment"># 或 0 表示默认摄像头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    cv2.imshow(<span class="string">&quot;Video&quot;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()  <span class="comment"># 释放资源</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><ul>
<li><p><strong>读取并显示图像</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Image&quot;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>灰度转换与边缘检测</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">edges = cv2.Canny(gray, <span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Edges&quot;</span>, edges)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>人脸检测</strong>（需 Haar 级联文件）：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">face_cascade = cv2.CascadeClassifier(<span class="string">&quot;haarcascade_frontalface_default.xml&quot;</span>)</span><br><span class="line">faces = face_cascade.detectMultiScale(gray, <span class="number">1.1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">    cv2.rectangle(img, (x, y), (x+w, y+h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Faces&quot;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>安装依赖</strong>：需先安装 OpenCV 库，使用命令 <code>pip install opencv-python</code>。</li>
<li><strong>颜色空间</strong>：OpenCV 默认使用 BGR 格式，与其他库（如 PIL、Matplotlib）交互时需转换。</li>
<li><strong>图像路径</strong>：确保路径正确，避免读取失败（返回 <code>None</code>）。</li>
<li><strong>资源释放</strong>：处理视频或摄像头时，及时调用 <code>release()</code> 释放资源。</li>
<li><strong>异常处理</strong>：检查图像是否加载成功，避免后续操作报错。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>读取图像</strong>：<code>cv2.imread()</code>，支持多种格式和读取模式。</li>
<li><strong>处理图像</strong>：使用 <code>cvtColor</code>、<code>resize</code>、<code>Canny</code> 等函数进行颜色转换、缩放、边缘检测。</li>
<li><strong>特征检测</strong>：通过 SIFT、SURF 等算法提取关键点，再进行特征匹配。</li>
<li><strong>视频处理</strong>：用 <code>VideoCapture</code> 读取视频，逐帧处理并分析。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的datetime库</title>
    <url>/post/20250412215030.html</url>
    <content><![CDATA[<h3 id="1-核心类介绍"><a href="#1-核心类介绍" class="headerlink" title="1. 核心类介绍"></a><strong>1. 核心类介绍</strong></h3><ul>
<li><strong><code>date</code></strong>：处理年月日（如 <code>2025-04-12</code>）。</li>
<li><strong><code>time</code></strong>：处理时分秒（如 <code>15:30:00</code>）。</li>
<li><strong><code>datetime</code></strong>：结合日期和时间（如 <code>2025-04-12 15:30:00</code>）。</li>
<li><strong><code>timedelta</code></strong>：表示时间间隔（如 <code>1天2小时</code>）。</li>
</ul>
<h3 id="2-获取当前时间"><a href="#2-获取当前时间" class="headerlink" title="2. 获取当前时间"></a><strong>2. 获取当前时间</strong></h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前本地时间（含日期和时间）</span></span><br><span class="line">now = datetime.now()  <span class="comment"># 2025-04-12 15:30:00.123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前日期（只含年月日）</span></span><br><span class="line">today_date = now.date()  <span class="comment"># 2025-04-12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间（只含时分秒）</span></span><br><span class="line">current_time = now.time()  <span class="comment"># 15:30:00.123456</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-创建对象"><a href="#3-创建对象" class="headerlink" title="3. 创建对象"></a><strong>3. 创建对象</strong></h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接指定日期时间</span></span><br><span class="line">dt = datetime(<span class="number">2025</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">30</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从时间戳转换（1970年1月1日以来的秒数）</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">dt = datetime.fromtimestamp(<span class="number">1681294200</span>)  <span class="comment"># 输出：2025-04-12 15:30:00</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-格式化与解析"><a href="#4-格式化与解析" class="headerlink" title="4. 格式化与解析"></a><strong>4. 格式化与解析</strong></h3><ul>
<li><strong><code>strftime()</code></strong>：将日期时间转为字符串。</li>
<li><strong><code>strptime()</code></strong>：将字符串转为日期时间。</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式化字符串（常用符号）</span></span><br><span class="line">formatted = now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  <span class="comment"># 2025-04-12 15:30:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析字符串</span></span><br><span class="line">time_str = <span class="string">&quot;2025-04-12 15:30:00&quot;</span></span><br><span class="line">dt = datetime.strptime(time_str, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>常用格式符号</strong>：</p>
<ul>
<li><code>%Y</code>：四位年份（如2025）</li>
<li><code>%m</code>：月份（01-12）</li>
<li><code>%d</code>：日期（01-31）</li>
<li><code>%H</code>：小时（24小时制，00-23）</li>
<li><code>%M</code>：分钟（00-59）</li>
<li><code>%S</code>：秒（00-59）</li>
</ul>
<h3 id="5-时间运算（timedelta）"><a href="#5-时间运算（timedelta）" class="headerlink" title="5. 时间运算（timedelta）"></a><strong>5. 时间运算（<code>timedelta</code>）</strong></h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加1天</span></span><br><span class="line">new_time = now + timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 减2小时</span></span><br><span class="line">new_time = now - timedelta(hours=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算时间差</span></span><br><span class="line">delta = new_time - now</span><br><span class="line"><span class="built_in">print</span>(delta.total_seconds())  <span class="comment"># 输出总秒数</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-时区处理"><a href="#6-时区处理" class="headerlink" title="6. 时区处理"></a><strong>6. 时区处理</strong></h3><p>需安装 <code>pytz</code> 库：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带时区的对象</span></span><br><span class="line">shanghai_tz = pytz.timezone(<span class="string">&quot;Asia/Shanghai&quot;</span>)</span><br><span class="line">dt = datetime.now(shanghai_tz)  <span class="comment"># 2025-04-12 15:30:00+08:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换时区</span></span><br><span class="line">utc_time = dt.astimezone(pytz.UTC)  <span class="comment"># 转为UTC时间</span></span><br></pre></td></tr></table></figure></div>

<h3 id="7-常用方法"><a href="#7-常用方法" class="headerlink" title="7. 常用方法"></a><strong>7. 常用方法</strong></h3><ul>
<li><strong><code>replace()</code></strong>：修改日期时间。<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">new_dt = now.replace(year=<span class="number">2026</span>, hour=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div></li>
<li><strong><code>weekday()</code></strong>：返回星期几（0&#x3D;周一，6&#x3D;周日）。</li>
<li><strong><code>isoweekday()</code></strong>：返回星期几（1&#x3D;周一，7&#x3D;周日）。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>创建对象</strong>：用 <code>datetime()</code>、<code>date()</code> 或 <code>time()</code> 直接定义。</li>
<li><strong>格式化</strong>：<code>strftime()</code> 转字符串，<code>strptime()</code> 解析字符串。</li>
<li><strong>运算</strong>：用 <code>timedelta</code> 加减时间。</li>
<li><strong>时区</strong>：通过 <code>pytz</code> 处理不同时区。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的jieba库</title>
    <url>/post/20250412223136.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>分词</strong>：支持精确模式、全模式、搜索引擎模式三种分词方式，适用于不同场景。</li>
<li><strong>词性标注</strong>：为分词结果标注词性（如名词、动词），帮助理解词语在句子中的角色。</li>
<li><strong>关键词提取</strong>：基于 TF-IDF 或 TextRank 算法提取文本关键词，快速获取文本核心信息。</li>
<li><strong>自定义词典</strong>：允许用户添加自定义词汇，提高分词的准确性和灵活性。</li>
</ul>
<h3 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2. 常用方法"></a><strong>2. 常用方法</strong></h3><ul>
<li><strong>分词方法</strong>：<ul>
<li><code>jieba.cut(text, cut_all=False)</code>：精确模式分词（默认），适合文本分析。</li>
<li><code>jieba.cut(text, cut_all=True)</code>：全模式分词，扫描所有可能的词语，适合信息检索。</li>
<li><code>jieba.cut_for_search(text)</code>：搜索引擎模式分词，在精确模式基础上对长词再次切分，适合搜索引擎。</li>
</ul>
</li>
<li><strong>词性标注</strong>：<ul>
<li><code>jieba.posseg.cut(text)</code>：返回带有词性标注的分词结果，如 <code>名词</code>、<code>动词</code>。</li>
</ul>
</li>
<li><strong>关键词提取</strong>：<ul>
<li><code>jieba.analyse.extract_tags(text, topK=10)</code>：提取文本中的关键词，<code>topK</code> 指定返回数量。</li>
</ul>
</li>
<li><strong>自定义词典</strong>：<ul>
<li><code>jieba.load_userdict(&quot;user_dict.txt&quot;)</code>：加载自定义词典文件。</li>
<li><code>jieba.add_word(&quot;新词&quot;)</code>：手动添加单个词汇到词典。</li>
</ul>
</li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><ul>
<li><p><strong>精确模式分词</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;我爱北京天安门&quot;</span></span><br><span class="line">seg_list = jieba.cut(text, cut_all=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;精确模式分词结果:&quot;</span>, <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"><span class="comment"># 输出: 我/ 爱/ 北京/ 天安门</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>全模式分词</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">seg_list = jieba.cut(text, cut_all=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全模式分词结果:&quot;</span>, <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"><span class="comment"># 输出: 我/ 爱/ 北京/ 京天/ 天安/ 安门</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>搜索引擎模式分词</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">seg_list = jieba.cut_for_search(text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;搜索引擎模式分词结果:&quot;</span>, <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"><span class="comment"># 输出: 我/ 爱/ 北京/ 天安/ 安门</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>词性标注</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"></span><br><span class="line">words = pseg.cut(text)</span><br><span class="line"><span class="keyword">for</span> word, flag <span class="keyword">in</span> words:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;word&#125;</span>(<span class="subst">&#123;flag&#125;</span>)&quot;</span>)</span><br><span class="line"><span class="comment"># 输出: 我(r) 爱(v) 北京(LOC) 天安门(LOC)</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>关键词提取</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jieba <span class="keyword">import</span> analyse</span><br><span class="line"></span><br><span class="line">keywords = analyse.extract_tags(text, topK=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;关键词提取结果:&quot;</span>, keywords)</span><br><span class="line"><span class="comment"># 输出: [&#x27;北京&#x27;, &#x27;天安门&#x27;, &#x27;爱&#x27;]</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>安装问题</strong>：使用 <code>pip install jieba</code> 安装，若失败可尝试镜像源（如 <code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code>）。</li>
<li><strong>分词模式选择</strong>：根据需求选择模式，精确模式适合分析，全模式适合检索，搜索引擎模式适合长文本处理。</li>
<li><strong>自定义词典</strong>：对于专业术语或新词汇，通过 <code>load_userdict</code> 或 <code>add_word</code> 提高分词准确性。</li>
<li><strong>停用词处理</strong>：去除无意义词汇（如“的”、“和”），提升分析效率。</li>
<li><strong>性能优化</strong>：对大规模文本使用并行分词（<code>jieba.enable_parallel()</code>）加速处理。</li>
<li><strong>编码问题</strong>：中文文本需指定 <code>encoding=&#39;utf-8&#39;</code>，避免乱码。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>基础流程</strong>：导入库 → 加载文本 → 分词 → 处理结果。</li>
<li><strong>常用场景</strong>：文本分析用精确模式，信息检索用全模式，搜索引擎用搜索引擎模式。</li>
<li><strong>高级功能</strong>：通过自定义词典和停用词表优化分词效果，结合关键词提取快速获取文本核心。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的matplotlib库</title>
    <url>/post/20250412220940.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>数据可视化</strong>：支持折线图、散点图、柱状图、饼图、3D 图等 20+ 种图表类型。</li>
<li><strong>高度定制</strong>：可调整颜色、线型、标记、标签、标题、网格等样式。</li>
<li><strong>跨平台输出</strong>：支持保存为 PNG、PDF、SVG 等格式，适配论文、网页、报告等场景。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong><code>pyplot</code> 模块</strong>（类似 MATLAB 语法）：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">10</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>], <span class="string">&#x27;r--o&#x27;</span>, label=<span class="string">&#x27;Line 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标签、标题、图例</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;X-axis&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Y-axis&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Simple Plot&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示网格和图表</span></span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong><code>Figure</code> 和 <code>Axes</code> 对象</strong>（面向对象风格）：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))  <span class="comment"># 创建画布</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)         <span class="comment"># 添加子图</span></span><br><span class="line"></span><br><span class="line">ax.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">10</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>], <span class="string">&#x27;g:&#x27;</span>, label=<span class="string">&#x27;Line 2&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;X-axis&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;Y-axis&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;Object-Oriented Plot&quot;</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">ax.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>常用函数</strong>：</p>
<ul>
<li><code>plt.scatter(x, y, s=None, c=None)</code>：绘制散点图，<code>s</code> 控制点大小，<code>c</code> 控制颜色。</li>
<li><code>plt.bar(x, height, width=0.8)</code>：绘制柱状图。</li>
<li><code>plt.pie(sizes, labels=None)</code>：绘制饼图。</li>
<li><code>plt.hist(data, bins=10)</code>：绘制直方图。</li>
<li><code>plt.savefig(&quot;plot.png&quot;, dpi=300, bbox_inches=&#39;tight&#39;)</code>：保存图表。</li>
</ul>
</li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><ul>
<li><p><strong>折线图</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;b-&#x27;</span>, linewidth=<span class="number">2</span>, label=<span class="string">&#x27;sin(x)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;X&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Sine Wave&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>散点图</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">x = np.random.rand(<span class="number">50</span>)</span><br><span class="line">y = x + np.random.normal(<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, s=<span class="number">50</span>, c=<span class="string">&#x27;red&#x27;</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;X&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Scatter Plot&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>多子图</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图 1</span></span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">&#x27;g--&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].set_title(<span class="string">&quot;Subplot 1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图 2</span></span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].scatter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], s=<span class="number">100</span>, c=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].set_title(<span class="string">&quot;Subplot 2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图 3</span></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].bar([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], color=<span class="string">&#x27;lightgreen&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].set_title(<span class="string">&quot;Subplot 3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图 4</span></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].hist(np.random.randn(<span class="number">1000</span>), bins=<span class="number">30</span>, color=<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].set_title(<span class="string">&quot;Subplot 4&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>安装问题</strong>：使用 <code>pip install matplotlib</code> 安装，若报错需检查依赖项（如 NumPy）。</li>
<li><strong>中文显示</strong>：添加以下代码解决中文乱码：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 设置字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>    <span class="comment"># 解决负号显示问题</span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>图像保存</strong>：<ul>
<li>使用 <code>bbox_inches=&#39;tight&#39;</code> 避免图表被截断。</li>
<li>指定 <code>dpi</code> 提高分辨率（如 <code>dpi=300</code>）。</li>
</ul>
</li>
<li><strong>性能优化</strong>：大数据量时避免频繁调用 <code>plt.plot()</code>，改用 <code>plt.draw()</code> 或分批绘制。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>基础绘图</strong>：用 <code>plt.plot()</code>、<code>plt.scatter()</code>、<code>plt.bar()</code> 等快速绘图。</li>
<li><strong>样式调整</strong>：通过参数设置颜色、线型、标签等，或使用 <code>plt.style.use(&#39;ggplot&#39;)</code> 应用预定义样式。</li>
<li><strong>多子图布局</strong>：用 <code>plt.subplots()</code> 创建复杂图表，<code>plt.tight_layout()</code> 自动调整间距。</li>
<li><strong>输出图表</strong>：<code>plt.savefig()</code> 保存为文件，<code>plt.show()</code> 直接显示。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的numpy库</title>
    <url>/post/20250412220653.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>多维数组操作</strong>：提供高效的 <code>ndarray</code> 对象，支持向量、矩阵、高维数组运算。</li>
<li><strong>数学函数集成</strong>：内置三角函数、指数函数、统计函数等，如 <code>np.sin()</code>, <code>np.exp()</code>, <code>np.mean()</code>。</li>
<li><strong>线性代数</strong>：支持矩阵乘法、求逆、特征值计算等（通过 <code>np.linalg</code> 模块）。</li>
<li><strong>随机数生成</strong>：提供均匀分布、正态分布等随机数生成函数（如 <code>np.random.rand()</code>）。</li>
<li><strong>文件读写</strong>：支持 CSV、二进制文件等数据格式的读写。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>创建数组</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表创建</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全零/全一数组</span></span><br><span class="line">zeros = np.zeros((<span class="number">2</span>, <span class="number">3</span>))    <span class="comment"># 2行3列全零</span></span><br><span class="line">ones = np.ones((<span class="number">3</span>, <span class="number">4</span>), dtype=<span class="built_in">int</span>)  <span class="comment"># 3行4列全一，指定数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等差/等分数组</span></span><br><span class="line">arange = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)       <span class="comment"># [0,2,4,6,8]</span></span><br><span class="line">linspace = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>)     <span class="comment"># [0.0, 0.25, 0.5, 0.75, 1.0]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>数组属性</strong>：</p>
<ul>
<li><code>shape</code>：维度（如 <code>(3, 4)</code> 表示3行4列）。</li>
<li><code>dtype</code>：数据类型（如 <code>int32</code>, <code>float64</code>）。</li>
<li><code>ndim</code>：维度数（一维、二维等）。</li>
<li><code>size</code>：元素总数。</li>
</ul>
</li>
<li><p><strong>数组操作</strong>：</p>
<ul>
<li><code>reshape()</code>：改变形状（如 <code>arr.reshape(3, 4)</code>）。</li>
<li><code>flatten()</code>：展平为一维数组。</li>
<li><code>transpose()</code>：转置（行列互换）。</li>
<li><code>concatenate()</code>：合并数组（按行或列）。</li>
</ul>
</li>
<li><p><strong>数学运算</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a + b)    <span class="comment"># 加法 → [5,7,9]</span></span><br><span class="line"><span class="built_in">print</span>(a * <span class="number">2</span>)    <span class="comment"># 标量乘法 → [2,4,6]</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(a, b))  <span class="comment"># 点积 → 32</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>统计函数</strong>：</p>
<ul>
<li><code>np.mean()</code>：平均值。</li>
<li><code>np.std()</code>：标准差。</li>
<li><code>np.max()</code>&#x2F;<code>np.min()</code>：最大值&#x2F;最小值。</li>
</ul>
</li>
<li><p><strong>线性代数</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">B = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.dot(A, B))    <span class="comment"># 矩阵乘法 → [[19,22], [43,50]]</span></span><br><span class="line"><span class="built_in">print</span>(np.linalg.inv(A)) <span class="comment"># 矩阵求逆（需方阵）</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>随机数生成</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 均匀分布（0-1）</span></span><br><span class="line">rand = np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正态分布</span></span><br><span class="line">randn = np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机整数（1-10）</span></span><br><span class="line">randint = np.random.randint(<span class="number">1</span>, <span class="number">11</span>, size=(<span class="number">5</span>,))</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><ul>
<li><p><strong>数组索引与切片</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>, <span class="number">1</span>])    <span class="comment"># 输出第二行第一列 → 2</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>:, :<span class="number">2</span>])  <span class="comment"># 输出第二行到最后一行，前两列 → [[4,5], [7,8]]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>广播机制</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a * b)    <span class="comment"># 输出 [2,4,6]（标量自动广播到每个元素）</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>文件读写</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存到 CSV</span></span><br><span class="line">np.savetxt(<span class="string">&quot;data.csv&quot;</span>, arr, delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 CSV 读取</span></span><br><span class="line">loaded_arr = np.loadtxt(<span class="string">&quot;data.csv&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>数据类型一致性</strong>：确保数组元素类型一致，避免隐式转换错误。</li>
<li><strong>越界访问</strong>：避免使用超出数组维度的索引（如 <code>arr[10]</code> 对长度为5的数组）。</li>
<li><strong>内存管理</strong>：处理大型数组时，注意内存使用情况，避免溢出。</li>
<li><strong>广播规则</strong>：理解不同形状数组间的运算规则（如 <code>(3,)</code> 与 <code>(3,1)</code> 的广播）。</li>
<li><strong>文件路径</strong>：读写文件时检查路径是否存在及权限问题。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>基础操作</strong>：用 <code>np.array()</code> 创建数组，<code>reshape()</code> 调整形状，<code>dtype</code> 指定数据类型。</li>
<li><strong>数学运算</strong>：直接对数组进行加减乘除，或使用 <code>np.dot()</code> 计算点积。</li>
<li><strong>统计分析</strong>：用 <code>np.mean()</code>, <code>np.std()</code> 等函数快速计算统计量。</li>
<li><strong>线性代数</strong>：通过 <code>np.linalg</code> 模块进行矩阵运算。</li>
<li><strong>随机数</strong>：用 <code>np.random</code> 模块生成各种分布的随机数。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的pandas库</title>
    <url>/post/20250412220708.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>数据结构操作</strong>：提供 <code>Series</code>（一维）和 <code>DataFrame</code>（二维）数据结构，支持高效的数据操作。</li>
<li><strong>数据清洗</strong>：集成处理缺失值、重复值、异常值等方法（如 <code>dropna()</code>, <code>fillna()</code>, <code>drop_duplicates()</code>）。</li>
<li><strong>数据分析</strong>：支持描述性统计、聚合、分组、排序、合并等操作（如 <code>mean()</code>, <code>sum()</code>, <code>groupby()</code>, <code>sort_values()</code>, <code>merge()</code>）。</li>
<li><strong>文件读写</strong>：支持 CSV、Excel、SQL、JSON 等格式的数据读写（如 <code>read_csv()</code>, <code>to_excel()</code>）。</li>
<li><strong>数据可视化</strong>：集成 Matplotlib 库，支持直接绘制图表（如 <code>plot()</code>）。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>创建对象</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Series（一维数据）</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 DataFrame（二维表格）</span></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: [<span class="number">25</span>, <span class="number">32</span>, <span class="number">18</span>],</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>: [<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;Seattle&#x27;</span>, <span class="string">&#x27;Los Angeles&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>查看数据</strong>：</p>
<ul>
<li><code>head(n)</code>：查看前 <code>n</code> 行（默认前5行）。</li>
<li><code>tail(n)</code>：查看后 <code>n</code> 行（默认后5行）。</li>
<li><code>info()</code>：查看数据类型、非空值数量等。</li>
<li><code>describe()</code>：查看数值列的统计摘要（均值、标准差等）。</li>
</ul>
</li>
<li><p><strong>数据清洗</strong>：</p>
<ul>
<li><code>dropna()</code>：删除缺失值。</li>
<li><code>fillna(value)</code>：用指定值填充缺失值。</li>
<li><code>drop_duplicates()</code>：删除重复行。</li>
<li><code>clip(lower, upper)</code>：限制数值范围（如将小于0的值设为0）。</li>
</ul>
</li>
<li><p><strong>数据分析</strong>：</p>
<ul>
<li><strong>选择数据</strong>：<ul>
<li><code>df[&#39;column&#39;]</code>：选择单列。</li>
<li><code>df[[&#39;col1&#39;, &#39;col2&#39;]]</code>：选择多列。</li>
<li><code>df.loc[row_label]</code>：按行标签选择数据。</li>
<li><code>df.iloc[row_index]</code>：按行索引选择数据。</li>
</ul>
</li>
<li><strong>统计计算</strong>：<ul>
<li><code>mean()</code>：均值。</li>
<li><code>sum()</code>：求和。</li>
<li><code>min()</code>&#x2F;<code>max()</code>：最小值&#x2F;最大值。</li>
<li><code>groupby(&#39;column&#39;).agg(func)</code>：按列分组后聚合（如计算每组均值）。</li>
</ul>
</li>
<li><strong>排序</strong>：<ul>
<li><code>sort_values(by=&#39;column&#39;)</code>：按列值排序。</li>
<li><code>sort_index()</code>：按行&#x2F;列索引排序。</li>
</ul>
</li>
<li><strong>合并数据</strong>：<ul>
<li><code>merge(df1, df2, on=&#39;column&#39;)</code>：按列合并两个 DataFrame。</li>
<li><code>concat([df1, df2])</code>：沿行或列拼接多个 DataFrame。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>文件读写</strong>：</p>
<ul>
<li><strong>CSV 文件</strong>：<ul>
<li><code>read_csv(&#39;file.csv&#39;)</code>：读取 CSV。</li>
<li><code>to_csv(&#39;file.csv&#39;, index=False)</code>：写入 CSV（不保存索引）。</li>
</ul>
</li>
<li><strong>Excel 文件</strong>：<ul>
<li><code>read_excel(&#39;file.xlsx&#39;, sheet_name=&#39;Sheet1&#39;)</code>：读取 Excel。</li>
<li><code>to_excel(&#39;file.xlsx&#39;, sheet_name=&#39;Sheet1&#39;)</code>：写入 Excel。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>数据可视化</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line">df.plot(x=<span class="string">&#x27;name&#x27;</span>, y=<span class="string">&#x27;age&#x27;</span>, kind=<span class="string">&#x27;line&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><ul>
<li><p><strong>筛选数据</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 筛选 age 列大于 30 的行</span></span><br><span class="line">filtered_df = df[df[<span class="string">&#x27;age&#x27;</span>] &gt; <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多条件筛选（age &gt; 20 且 city 为 &#x27;New York&#x27;）</span></span><br><span class="line">filtered_df = df[(df[<span class="string">&#x27;age&#x27;</span>] &gt; <span class="number">20</span>) &amp; (df[<span class="string">&#x27;city&#x27;</span>] == <span class="string">&#x27;New York&#x27;</span>)]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>分组统计</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按 city 分组，计算每组的平均年龄</span></span><br><span class="line">grouped_df = df.groupby(<span class="string">&#x27;city&#x27;</span>)[<span class="string">&#x27;age&#x27;</span>].mean()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>处理缺失值</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 0 填充缺失值</span></span><br><span class="line">df.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除包含缺失值的行</span></span><br><span class="line">df.dropna(inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>数据类型一致性</strong>：确保数据列的数据类型一致，避免隐式转换错误。</li>
<li><strong>缺失值处理</strong>：在分析前处理缺失值，避免影响结果准确性。</li>
<li><strong>内存管理</strong>：处理大型数据集时，注意内存使用情况，避免溢出。</li>
<li><strong>索引和列名</strong>：理解索引和列名的概念，正确使用 <code>loc[]</code> 和 <code>iloc[]</code> 进行数据选择。</li>
<li><strong>文件路径</strong>：读写文件时检查路径是否存在及权限问题。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>基础操作</strong>：用 <code>pd.Series()</code> 和 <code>pd.DataFrame()</code> 创建数据对象，<code>head()</code> 和 <code>tail()</code> 查看数据。</li>
<li><strong>数据清洗</strong>：用 <code>dropna()</code>、<code>fillna()</code>、<code>drop_duplicates()</code> 处理缺失值和重复值。</li>
<li><strong>数据分析</strong>：用 <code>mean()</code>、<code>sum()</code>、<code>groupby()</code> 进行统计和分组计算，<code>sort_values()</code> 排序数据。</li>
<li><strong>文件读写</strong>：用 <code>read_csv()</code> 和 <code>to_csv()</code> 读写 CSV，<code>read_excel()</code> 和 <code>to_excel()</code> 读写 Excel。</li>
<li><strong>数据可视化</strong>：用 <code>plot()</code> 方法直接绘制图表。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的os库</title>
    <url>/post/20250412215244.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>与操作系统交互</strong>：处理文件&#x2F;目录、环境变量、进程控制等。</li>
<li><strong>跨平台兼容</strong>：自动适配不同操作系统（Windows&#x2F;Linux&#x2F;macOS）。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>文件&#x2F;目录操作</strong>：</p>
<ul>
<li><code>os.getcwd()</code>：获取当前工作目录。</li>
<li><code>os.listdir(path)</code>：列出目录下的所有文件和子目录。</li>
<li><code>os.mkdir(path)</code>：创建单层目录。</li>
<li><code>os.makedirs(path)</code>：递归创建多层目录。</li>
<li><code>os.rmdir(path)</code>：删除空目录。</li>
<li><code>os.removedirs(path)</code>：递归删除空目录。</li>
<li><code>os.rename(old, new)</code>：重命名文件&#x2F;目录。</li>
<li><code>os.remove(path)</code>：删除文件。</li>
</ul>
</li>
<li><p><strong>路径处理</strong>：</p>
<ul>
<li><code>os.path.join(path1, path2)</code>：拼接路径（自动处理分隔符）。</li>
<li><code>os.path.exists(path)</code>：检查路径是否存在。</li>
<li><code>os.path.isfile(path)</code>：判断是否为文件。</li>
<li><code>os.path.isdir(path)</code>：判断是否为目录。</li>
<li><code>os.path.abspath(path)</code>：获取绝对路径。</li>
</ul>
</li>
<li><p><strong>环境变量</strong>：</p>
<ul>
<li><code>os.environ.get(&quot;VAR_NAME&quot;)</code>：获取环境变量。</li>
<li><code>os.environ[&quot;VAR_NAME&quot;] = &quot;value&quot;</code>：设置环境变量（谨慎使用）。</li>
</ul>
</li>
<li><p><strong>系统信息</strong>：</p>
<ul>
<li><code>os.name</code>：返回操作系统名称（<code>posix</code>&#x3D;Linux&#x2F;macOS，<code>nt</code>&#x3D;Windows）。</li>
<li><code>os.cpu_count()</code>：获取CPU核心数。</li>
</ul>
</li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录并列出文件</span></span><br><span class="line">current_dir = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前目录:&quot;</span>, current_dir)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;目录内容:&quot;</span>, os.listdir(current_dir))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建/删除目录</span></span><br><span class="line">os.mkdir(<span class="string">&quot;new_folder&quot;</span>)</span><br><span class="line">os.rmdir(<span class="string">&quot;new_folder&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径拼接</span></span><br><span class="line">full_path = os.path.join(current_dir, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;file.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(full_path):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件存在！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取绝对路径</span></span><br><span class="line">abs_path = os.path.abspath(<span class="string">&quot;file.txt&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>路径分隔符</strong>：Windows用 <code>\</code>，Linux&#x2F;macOS用 <code>/</code>，建议用 <code>os.path.join()</code> 自动处理。</li>
<li><strong>权限问题</strong>：操作文件&#x2F;目录前，检查是否有读写权限（<code>os.access(path, os.R_OK)</code>）。</li>
<li><strong>安全风险</strong>：避免直接用用户输入拼接命令（用 <code>subprocess</code> 替代 <code>os.system()</code>）。</li>
<li><strong>跨平台性</strong>：使用 <code>os.path</code> 模块的函数处理路径，提高代码兼容性。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>文件&#x2F;目录操作</strong>：用 <code>os.mkdir</code>、<code>os.rename</code> 等函数管理文件和目录。</li>
<li><strong>路径处理</strong>：用 <code>os.path.join</code> 拼接路径，<code>os.path.exists</code> 检查存在性。</li>
<li><strong>环境变量</strong>：通过 <code>os.environ</code> 读写系统环境变量。</li>
<li><strong>系统信息</strong>：用 <code>os.name</code> 和 <code>os.cpu_count()</code> 获取系统信息。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的qrcode库</title>
    <url>/post/20250412220456.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>生成二维码</strong>：将文本、网址等信息编码为二维码图片，支持自定义尺寸、颜色、容错率等。</li>
<li><strong>依赖库</strong>：需配合 <code>Pillow</code>（PIL）库生成图像，安装时需使用 <code>pip install qrcode[pil]</code>。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>QRCode 类</strong>：</p>
<ul>
<li><strong>初始化</strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">qr = qrcode.QRCode(</span><br><span class="line">    version=<span class="number">1</span>,                <span class="comment"># 二维码尺寸（1-40），值越大尺寸越大</span></span><br><span class="line">    error_correction=qrcode.constants.ERROR_CORRECT_H,  <span class="comment"># 容错率（L/M/Q/H）</span></span><br><span class="line">    box_size=<span class="number">10</span>,              <span class="comment"># 每个点的像素大小</span></span><br><span class="line">    border=<span class="number">4</span>                  <span class="comment"># 边框宽度（单位：点）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></li>
<li><strong>添加数据</strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">qr.add_data(<span class="string">&quot;https://example.com&quot;</span>)  <span class="comment"># 支持文本、网址等</span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>生成二维码</strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">qr.make(fit=<span class="literal">True</span>)  <span class="comment"># fit=True 自动调整尺寸以适应数据</span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>生成图像</strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">img = qr.make_image(fill_color=<span class="string">&quot;black&quot;</span>, back_color=<span class="string">&quot;white&quot;</span>)  <span class="comment"># 自定义颜色</span></span><br><span class="line">img.save(<span class="string">&quot;qrcode.png&quot;</span>)  <span class="comment"># 保存为文件</span></span><br><span class="line">img.show()             <span class="comment"># 显示二维码</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p><strong>快捷方法</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速生成二维码（自动配置参数）</span></span><br><span class="line">img = qrcode.make(<span class="string">&quot;Hello, QR Code!&quot;</span>, fill_color=<span class="string">&quot;blue&quot;</span>, back_color=<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">img.save(<span class="string">&quot;simple_qrcode.png&quot;</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><ul>
<li><p><strong>基础示例</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维码对象</span></span><br><span class="line">qr = qrcode.QRCode(version=<span class="number">2</span>, error_correction=qrcode.constants.ERROR_CORRECT_H)</span><br><span class="line">qr.add_data(<span class="string">&quot;https://github.com&quot;</span>)</span><br><span class="line">qr.make(fit=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成并保存图像</span></span><br><span class="line">img = qr.make_image(fill_color=<span class="string">&quot;green&quot;</span>, back_color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">img.save(<span class="string">&quot;github_qrcode.png&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>添加 Logo</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成二维码图像</span></span><br><span class="line">qr = qrcode.QRCode(version=<span class="number">5</span>, error_correction=qrcode.constants.ERROR_CORRECT_H)</span><br><span class="line">qr.add_data(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line">qr.make(fit=<span class="literal">True</span>)</span><br><span class="line">img = qr.make_image(fill_color=<span class="string">&quot;black&quot;</span>, back_color=<span class="string">&quot;white&quot;</span>).convert(<span class="string">&quot;RGBA&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 Logo 并调整大小</span></span><br><span class="line">logo = Image.<span class="built_in">open</span>(<span class="string">&quot;logo.png&quot;</span>)</span><br><span class="line">logo = logo.resize((<span class="number">50</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Logo 粘贴到二维码中心</span></span><br><span class="line">pos = ((img.size[<span class="number">0</span>] - logo.size[<span class="number">0</span>]) // <span class="number">2</span>, (img.size[<span class="number">1</span>] - logo.size[<span class="number">1</span>]) // <span class="number">2</span>)</span><br><span class="line">img.paste(logo, pos, logo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存结果</span></span><br><span class="line">img.save(<span class="string">&quot;qrcode_with_logo.png&quot;</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>安装依赖</strong>：需安装 <code>qrcode</code> 和 <code>Pillow</code> 库，使用命令 <code>pip install qrcode[pil]</code>。</li>
<li><strong>容错率选择</strong>：<code>ERROR_CORRECT_H</code> 容错率最高（约30%），但二维码尺寸较大。</li>
<li><strong>颜色对比度</strong>：自定义颜色时，需确保前景色与背景色有足够对比度，以便扫描识别。</li>
<li><strong>二维码尺寸</strong>：<code>version</code> 参数控制尺寸，值越大可存储信息越多，但扫描速度可能变慢。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>创建二维码</strong>：通过 <code>QRCode</code> 类配置参数（尺寸、容错率、颜色等）。</li>
<li><strong>添加数据</strong>：使用 <code>add_data()</code> 方法添加要编码的信息。</li>
<li><strong>生成图像</strong>：调用 <code>make_image()</code> 生成二维码图片，支持自定义颜色。</li>
<li><strong>保存&#x2F;显示</strong>：用 <code>save()</code> 保存为文件，<code>show()</code> 直接显示二维码。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的random库</title>
    <url>/post/20250412215612.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>生成伪随机数</strong>：包括整数、浮点数、序列等。</li>
<li><strong>随机操作</strong>：设置种子、随机选择、打乱序列顺序等。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>基本随机函数</strong>：</p>
<ul>
<li><code>random.random()</code>：生成 <code>[0.0, 1.0)</code> 之间的随机浮点数。</li>
<li><code>random.seed(a)</code>：设置随机数种子（<code>a</code> 为整数或浮点数，默认以系统时间为种子）。</li>
</ul>
</li>
<li><p><strong>扩展随机函数</strong>：</p>
<ul>
<li><code>random.randint(a, b)</code>：生成 <code>[a, b]</code> 之间的随机整数。</li>
<li><code>random.uniform(a, b)</code>：生成 <code>[a, b]</code> 之间的随机浮点数。</li>
<li><code>random.randrange(start, stop[, step])</code>：生成指定范围内以指定步长递增的随机整数。</li>
<li><code>random.choice(seq)</code>：从序列 <code>seq</code>（如列表、元组、字符串）中随机选择一个元素。</li>
<li><code>random.shuffle(x)</code>：打乱序列 <code>x</code> 的顺序（直接修改原序列）。</li>
<li><code>random.sample(population, k)</code>：从总体 <code>population</code> 中随机选择 <code>k</code> 个不重复的元素。</li>
</ul>
</li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机浮点数和整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;随机浮点数:&quot;</span>, random.random())  <span class="comment"># 输出: 0.5488135039273248</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;随机整数:&quot;</span>, random.randint(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># 输出: 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表中随机选择元素和打乱列表顺序</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;随机选择元素:&quot;</span>, random.choice(my_list))  <span class="comment"># 输出: 3</span></span><br><span class="line">random.shuffle(my_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打乱后的列表:&quot;</span>, my_list)  <span class="comment"># 输出: [2, 5, 1, 4, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定范围内的随机浮点数和整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;指定范围的随机浮点数:&quot;</span>, random.uniform(<span class="number">1.0</span>, <span class="number">5.0</span>))  <span class="comment"># 输出: 3.141592653589793</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;指定范围和步长的随机整数:&quot;</span>, random.randrange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>))  <span class="comment"># 输出: 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置种子以确保生成相同的随机数序列</span></span><br><span class="line">random.seed(<span class="number">42</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;固定种子下的随机浮点数:&quot;</span>, random.random())  <span class="comment"># 输出: 0.6394267984578837</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>伪随机数</strong>：<code>random</code> 库生成的是伪随机数，由算法生成，具有确定性。在需要真正随机数的场合（如密码学），可能需要使用更专业的随机数生成器。</li>
<li><strong>种子设置</strong>：设置相同的种子会生成相同的随机数序列。这在调试和重现实验结果时很有用，但在需要每次运行都生成不同随机数的场合需避免。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>生成随机数</strong>：用 <code>random.random()</code> 生成浮点数，<code>random.randint()</code> 生成整数。</li>
<li><strong>随机选择</strong>：用 <code>random.choice()</code> 从序列中选择元素。</li>
<li><strong>打乱序列</strong>：用 <code>random.shuffle()</code> 打乱列表顺序。</li>
<li><strong>设置种子</strong>：用 <code>random.seed()</code> 设置种子以确保生成相同的随机数序列。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的sklearn库</title>
    <url>/post/20250412223030.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>机器学习算法</strong>：提供分类（如逻辑回归、决策树、SVM）、回归（如线性回归、随机森林）、聚类（如K-means、DBSCAN）、降维（如PCA）等多种算法。</li>
<li><strong>数据预处理</strong>：支持数据清洗、特征缩放（标准化、归一化）、特征选择、缺失值处理等。</li>
<li><strong>模型选择</strong>：提供交叉验证、网格搜索等工具，帮助选择合适的模型。</li>
<li><strong>模型评估</strong>：支持准确率、精确率、召回率、ROC曲线等多种评估指标。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>数据集加载</strong>：</p>
<ul>
<li><code>load_iris()</code>：加载鸢尾花数据集（分类任务）。</li>
<li><code>load_digits()</code>：加载手写数字数据集（分类任务）。</li>
<li><code>fetch_20newsgroups()</code>：加载新闻文本数据集（文本分类）。</li>
</ul>
</li>
<li><p><strong>数据预处理</strong>：</p>
<ul>
<li><code>train_test_split(X, y, test_size=0.2)</code>：划分训练集和测试集。</li>
<li><code>StandardScaler()</code>：标准化数据（均值为0，标准差为1）。</li>
<li><code>MinMaxScaler()</code>：归一化数据（缩放到0-1范围）。</li>
<li><code>SelectKBest()</code>：选择最佳特征。</li>
</ul>
</li>
<li><p><strong>机器学习算法</strong>：</p>
<ul>
<li><strong>分类</strong>：<ul>
<li><code>LogisticRegression()</code>：逻辑回归（适合二分类）。</li>
<li><code>KNeighborsClassifier()</code>：K近邻分类（基于距离）。</li>
<li><code>SVC()</code>：支持向量机分类（高维数据有效）。</li>
<li><code>DecisionTreeClassifier()</code>：决策树分类（可解释性强）。</li>
<li><code>RandomForestClassifier()</code>：随机森林分类（集成方法，抗过拟合）。</li>
</ul>
</li>
<li><strong>回归</strong>：<ul>
<li><code>LinearRegression()</code>：线性回归（预测连续值）。</li>
<li><code>DecisionTreeRegressor()</code>：决策树回归。</li>
<li><code>RandomForestRegressor()</code>：随机森林回归。</li>
</ul>
</li>
<li><strong>聚类</strong>：<ul>
<li><code>KMeans()</code>：K均值聚类（需指定簇数）。</li>
<li><code>DBSCAN()</code>：密度聚类（自动发现簇数）。</li>
</ul>
</li>
<li><strong>降维</strong>：<ul>
<li><code>PCA()</code>：主成分分析（保留主要信息）。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>模型选择</strong>：</p>
<ul>
<li><code>cross_val_score(model, X, y, cv=5)</code>：交叉验证（评估模型稳定性）。</li>
<li><code>GridSearchCV(model, param_grid, cv=5)</code>：网格搜索（超参数调优）。</li>
</ul>
</li>
<li><p><strong>模型评估</strong>：</p>
<ul>
<li><code>accuracy_score(y_true, y_pred)</code>：准确率（分类任务）。</li>
<li><code>mean_squared_error(y_true, y_pred)</code>：均方误差（回归任务）。</li>
<li><code>confusion_matrix(y_true, y_pred)</code>：混淆矩阵（分类任务）。</li>
<li><code>classification_report(y_true, y_pred)</code>：分类报告（包含精确率、召回率等）。</li>
</ul>
</li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><ul>
<li><p><strong>加载数据集并划分</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>数据预处理</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">X_test_scaled = scaler.transform(X_test)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>训练模型并预测</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">model = LogisticRegression()</span><br><span class="line">model.fit(X_train_scaled, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = model.predict(X_test_scaled)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>评估模型</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, classification_report</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Accuracy: <span class="subst">&#123;accuracy_score(y_test, y_pred)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test, y_pred))</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>数据预处理</strong>：缺失值、异常值需处理，分类变量需编码（如独热编码）。</li>
<li><strong>特征缩放</strong>：对基于距离的算法（如KNN、SVM）和梯度下降算法（如线性回归）尤为重要。</li>
<li><strong>过拟合&#x2F;欠拟合</strong>：通过调整模型复杂度（如树深度）、正则化参数、增加数据量等方法解决。</li>
<li><strong>模型选择</strong>：交叉验证避免过拟合，网格搜索找到最佳超参数。</li>
<li><strong>类别平衡</strong>：分类任务中若类别不平衡，需采用采样方法（如SMOTE）或调整类别权重。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>基础流程</strong>：加载数据 → 划分数据集 → 预处理 → 训练模型 → 预测 → 评估。</li>
<li><strong>常用算法</strong>：分类用逻辑回归、随机森林；回归用线性回归、决策树；聚类用K-means、DBSCAN。</li>
<li><strong>工具函数</strong>：<code>train_test_split</code> 划分数据，<code>StandardScaler</code> 标准化，<code>GridSearchCV</code> 调参。</li>
<li><strong>评估指标</strong>：分类用准确率、混淆矩阵；回归用均方误差；聚类用轮廓系数。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的tkinter库</title>
    <url>/post/20250412220314.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>GUI 开发</strong>：用于创建桌面应用程序的图形界面，支持按钮、标签、文本框等组件。</li>
<li><strong>跨平台</strong>：可在 Windows、Linux、macOS 等系统上运行。</li>
<li><strong>事件驱动</strong>：通过绑定事件（如点击、按键）实现用户交互。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>主窗口类 <code>Tk()</code></strong>：</p>
<ul>
<li><code>root = tk.Tk()</code>：创建主窗口对象。</li>
<li><code>root.title(&quot;标题&quot;)</code>：设置窗口标题。</li>
<li><code>root.geometry(&quot;宽x高&quot;)</code>：设置窗口大小和位置。</li>
<li><code>root.mainloop()</code>：启动主事件循环，保持窗口运行。</li>
</ul>
</li>
<li><p><strong>常用组件</strong>：</p>
<ul>
<li><strong>标签 <code>Label</code></strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">label = tk.Label(root, text=<span class="string">&quot;文本&quot;</span>, font=(<span class="string">&quot;字体&quot;</span>, 字号))</span><br><span class="line">label.pack()  <span class="comment"># 添加到窗口</span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>按钮 <code>Button</code></strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_click</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;按钮被点击&quot;</span>)</span><br><span class="line">button = tk.Button(root, text=<span class="string">&quot;点击&quot;</span>, command=on_click)</span><br><span class="line">button.pack()</span><br></pre></td></tr></table></figure></div></li>
<li><strong>输入框 <code>Entry</code></strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">entry = tk.Entry(root)</span><br><span class="line">entry.pack()</span><br></pre></td></tr></table></figure></div></li>
<li><strong>文本框 <code>Text</code></strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">text = tk.Text(root)</span><br><span class="line">text.pack()</span><br></pre></td></tr></table></figure></div></li>
<li><strong>画布 <code>Canvas</code></strong>：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">canvas = tk.Canvas(root, width=<span class="number">200</span>, height=<span class="number">200</span>)</span><br><span class="line">canvas.pack()</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p><strong>布局管理器</strong>：</p>
<ul>
<li><strong><code>pack()</code></strong>：自动排列组件（简单布局）。</li>
<li><strong><code>grid()</code></strong>：按网格行列布局（复杂布局）。</li>
<li><strong><code>place()</code></strong>：绝对或相对坐标定位（精细控制）。</li>
</ul>
</li>
<li><p><strong>事件绑定</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_key_press</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;按下按键:&quot;</span>, event.keysym)</span><br><span class="line">root.bind(<span class="string">&quot;&lt;Key&gt;&quot;</span>, on_key_press)  <span class="comment"># 绑定键盘事件</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建主窗口</span></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;我的应用&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;300x200&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标签和输入框</span></span><br><span class="line">label = tk.Label(root, text=<span class="string">&quot;用户名:&quot;</span>)</span><br><span class="line">label.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">entry = tk.Entry(root)</span><br><span class="line">entry.pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加按钮和事件处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_click</span>():</span><br><span class="line">    username = entry.get()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户名:&quot;</span>, username)</span><br><span class="line">button = tk.Button(root, text=<span class="string">&quot;提交&quot;</span>, command=on_click)</span><br><span class="line">button.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动主循环</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></div>

<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>主循环</strong>：必须调用 <code>mainloop()</code> 启动事件循环，否则窗口会立即关闭。</li>
<li><strong>组件布局</strong>：组件需通过 <code>pack()</code>、<code>grid()</code> 或 <code>place()</code> 添加到窗口。</li>
<li><strong>事件对象</strong>：事件处理函数需接收一个 <code>event</code> 对象，包含事件详细信息。</li>
<li><strong>跨平台差异</strong>：某些功能（如窗口透明度、图标）在不同系统上表现可能不同。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>创建窗口</strong>：用 <code>Tk()</code> 初始化主窗口，设置标题和大小。</li>
<li><strong>添加组件</strong>：使用 <code>Label</code>、<code>Button</code>、<code>Entry</code> 等类创建组件，并通过布局管理器添加到窗口。</li>
<li><strong>处理事件</strong>：通过 <code>bind()</code> 方法绑定事件（如点击、按键）和处理函数。</li>
<li><strong>启动循环</strong>：调用 <code>mainloop()</code> 保持窗口运行并处理用户交互。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的turtle库</title>
    <url>/post/20250412215911.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>绘图工具</strong>：通过控制“海龟”在屏幕上的移动绘制图形，适合编程初学者学习。</li>
<li><strong>可视化编程</strong>：直观展示代码效果，帮助理解程序执行流程。</li>
</ul>
<h3 id="2-常用类与方法"><a href="#2-常用类与方法" class="headerlink" title="2. 常用类与方法"></a><strong>2. 常用类与方法</strong></h3><ul>
<li><p><strong>Turtle类</strong>（控制海龟）：</p>
<ul>
<li><code>turtle.forward(d)</code> &#x2F; <code>turtle.fd(d)</code>：向前移动 <code>d</code> 像素。</li>
<li><code>turtle.backward(d)</code> &#x2F; <code>turtle.bk(d)</code>：向后移动 <code>d</code> 像素。</li>
<li><code>turtle.left(angle)</code> &#x2F; <code>turtle.lt(angle)</code>：逆时针旋转 <code>angle</code> 度。</li>
<li><code>turtle.right(angle)</code> &#x2F; <code>turtle.rt(angle)</code>：顺时针旋转 <code>angle</code> 度。</li>
<li><code>turtle.penup()</code> &#x2F; <code>turtle.pu()</code>：抬起画笔（移动不绘制）。</li>
<li><code>turtle.pendown()</code> &#x2F; <code>turtle.pd()</code>：落下画笔（移动时绘制）。</li>
<li><code>turtle.color(color)</code>：设置画笔颜色。</li>
<li><code>turtle.fillcolor(color)</code>：设置填充颜色。</li>
<li><code>turtle.begin_fill()</code>：开始填充图形。</li>
<li><code>turtle.end_fill()</code>：结束填充图形。</li>
<li><code>turtle.circle(r)</code>：绘制半径为 <code>r</code> 的圆。</li>
<li><code>turtle.hideturtle()</code>：隐藏海龟图标。</li>
</ul>
</li>
<li><p><strong>Screen类</strong>（控制画布）：</p>
<ul>
<li><code>turtle.Screen()</code>：创建画布窗口。</li>
<li><code>turtle.title(title)</code>：设置窗口标题。</li>
<li><code>turtle.setup(width, height, startx, starty)</code>：设置窗口大小和位置。</li>
<li><code>turtle.done()</code>：保持窗口不关闭。</li>
</ul>
</li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建画布和画笔</span></span><br><span class="line">screen = turtle.Screen()</span><br><span class="line">screen.title(<span class="string">&quot;我的绘图&quot;</span>)</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制正方形</span></span><br><span class="line">t.color(<span class="string">&quot;red&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    t.forward(<span class="number">100</span>)</span><br><span class="line">    t.right(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制圆形</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, -<span class="number">150</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.color(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">t.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制五角星</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">100</span>, -<span class="number">100</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.color(<span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    t.forward(<span class="number">100</span>)</span><br><span class="line">    t.right(<span class="number">144</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保持窗口不关闭</span></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure></div>

<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>坐标系</strong>：默认以屏幕中心为原点 <code>(0,0)</code>，向右为 <code>x</code> 轴正方向，向上为 <code>y</code> 轴正方向。</li>
<li><strong>画笔状态</strong>：移动前需用 <code>pendown()</code> 落笔，否则不会绘制图形。</li>
<li><strong>窗口关闭</strong>：代码结尾需调用 <code>turtle.done()</code> 保持窗口不关闭。</li>
<li><strong>颜色设置</strong>：支持颜色名称（如 <code>&quot;red&quot;</code>）或 RGB 元组（如 <code>(255, 0, 0)</code>）。</li>
</ul>
<h3 id="5-七巧板"><a href="#5-七巧板" class="headerlink" title="5.七巧板"></a>5.七巧板</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle  </span><br><span class="line"><span class="keyword">import</span> math  </span><br><span class="line">t=turtle.Turtle()  </span><br><span class="line">t.speed(<span class="number">10</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 橙色正方形  </span></span><br><span class="line">t.begin_fill()  </span><br><span class="line">t.left(<span class="number">45</span>)  </span><br><span class="line">t.forward(<span class="number">100</span>)  </span><br><span class="line">t.right(<span class="number">90</span>)  </span><br><span class="line">t.forward(<span class="number">100</span>)  </span><br><span class="line">t.right(<span class="number">90</span>)  </span><br><span class="line">t.forward(<span class="number">100</span>)  </span><br><span class="line">t.right(<span class="number">90</span>)  </span><br><span class="line">t.forward(<span class="number">100</span>)  </span><br><span class="line">t.fillcolor(<span class="string">&quot;orange&quot;</span>)  </span><br><span class="line">t.end_fill()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 三角绿  </span></span><br><span class="line">t.begin_fill()  </span><br><span class="line">t.left(<span class="number">90</span>)  </span><br><span class="line">t.forward(<span class="number">100</span>)  </span><br><span class="line">t.left(<span class="number">135</span>)  </span><br><span class="line">t.forward(math.sqrt(<span class="number">2</span>)*<span class="number">100</span>)  </span><br><span class="line">t.fillcolor(<span class="string">&quot;green&quot;</span>)  </span><br><span class="line">t.end_fill()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 平行四边形 浅蓝  </span></span><br><span class="line">t.begin_fill()  </span><br><span class="line">t.right(<span class="number">135</span>)  </span><br><span class="line">t.forward(<span class="number">100</span>)  </span><br><span class="line">t.right(<span class="number">45</span>)  </span><br><span class="line">t.forward(math.sqrt(<span class="number">2</span>)*<span class="number">100</span>)  </span><br><span class="line">t.right(<span class="number">135</span>)  </span><br><span class="line">t.forward(<span class="number">100</span>)  </span><br><span class="line">t.fillcolor(<span class="string">&quot;lightblue&quot;</span>)  </span><br><span class="line">t.end_fill()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 指针左下角  </span></span><br><span class="line">t.backward(<span class="number">100</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 三角 黄  </span></span><br><span class="line">t.begin_fill()  </span><br><span class="line">t.left(<span class="number">45</span>)  </span><br><span class="line">t.forward(math.sqrt(<span class="number">2</span>)*<span class="number">200</span>)  </span><br><span class="line">t.right(<span class="number">135</span>)  </span><br><span class="line">t.forward(<span class="number">200</span>)  </span><br><span class="line">t.fillcolor(<span class="string">&quot;yellow&quot;</span>)  </span><br><span class="line">t.end_fill()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 指针左上角  </span></span><br><span class="line">t.backward(<span class="number">200</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 三角 红  </span></span><br><span class="line">t.begin_fill()  </span><br><span class="line">t.left(<span class="number">45</span>)  </span><br><span class="line">t.forward(math.sqrt(<span class="number">2</span>)*<span class="number">200</span>)  </span><br><span class="line">t.right(<span class="number">135</span>)  </span><br><span class="line">t.forward(<span class="number">200</span>)  </span><br><span class="line">t.fillcolor(<span class="string">&quot;red&quot;</span>)  </span><br><span class="line">t.end_fill()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 指针右上角  </span></span><br><span class="line">t.backward(<span class="number">200</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 三角 紫色  </span></span><br><span class="line">t.begin_fill()  </span><br><span class="line">t.left(<span class="number">45</span>)  </span><br><span class="line">t.forward(math.sqrt(<span class="number">2</span>)*<span class="number">100</span>)  </span><br><span class="line">t.right(<span class="number">135</span>)  </span><br><span class="line">t.forward(<span class="number">100</span>)  </span><br><span class="line">t.fillcolor(<span class="string">&quot;purple&quot;</span>)  </span><br><span class="line">t.end_fill()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 指针右中  </span></span><br><span class="line">t.backward(<span class="number">100</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 三角 深蓝色  </span></span><br><span class="line">t.begin_fill()  </span><br><span class="line">t.left(<span class="number">135</span>)  </span><br><span class="line">t.forward(math.sqrt(<span class="number">2</span>)*<span class="number">100</span>)  </span><br><span class="line">t.right(<span class="number">90</span>)  </span><br><span class="line">t.forward(math.sqrt(<span class="number">2</span>)*<span class="number">100</span>)  </span><br><span class="line">t.fillcolor(<span class="string">&quot;blue&quot;</span>)  </span><br><span class="line">t.end_fill()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 隐藏画笔  </span></span><br><span class="line">t.hideturtle()  </span><br><span class="line">  </span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure></div>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>移动与旋转</strong>：用 <code>forward()</code>、<code>backward()</code>、<code>left()</code>、<code>right()</code> 控制海龟移动。</li>
<li><strong>绘制图形</strong>：用 <code>circle()</code> 绘制圆，结合循环绘制多边形。</li>
<li><strong>颜色与填充</strong>：用 <code>color()</code> 设置画笔颜色，<code>fillcolor()</code> 设置填充颜色，配合 <code>begin_fill()</code> 和 <code>end_fill()</code> 填充图形。</li>
<li><strong>画布设置</strong>：用 <code>Screen()</code> 创建画布，<code>title()</code> 设置标题，<code>setup()</code> 设置窗口大小和位置。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的wordcloud库</title>
    <url>/post/20250412223204.html</url>
    <content><![CDATA[<h3 id="1-核心功能"><a href="#1-核心功能" class="headerlink" title="1. 核心功能"></a><strong>1. 核心功能</strong></h3><ul>
<li><strong>生成词云</strong>：将文本中的高频词以视觉化方式呈现，形成类似云状的彩色图片。</li>
<li><strong>自定义形状</strong>：通过掩码图片生成特定形状的词云（如心形、圆形）。</li>
<li><strong>颜色方案</strong>：支持多种颜色映射，或自定义颜色函数控制词云颜色。</li>
<li><strong>停用词处理</strong>：内置停用词列表，可过滤无意义词汇（如“的”、“和”）。</li>
</ul>
<h3 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2. 常用方法"></a><strong>2. 常用方法</strong></h3><ul>
<li><strong>创建词云对象</strong>：<ul>
<li><code>WordCloud(width=800, height=400, background_color=&#39;white&#39;)</code>：配置词云尺寸、背景色等参数。</li>
</ul>
</li>
<li><strong>生成词云</strong>：<ul>
<li><code>generate(text)</code>：根据文本生成词云。</li>
<li><code>generate_from_frequencies(frequencies)</code>：根据词频生成词云（适合大规模文本）。</li>
</ul>
</li>
<li><strong>输出词云</strong>：<ul>
<li><code>to_file(&quot;wordcloud.png&quot;)</code>：将词云保存为图片文件。</li>
</ul>
</li>
<li><strong>自定义形状</strong>：<ul>
<li><code>mask=np.array(Image.open(&quot;mask.png&quot;))</code>：传入图片数组作为掩码。</li>
</ul>
</li>
<li><strong>颜色方案</strong>：<ul>
<li><code>colormap=&#39;viridis&#39;</code>：指定 matplotlib 颜色映射。</li>
<li><code>color_func=lambda *args, **kwargs: &quot;red&quot;</code>：自定义颜色函数（示例为红色）。</li>
</ul>
</li>
<li><strong>停用词处理</strong>：<ul>
<li><code>stopwords=&#123;&quot;python&quot;, &quot;is&quot;&#125;</code>：设置需要过滤的停用词。</li>
</ul>
</li>
</ul>
<h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a><strong>3. 使用示例</strong></h3><ul>
<li><p><strong>基础词云生成</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;Python is versatile, powerful, and easy to learn.&quot;</span></span><br><span class="line">wordcloud = WordCloud(width=<span class="number">800</span>, height=<span class="number">400</span>).generate(text)</span><br><span class="line">wordcloud.to_file(<span class="string">&quot;wordcloud.png&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>自定义形状和颜色</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, ImageColorGenerator</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取掩码图片</span></span><br><span class="line">mask = np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;heart.png&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建词云对象</span></span><br><span class="line">wordcloud = WordCloud(</span><br><span class="line">    mask=mask,</span><br><span class="line">    background_color=<span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    contour_width=<span class="number">1</span>,</span><br><span class="line">    contour_color=<span class="string">&#x27;red&#x27;</span></span><br><span class="line">).generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用掩码图片的颜色</span></span><br><span class="line">image_colors = ImageColorGenerator(mask)</span><br><span class="line">wordcloud.recolor(color_func=image_colors)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存词云</span></span><br><span class="line">wordcloud.to_file(<span class="string">&quot;shaped_wordcloud.png&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>中文词云生成</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;我爱北京天安门，天安门上太阳升。&quot;</span></span><br><span class="line">wordlist = jieba.cut(text, cut_all=<span class="literal">True</span>)</span><br><span class="line">text = <span class="string">&quot; &quot;</span>.join(wordlist)</span><br><span class="line"></span><br><span class="line">wordcloud = WordCloud(</span><br><span class="line">    font_path=<span class="string">&quot;msyh.ttc&quot;</span>,  <span class="comment"># 指定中文字体路径</span></span><br><span class="line">    width=<span class="number">800</span>,</span><br><span class="line">    height=<span class="number">400</span>,</span><br><span class="line">    background_color=<span class="string">&#x27;white&#x27;</span></span><br><span class="line">).generate(text)</span><br><span class="line"></span><br><span class="line">wordcloud.to_file(<span class="string">&quot;chinese_wordcloud.png&quot;</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a><strong>4. 注意事项</strong></h3><ul>
<li><strong>中文支持</strong>：需配合 <code>jieba</code> 库分词，并指定中文字体路径（如 <code>font_path=&quot;msyh.ttc&quot;</code>）。</li>
<li><strong>分词处理</strong>：中文文本需先分词，再生成词云（避免长句被当作单个词）。</li>
<li><strong>图像质量</strong>：调整 <code>max_words</code>（最大词数）、<code>min_font_size</code>（最小字号）等参数，避免词云过于拥挤或稀疏。</li>
<li><strong>性能优化</strong>：处理大规模文本时，使用 <code>generate_from_frequencies</code> 基于词频生成词云，提升性能。</li>
<li><strong>依赖库安装</strong>：确保已安装 <code>wordcloud</code> 和 <code>matplotlib</code> 库（用于显示和保存图片）。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>基础流程</strong>：导入库 → 创建词云对象 → 加载文本 → 生成词云 → 保存文件。</li>
<li><strong>常用场景</strong>：文本分析、报告总结、社交媒体热词展示。</li>
<li><strong>高级功能</strong>：通过掩码和颜色函数定制个性化词云，结合分词库支持中文文本。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV中的腐蚀（Erosion）和膨胀（Dilation）</title>
    <url>/post/20250414124549.html</url>
    <content><![CDATA[<p><strong>OpenCV中的腐蚀（Erosion）和膨胀（Dilation）操作，这是形态学处理的两个基础操作，常用于图像去噪、分割和特征提取。</strong></p>
<h3 id="一、核心概念"><a href="#一、核心概念" class="headerlink" title="一、核心概念"></a>一、核心概念</h3><ol>
<li><p><strong>形态学操作</strong>：<br>基于**结构元素（Kernel）**对二值图像（或灰度图像）进行几何运算，改变物体形状但不改变其拓扑结构。</p>
</li>
<li><p><strong>结构元素</strong>：</p>
<ul>
<li>是一个小型矩阵（如3x3、5x5）</li>
<li>定义操作的作用范围</li>
<li>常见形状：矩形、椭圆、十字形等</li>
</ul>
</li>
</ol>
<h3 id="二、腐蚀（Erosion）"><a href="#二、腐蚀（Erosion）" class="headerlink" title="二、腐蚀（Erosion）"></a>二、腐蚀（Erosion）</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h4><ul>
<li>用结构元素在图像上滑动</li>
<li><strong>仅当结构元素完全覆盖前景像素时，中心像素保留为前景</strong></li>
<li>效果：前景区域会”缩小”，可消除小物体、平滑边界</li>
</ul>
<h4 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h4><ul>
<li>消除小于结构元素的噪声点</li>
<li>分割粘连物体</li>
<li>边界向内收缩</li>
</ul>
<h4 id="3-OpenCV实现"><a href="#3-OpenCV实现" class="headerlink" title="3. OpenCV实现"></a>3. OpenCV实现</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义结构元素（这里用3x3矩形）</span></span><br><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像并二值化</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;input.jpg&#x27;</span>, <span class="number">0</span>)  <span class="comment"># 直接读取为灰度图</span></span><br><span class="line">_, binary = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行腐蚀</span></span><br><span class="line">eroded = cv2.erode(binary, kernel, iterations=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="三、膨胀（Dilation）"><a href="#三、膨胀（Dilation）" class="headerlink" title="三、膨胀（Dilation）"></a>三、膨胀（Dilation）</h3><h4 id="1-原理-1"><a href="#1-原理-1" class="headerlink" title="1. 原理"></a>1. 原理</h4><ul>
<li>用结构元素在图像上滑动</li>
<li><strong>只要结构元素与前景像素有交集，中心像素就设为前景</strong></li>
<li>效果：前景区域会”扩大”，可填充小孔洞、连接断裂区域</li>
</ul>
<h4 id="2-特点-1"><a href="#2-特点-1" class="headerlink" title="2. 特点"></a>2. 特点</h4><ul>
<li>填补小于结构元素的孔洞</li>
<li>连接相邻物体</li>
<li>边界向外扩展</li>
</ul>
<h4 id="3-OpenCV实现-1"><a href="#3-OpenCV实现-1" class="headerlink" title="3. OpenCV实现"></a>3. OpenCV实现</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用相同的结构元素</span></span><br><span class="line">dilated = cv2.dilate(binary, kernel, iterations=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="四、组合应用"><a href="#四、组合应用" class="headerlink" title="四、组合应用"></a>四、组合应用</h3><ol>
<li><p><strong>开运算（Opening）</strong>：先腐蚀后膨胀</p>
<ul>
<li>消除小物体，平滑边界，保持物体大小基本不变</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">opened = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>闭运算（Closing）</strong>：先膨胀后腐蚀</p>
<ul>
<li>填充小孔洞，连接邻近物体，保持物体大小基本不变</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">closed = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="五、结构元素选择技巧"><a href="#五、结构元素选择技巧" class="headerlink" title="五、结构元素选择技巧"></a>五、结构元素选择技巧</h3><table>
<thead>
<tr>
<th>结构元素类型</th>
<th>特点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>矩形（RECT）</td>
<td>各向同性，计算快</td>
<td>通用场景</td>
</tr>
<tr>
<td>椭圆（ELLIPSE）</td>
<td>圆形近似，平滑边界</td>
<td>含有弧形边界的物体</td>
</tr>
<tr>
<td>十字形（CROSS）</td>
<td>强调水平和垂直方向</td>
<td>细化或骨架提取</td>
</tr>
<tr>
<td>自定义形状</td>
<td>精确控制特征</td>
<td>特殊形状物体处理</td>
</tr>
</tbody></table>
<h3 id="六、参数调节建议"><a href="#六、参数调节建议" class="headerlink" title="六、参数调节建议"></a>六、参数调节建议</h3><ol>
<li><p><strong>Kernel尺寸</strong>：</p>
<ul>
<li>奇数尺寸（如3x3, 5x5）保证有明确的中心点</li>
<li>越大尺寸：操作效果越明显，但可能丢失细节</li>
</ul>
</li>
<li><p><strong>Iterations次数</strong>：</p>
<ul>
<li>控制操作的重复次数</li>
<li>次数越多效果越明显，但计算量增大</li>
</ul>
</li>
</ol>
<h3 id="七、典型应用场景"><a href="#七、典型应用场景" class="headerlink" title="七、典型应用场景"></a>七、典型应用场景</h3><ol>
<li><p><strong>去噪</strong>：</p>
<ul>
<li>用开运算去除椒盐噪声</li>
<li>用闭运算填充脉冲噪声</li>
</ul>
</li>
<li><p><strong>文字识别</strong>：</p>
<ul>
<li>膨胀连接断裂笔画</li>
<li>腐蚀分离粘连字符</li>
</ul>
</li>
<li><p><strong>医学图像</strong>：</p>
<ul>
<li>提取细胞边界</li>
<li>分割肿瘤区域</li>
</ul>
</li>
<li><p><strong>工业检测</strong>：</p>
<ul>
<li>检测表面缺陷</li>
<li>测量物体尺寸</li>
</ul>
</li>
</ol>
<h3 id="八、可视化理解"><a href="#八、可视化理解" class="headerlink" title="八、可视化理解"></a>八、可视化理解</h3><p>想象用毛刷在图像上”刷”前景像素：</p>
<ul>
<li><strong>腐蚀</strong>：用小号毛刷，只有完全接触前景时才保留</li>
<li><strong>膨胀</strong>：用蓬松毛刷，只要碰到前景就扩展<br><strong>原图–腐蚀–膨胀  对比</strong><br>(1)代码：</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建测试图像（二值图像）  </span></span><br><span class="line">img = np.zeros((<span class="number">200</span>, <span class="number">250</span>), dtype=np.uint8)  </span><br><span class="line">cv2.rectangle(img, (<span class="number">50</span>,<span class="number">50</span>), (<span class="number">150</span>,<span class="number">150</span>), <span class="number">255</span>, -<span class="number">1</span>)  <span class="comment"># 画矩形  </span></span><br><span class="line">cv2.line(img, (<span class="number">20</span>,<span class="number">180</span>), (<span class="number">180</span>,<span class="number">20</span>), <span class="number">255</span>, <span class="number">2</span>)  <span class="comment"># 画细线  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定义结构元素  </span></span><br><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>), np.uint8)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 执行腐蚀和膨胀  </span></span><br><span class="line">eroded = cv2.erode(img, kernel)  </span><br><span class="line">dilated = cv2.dilate(img, kernel)  </span><br><span class="line">  </span><br><span class="line">cv2.imshow(<span class="string">&quot;yuantu&quot;</span>,img)  </span><br><span class="line">cv2.imshow(<span class="string">&quot;fushi&quot;</span>,eroded)  </span><br><span class="line">cv2.imshow(<span class="string">&quot;pengzhang&quot;</span>,dilated)  </span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>
<p>(2)结果展示：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250414/1.png"
                      alt="a"
                ></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV汉字输出</title>
    <url>/post/20250414131146.html</url>
    <content><![CDATA[<p>在Python中，<code>matplotlib</code>和<code>opencv-python</code>（<code>cv2</code>）是两套独立的库，它们的字体配置互不影响。你遇到的<code>cv2.imshow</code>显示中文失败的问题，需要从以下两个方向排查和解决：</p>
<hr>
<h3 id="1-OpenCV本身不支持直接渲染中文"><a href="#1-OpenCV本身不支持直接渲染中文" class="headerlink" title="1. OpenCV本身不支持直接渲染中文"></a><strong>1. OpenCV本身不支持直接渲染中文</strong></h3><p>OpenCV的<code>cv2.putText()</code>函数默认<strong>不支持Unicode字符</strong>（包括中文），直接传递中文字符串会导致乱码或显示异常。而<code>cv2.imshow()</code>显示图像时，如果图像本身包含未正确渲染的文本，自然无法正确显示中文。</p>
<hr>
<h3 id="2-解决方案：使用PIL渲染中文"><a href="#2-解决方案：使用PIL渲染中文" class="headerlink" title="2. 解决方案：使用PIL渲染中文"></a><strong>2. 解决方案：使用PIL渲染中文</strong></h3><h4 id="使用PIL（Python-Imaging-Library）绘制中文"><a href="#使用PIL（Python-Imaging-Library）绘制中文" class="headerlink" title="使用PIL（Python Imaging Library）绘制中文**"></a>使用PIL（Python Imaging Library）绘制中文**</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont  </span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 读取图像  </span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;image.png&quot;</span>) <span class="comment">#我的这个是一张空白图片  </span></span><br><span class="line">img_pil = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建绘图对象  </span></span><br><span class="line">draw = ImageDraw.Draw(img_pil)  </span><br><span class="line">font = ImageFont.truetype(<span class="string">&quot;simhei.ttf&quot;</span>, <span class="number">40</span>)  <span class="comment"># 指定中文字体文件  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 绘制中文  </span></span><br><span class="line">draw.text((<span class="number">50</span>, <span class="number">50</span>), <span class="string">&quot;你好，世界！&quot;</span>, font=font, fill=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 转换回OpenCV格式  </span></span><br><span class="line">img = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 显示图像  </span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Result&quot;</span>, img)  </span><br><span class="line">cv2.waitKey(<span class="number">0</span>)  </span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250414/2.png"
                      alt="a"
                ></p>
<h3 id="关键注意事项"><a href="#关键注意事项" class="headerlink" title="关键注意事项"></a><strong>关键注意事项</strong></h3><ol>
<li><p><strong>字体文件路径</strong>：</p>
<ul>
<li>确保系统中存在中文字体文件（如<code>simhei.ttf</code>），Windows系统通常位于<code>C:\Windows\Fonts</code>，Linux&#x2F;Mac需手动安装。</li>
<li>免费下载字体的网站，比如 [字体家] : <a class="link"   href="http://www.zitijia.com/" >http://www.zitijia.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
</li>
<li><p><strong>OpenCV版本</strong>：</p>
<ul>
<li><code>cv2.freetype</code>需要OpenCV编译时启用<code>opencv_contrib</code>模块。如果使用预编译的OpenCV包，可能不支持此功能。</li>
</ul>
</li>
<li><p><strong>编码问题</strong>：</p>
<ul>
<li>确保Python文件本身保存为UTF-8编码（避免中文字符串被错误解析）。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><code>plt.rcParams[&#39;font.sans-serif&#39;]</code>仅影响<code>matplotlib</code>的绘图，与<code>cv2</code>无关。</li>
<li>要在OpenCV中显示中文，需通过PIL或<code>cv2.freetype</code>手动渲染文本到图像上。</li>
<li>始终确保字体文件路径正确，且编码环境支持中文。</li>
</ul>
]]></content>
      <categories>
        <category>解决错误</category>
      </categories>
      <tags>
        <tag>解决错误</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv阈值处理</title>
    <url>/post/20250414133414.html</url>
    <content><![CDATA[<p>好的！我来为您详细讲解OpenCV中的阈值处理（Thresholding）技术，这是图像分割的基础操作之一，通过设定阈值将像素分为前景和背景两类。</p>
<h3 id="一、核心概念"><a href="#一、核心概念" class="headerlink" title="一、核心概念"></a>一、核心概念</h3><ol>
<li><p><strong>阈值处理目的</strong>：</p>
<ul>
<li>将灰度图像转换为二值图像（黑白图像）</li>
<li>分割感兴趣区域（ROI）与背景</li>
<li>减少后续处理的计算量</li>
</ul>
</li>
<li><p><strong>基本公式</strong>：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">二值图像像素值 = &#123; </span><br><span class="line">    255（前景）, 当原像素值 &gt; 阈值时</span><br><span class="line">    0（背景）,  其他情况</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="二、常见阈值方法"><a href="#二、常见阈值方法" class="headerlink" title="二、常见阈值方法"></a>二、常见阈值方法</h3><table>
<thead>
<tr>
<th>方法类型</th>
<th>特点</th>
<th>适用场景</th>
<th>OpenCV函数参数</th>
</tr>
</thead>
<tbody><tr>
<td><strong>全局阈值</strong></td>
<td>使用固定阈值</td>
<td>光照均匀的简单图像</td>
<td><code>cv2.THRESH_BINARY</code></td>
</tr>
<tr>
<td><strong>反相二值化</strong></td>
<td>反转前景&#x2F;背景</td>
<td>需要突出暗色区域的场景</td>
<td><code>cv2.THRESH_BINARY_INV</code></td>
</tr>
<tr>
<td><strong>截断阈值</strong></td>
<td>保留超过阈值的部分</td>
<td>保留图像高亮特征</td>
<td><code>cv2.THRESH_TRUNC</code></td>
</tr>
<tr>
<td><strong>零化阈值</strong></td>
<td>将低于阈值的部分置零</td>
<td>去除低亮度噪声</td>
<td><code>cv2.THRESH_TOZERO</code></td>
</tr>
<tr>
<td><strong>反相零化阈值</strong></td>
<td>将高于阈值的部分置零</td>
<td>去除高亮度噪声</td>
<td><code>cv2.THRESH_TOZERO_INV</code></td>
</tr>
<tr>
<td><strong>自适应阈值</strong></td>
<td>根据局部区域动态计算阈值</td>
<td>光照不均匀的图像（如文档扫描）</td>
<td><code>cv2.adaptiveThreshold</code></td>
</tr>
</tbody></table>
<h3 id="三、全局阈值示例"><a href="#三、全局阈值示例" class="headerlink" title="三、全局阈值示例"></a>三、全局阈值示例</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line">img=cv2.imread(<span class="string">&quot;yz.png&quot;</span>)  </span><br><span class="line">cv2.imshow(<span class="string">&quot;qian&quot;</span>,img)  </span><br><span class="line"><span class="comment">#阈值处理  </span></span><br><span class="line">  </span><br><span class="line">ret, binary = cv2.threshold(img, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY)  </span><br><span class="line">cv2.imshow(<span class="string">&quot;hou&quot;</span>, binary)  </span><br><span class="line">  </span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ret: 实际使用的阈值（当使用Otsu方法时会返回优化值）</span></span><br><span class="line"><span class="comment"># binary: 二值化后的图像</span></span><br></pre></td></tr></table></figure></div>
<p><strong>原图 与 阈值处理后 对比图</strong><br>原来”小土拨鼠，真的好吗？”是字体是黑色（0），所以在黑色的背景下都看不到，通过<code>ret, binary = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY)</code> 将他们都变成白色（255）的，就可以看到了。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250414/3.png"
                      alt="a"
                ></p>
<h3 id="四、自适应阈值详解"><a href="#四、自适应阈值详解" class="headerlink" title="四、自适应阈值详解"></a>四、自适应阈值详解</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用11x11邻域，常数C=2</span></span><br><span class="line">adaptive_thresh = cv2.adaptiveThreshold(</span><br><span class="line">    gray,</span><br><span class="line">    <span class="number">255</span>,</span><br><span class="line">    cv2.ADAPTIVE_THRESH_GAUSSIAN_C,</span><br><span class="line">    cv2.THRESH_BINARY,</span><br><span class="line">    <span class="number">11</span>,</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>优点</strong>：处理光照不均的图像效果好</li>
<li><strong>参数</strong>：<ul>
<li>块大小（必须为奇数）</li>
<li>常数C（从邻域均值中减去的值）</li>
</ul>
</li>
</ul>
<h3 id="五、Otsu方法（自动阈值）"><a href="#五、Otsu方法（自动阈值）" class="headerlink" title="五、Otsu方法（自动阈值）"></a>五、Otsu方法（自动阈值）</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在全局阈值基础上添加Otsu标志</span></span><br><span class="line">ret, otsu_thresh = cv2.threshold(gray, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY+cv2.THRESH_OTSU)</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>原理</strong>：自动寻找使类间方差最大的阈值</li>
<li><strong>适用</strong>：前景&#x2F;背景面积差异较大的图像</li>
</ul>
<h3 id="六、关键参数选择技巧"><a href="#六、关键参数选择技巧" class="headerlink" title="六、关键参数选择技巧"></a>六、关键参数选择技巧</h3><ol>
<li><p><strong>阈值选择</strong>：</p>
<ul>
<li>简单场景：手动尝试（0-255之间）</li>
<li>复杂场景：使用Otsu自动计算</li>
<li>文档处理：自适应阈值（块大小约15-25）</li>
</ul>
</li>
<li><p><strong>预处理</strong>：</p>
<ul>
<li>先进行高斯模糊（<code>cv2.GaussianBlur</code>）可提升阈值效果</li>
<li>对低质量图像使用直方图均衡化（<code>cv2.equalizeHist</code>）</li>
</ul>
</li>
</ol>
<h3 id="七、典型应用场景"><a href="#七、典型应用场景" class="headerlink" title="七、典型应用场景"></a>七、典型应用场景</h3><ol>
<li><p><strong>文档扫描</strong>：</p>
<ul>
<li>自适应阈值处理文字区域</li>
<li>形态学操作去除噪声</li>
</ul>
</li>
<li><p><strong>车牌识别</strong>：</p>
<ul>
<li>边缘检测后使用阈值分割字符</li>
<li>结合颜色空间转换（如HSV）提取特定颜色区域</li>
</ul>
</li>
<li><p><strong>工业检测</strong>：</p>
<ul>
<li>阈值分割缺陷区域</li>
<li>测量物体尺寸和位置</li>
</ul>
</li>
<li><p><strong>医学影像</strong>：</p>
<ul>
<li>分割细胞或组织区域</li>
<li>增强特定解剖结构</li>
</ul>
</li>
</ol>
<h3 id="八、可视化理解"><a href="#八、可视化理解" class="headerlink" title="八、可视化理解"></a>八、可视化理解</h3><p>想象将图像看作地形高度图：</p>
<ul>
<li><strong>阈值</strong>就像海平面高度</li>
<li><strong>前景像素</strong>是露出水面的陆地</li>
<li><strong>背景像素</strong>是被淹没的海底</li>
</ul>
<p>通过调整阈值高度，可以控制分割出的前景区域大小。实际应用中建议先用直方图分析工具查看图像灰度分布，再选择适当的阈值方法。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv人脸识别</title>
    <url>/post/20250415122700.html</url>
    <content><![CDATA[<h3 id="问题1：参数详解与调节指南-scaleFactor-minNeighbors-minSize"><a href="#问题1：参数详解与调节指南-scaleFactor-minNeighbors-minSize" class="headerlink" title="问题1：参数详解与调节指南 (scaleFactor, minNeighbors, minSize)"></a>问题1：参数详解与调节指南 (<code>scaleFactor</code>, <code>minNeighbors</code>, <code>minSize</code>)</h3><h4 id="1-scaleFactor（缩放因子）"><a href="#1-scaleFactor（缩放因子）" class="headerlink" title="1. scaleFactor（缩放因子）"></a>1. <strong><code>scaleFactor</code>（缩放因子）</strong></h4><ul>
<li><strong>作用</strong>: 控制图像金字塔的缩放步长，用于检测不同大小的人脸。  </li>
<li><strong>取值</strong>: <code>1.01 ~ 1.5</code>（常用 <code>1.1</code>）。  </li>
<li><strong>影响</strong>:  <ul>
<li><strong>值越小</strong>（如 <code>1.01</code>）:    <ul>
<li>✅ 检测到更多人脸（尤其是小尺寸人脸）。</li>
</ul>
</li>
</ul>
</li>
<li>❌ 计算量大幅增加，检测速度变慢，可能引入更多误检。  <ul>
<li><strong>值越大</strong>（如 <code>1.5</code>）:    <ul>
<li>✅ 检测速度更快。</li>
</ul>
</li>
</ul>
</li>
<li>❌ 可能漏检小尺寸人脸。</li>
</ul>
<h4 id="2-minNeighbors（最小邻居数）"><a href="#2-minNeighbors（最小邻居数）" class="headerlink" title="2. minNeighbors（最小邻居数）"></a>2. <strong><code>minNeighbors</code>（最小邻居数）</strong></h4><ul>
<li><strong>作用</strong>: 控制人脸框的合并阈值，过滤孤立误检。  </li>
<li><strong>取值</strong>: <code>3 ~ 6</code>（常用 <code>5</code>）。  </li>
<li><strong>影响</strong>:  <ul>
<li><strong>值越大</strong>（如 <code>10</code>）:    <ul>
<li>✅ 误检率降低（更严格）。</li>
</ul>
</li>
</ul>
</li>
<li>❌ 可能漏检真实人脸（尤其是部分遮挡的人脸）。  <ul>
<li><strong>值越小</strong>（如 <code>1</code>）:    <ul>
<li>✅ 检测到更多人脸。</li>
</ul>
</li>
</ul>
</li>
<li>❌ 误检率显著增加。</li>
</ul>
<h4 id="3-minSize（最小检测尺寸）"><a href="#3-minSize（最小检测尺寸）" class="headerlink" title="3. minSize（最小检测尺寸）"></a>3. <strong><code>minSize</code>（最小检测尺寸）</strong></h4><ul>
<li><strong>作用</strong>: 设置人脸的最小尺寸（宽高），避免检测过小的噪声。  </li>
<li><strong>取值</strong>: <code>(30,30)</code> ~ <code>(100,100)</code>（根据图像分辨率调整）。  </li>
<li><strong>影响</strong>:  <ul>
<li><strong>值越大</strong>（如 <code>(100,100)</code>）:    <ul>
<li>✅ 减少小尺寸误检（如远处人脸）。</li>
</ul>
</li>
</ul>
</li>
<li>❌ 可能漏检小尺寸人脸。  <ul>
<li><strong>值越小</strong>（如 <code>(20,20)</code>）:    <ul>
<li>✅ 检测到更小人脸。</li>
</ul>
</li>
</ul>
</li>
<li>❌ 可能引入噪声误检。</li>
</ul>
<hr>
<h4 id="完整项目代码展示"><a href="#完整项目代码展示" class="headerlink" title="完整项目代码展示"></a><strong>完整项目代码展示</strong></h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img=cv2.imread(<span class="string">&quot;img.png&quot;</span>)</span><br><span class="line"><span class="comment">#加载人脸检测器</span></span><br><span class="line">face_cascade=cv2.CascadeClassifier(<span class="string">&quot;haarcascade_frontalface_default.xml&quot;</span>)</span><br><span class="line"></span><br><span class="line">faces=face_cascade.detectMultiScale(img,scaleFactor=<span class="number">1.03</span>,minNeighbors=<span class="number">9</span>,minSize=(<span class="number">60</span>,<span class="number">60</span>))</span><br><span class="line"><span class="built_in">print</span>(faces)</span><br><span class="line"><span class="keyword">for</span>(x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">    cv2.rectangle(img, (x, y), (x+w, y+h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>
<h4 id="完整项目结果展示"><a href="#完整项目结果展示" class="headerlink" title="完整项目结果展示"></a><strong>完整项目结果展示</strong></h4><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250415/1.png"
                      alt="a"
                ></p>
<h3 id="参数调节策略"><a href="#参数调节策略" class="headerlink" title="参数调节策略"></a><strong>参数调节策略</strong></h3><ul>
<li><strong>多人场景优化</strong>:</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">faces = face_cascade.detectMultiScale(  </span><br><span class="line">    gray,      scaleFactor=<span class="number">1.05</span>,   <span class="comment"># 更小的缩放步长，检测更多人脸  </span></span><br><span class="line">minNeighbors=<span class="number">3</span>,     <span class="comment"># 降低阈值，减少漏检  </span></span><br><span class="line">minSize=(<span class="number">30</span>, <span class="number">30</span>)    <span class="comment"># 根据实际需求调整最小尺寸  </span></span><br><span class="line">)  </span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>速度优先</strong>:</li>
</ul>
  <div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">faces = face_cascade.detectMultiScale(  </span><br><span class="line">    gray,      scaleFactor=<span class="number">1.3</span>,    <span class="comment"># 更大的缩放步长，加快检测  </span></span><br><span class="line">minNeighbors=<span class="number">6</span>,     <span class="comment"># 更高阈值，减少误检  </span></span><br><span class="line">minSize=(<span class="number">50</span>, <span class="number">50</span>)    <span class="comment"># 忽略小尺寸目标  </span></span><br><span class="line">)  </span><br></pre></td></tr></table></figure></div>
<h3 id="问题2：Haar级联分类器能否检测卡通人物？"><a href="#问题2：Haar级联分类器能否检测卡通人物？" class="headerlink" title="问题2：Haar级联分类器能否检测卡通人物？"></a>问题2：Haar级联分类器能否检测卡通人物？</h3><h4 id="通常不能（或效果极差）❌"><a href="#通常不能（或效果极差）❌" class="headerlink" title="通常不能（或效果极差）❌"></a>通常不能（或效果极差）❌</h4><ul>
<li><strong>原因</strong>:    <ol>
<li><strong>训练数据特性</strong>: Haar级联分类器是基于真实人脸的特征（如眼睛、鼻子、嘴巴的明暗对比）训练的，而卡通人物的面部特征（如夸张的眼睛比例、简化线条）与真实人脸差异巨大。  </li>
<li><strong>特征抽象能力不足</strong>: Haar分类器依赖简单的矩形特征，无法捕捉卡通人物复杂的艺术风格。</li>
</ol>
</li>
</ul>
<h4 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案:"></a><strong>替代方案</strong>:</h4><ul>
<li><strong>深度学习模型</strong>:<br>使用基于CNN的检测器（如YOLO、SSD、MTCNN），它们能学习更复杂的特征。  <div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：使用MTCNN检测卡通人脸  </span></span><br><span class="line"><span class="keyword">from</span> mtcnn <span class="keyword">import</span> MTCNN  </span><br><span class="line"></span><br><span class="line">detector = MTCNN()  faces = detector.detect_faces(img)  </span><br></pre></td></tr></table></figure></div></li>
<li><strong>专用卡通检测器</strong>:<br>训练针对卡通人物的Haar分类器（需自行收集数据集）。</li>
</ul>
<h3 id="综合建议"><a href="#综合建议" class="headerlink" title="综合建议"></a>综合建议</h3><ol>
<li><strong>真实人脸检测</strong>:    <ul>
<li>参数推荐：<code>scaleFactor=1.1</code>, <code>minNeighbors=5</code>, <code>minSize=(30,30)</code>。  </li>
<li>多人场景：适当降低 <code>minNeighbors</code> 并减小 <code>scaleFactor</code>。</li>
</ul>
</li>
<li><strong>卡通人物检测</strong>:    <ul>
<li>放弃Haar分类器，改用深度学习模型。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>网络适配器无线网卡驱动不能用5g？</title>
    <url>/post/20250415195306.html</url>
    <content><![CDATA[<p><code>netsh wlan show drivers</code> 命令在 Windows 系统中主要用于查看无线网卡驱动的相关信息，但它并不直接显示当前连接的网络频段。不过，通过一些间接的方法，我们仍然可以获取到网络频段的相关信息。下面详细介绍如何利用 <code>netsh wlan show drivers</code> 命令以及结合其他命令来查看网络频段。</p>
<hr>
<h3 id="使用-netsh-wlan-show-drivers-命令"><a href="#使用-netsh-wlan-show-drivers-命令" class="headerlink" title="使用 netsh wlan show drivers 命令"></a>使用 <code>netsh wlan show drivers</code> 命令</h3><p> <code>netsh wlan show drivers</code> 可以查看无线网卡支持的无线标准（如 802.11ac、802.11ax 等），从而间接判断网卡是否支持 5GHz 频段。</p>
<h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a><strong>操作步骤：</strong></h4><ol>
<li><p><strong>打开命令提示符（CMD）</strong>：</p>
<ul>
<li>按 <code>Win + R</code>，输入 <code>cmd</code>，按回车。</li>
</ul>
</li>
<li><p><strong>输入命令</strong>：</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">netsh wlan show drivers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>查看输出信息</strong>：</p>
<ul>
<li>在输出结果中，找到 <code>支持的无线标准</code> 或 <code>Radio types supported</code> 字段。</li>
<li>如果显示 <code>802.11a</code>、<code>802.11ac</code>、<code>802.11ax</code> 等，则表示网卡支持 5GHz 频段。</li>
<li>如果仅显示 <code>802.11b</code>、<code>802.11g</code>、<code>802.11n</code>，则可能仅支持 2.4GHz 频段。</li>
</ul>
</li>
</ol>
<h4 id="示例输出："><a href="#示例输出：" class="headerlink" title="示例输出："></a><strong>示例输出：</strong></h4><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250415/2.png"
                      alt="a"
                ></p>
]]></content>
      <categories>
        <category>解决错误</category>
      </categories>
      <tags>
        <tag>解决错误</tag>
      </tags>
  </entry>
  <entry>
    <title>一封情书</title>
    <url>/post/20250418213441.html</url>
    <content><![CDATA[<p>最近学习英语比较无聊，就看了一部英文动画片《奇迹少女》。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250418/1.png"
                      alt="a"
                ></p>
<hr>
<p>月下寄言，情致君前：</p>
<ul>
<li>吾于这浩渺人间，穿行于繁华与落寞之间，心有所属，情有所钟。每至夜深，月光倾洒，吾思君之念，便如江水滔滔，难以平息。</li>
<li>君，乃世间之瑰宝，才华横溢，风度翩翩。吾观君之言行，听君之言语，皆如沐春风，心旷神怡。君之智慧，犹如明灯照夜，指引吾前行之路；君之品德，更如高山流水，令吾敬仰不已。</li>
<li>吾与君相遇，实乃三生有幸。君之风采，早已深入吾心，成为吾生命中不可磨灭之印记。吾愿以笔墨为媒，将这份深情厚意，化作千言万语，诉诸君前。</li>
<li>吾知，爱情非儿戏，需以真心相待，以诚意相守。吾对君之情，非一朝一夕，而是日积月累，愈久弥坚。吾愿与君携手共度此生，无论风雨变换，岁月更迭，皆不离不弃，相守相依。</li>
<li>君若愿，吾便为君之知音，倾听君之心声，分担君之忧愁；君若需，吾便为君之挚友，与君共谋大事，同创辉煌。吾之愿，唯愿与君心心相印，携手同行于这漫漫人生路。</li>
<li>月下寄言，情真意切。愿君能懂吾心，愿君能惜吾情。吾愿与君共谱一曲爱情之歌，传颂千古，流芳百世。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250418/2.png"
                      alt="a"
                ></li>
</ul>
<hr>
<p>月下寄言，情藏心间：</p>
<ul>
<li>在这座喧嚣城市的某个角落，我静静地坐着，望着窗外繁华的灯火，心中却有一片属于你的宁静。每当夜深，月光悄悄洒落，我的心便如湖面泛起涟漪，因你而波动。</li>
<li>你，就像那夜空中最亮的星，遥远而璀璨；我，则是这尘世中的一粒微尘，默默仰望，心生向往。你的每一个笑容，每一句话语，都如同春风拂面，让我心生暖意，却又带着一丝懵懂的悸动。</li>
<li>曾听人说，“情不知所起，一往而深”。我此刻的心情，便是如此。我愿化作一缕轻风，悄悄吹过你的身边，只愿你能感受到我的存在，哪怕只是片刻的停留。</li>
<li>记得那次，你在阳光下漫步，身影拉长，如同画卷中的仙人。我远远地看着，心中涌动着无尽的柔情，却只能借用古人的诗句来表达：“愿我如星君如月，夜夜流光相守望。”虽然时代不同，但这份情感，却跨越千年，依旧如此真挚。</li>
<li>我知道，这份情感如同初绽的花蕾，羞涩而娇嫩。我不敢轻易言爱，只怕惊扰了这份美好。我愿将这份情感，化作一缕温柔的月光，悄悄洒在你的窗前，让你知道，有一个人，在远方默默地关注着你。</li>
<li>你若感知，愿君心领神会；若未察觉，也无妨。我愿继续在这尘世间，以梦为马，以诗为伴，静静等待那份属于我们的缘分。</li>
<li>月下寄言，情深似海。愿你安好，我心永伴。</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>琐事</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理选择题</title>
    <url>/post/20250426165340.html</url>
    <content><![CDATA[<p><strong>编译原理试卷</strong></p>
<p><strong>一、单选题（每题2.5分，共40题）</strong></p>
<ol>
<li><p>程序所需的数据空间在程序运行前就可确定，称为（C）管理技术。<br>A. 动态存储<br>B. 栈式存储<br>C. 静态存储<br>D. 堆式存储  </p>
</li>
<li><p>（A）是一种典型的解释型语言。<br>A. BASIC<br>B. C<br>C. FORTRAN<br>D. PASCAL  </p>
</li>
<li><p>一个编译程序中，不仅包含词法分析、中间代码生成、代码优化、目标代码生成等五个部分，还包括（A）。<br>A. 语法分析<br>B. 文法分析<br>C. 语言分析<br>D. 解释分析  </p>
</li>
<li><p>用高级语言编写的程序经编译后产生的程序叫（B）。<br>A. 源程序<br>B. 目标程序<br>C. 连接程序<br>D. 解释程序  </p>
</li>
<li><p>中间代码生成时所依据的是（C）。<br>A. 语法规则<br>B. 词法规则<br>C. 语义规则<br>D. 等价变换规则  </p>
</li>
<li><p>（B）和代码优化部分不是每个编译程序都必需的。<br>A. 语法分析<br>B. 中间代码生成<br>C. 词法分析<br>D. 目标代码生成  </p>
</li>
<li><p>后缀式 ab+cd+&#x2F; 可用表达式（B）来表示。<br>A. a+b&#x2F;c+d<br>B. (a+b)&#x2F;(c+d)<br>C. a+b&#x2F;(c+d)<br>D. a+b+c&#x2F;d  </p>
</li>
<li><p>文法分为四种类型，即0型、1型、2型、3型。其中2型文法是（D）。<br>A. 短语文法<br>B. 正则文法<br>C. 上下文有关文法<br>D. 上下文无关文法  </p>
</li>
<li><p>编译过程中，语法分析器的任务就是（B）。<br>A. (1)(2)(3)(4)<br>B. (2)(3)(4)<br>C. (1)(2)(3)<br>D. (1)(2)(3)(4)  </p>
</li>
<li><p>语法分析器则可以发现源程序中的（D）。<br>A. 语义错误<br>B. 语法和语义错误<br>C. 错误并校正<br>D. 语法错误  </p>
</li>
<li><p>编写一个计算机高级语言的源程序后，到正式上机运行之前，一般要经过这几步（B）。<br>A. (1)(2)(3)(4)<br>B. (1)(2)(3)<br>C. (1)(3)<br>D. (1)(4)  </p>
</li>
<li><p>下面关于解释程序的描述正确的是（B）。<br>A. (1)(2)<br>B. (1)<br>C. (1)(2)(3)<br>D. (2)(3)  </p>
</li>
<li><p>把汇编语言程序翻译成机器可执行的目标程序的工作是由（B）完成的。<br>A. 编译器<br>B. 汇编器<br>C. 解释器<br>D. 预处理器  </p>
</li>
<li><p>文法 G: S→<em>S</em>ly 所识别的语言是（D）。<br>A. xyx<br>B. (xyx)^*<br>C. Xny*n(n≥1)<br>D. X^<em>yX^</em>  </p>
</li>
<li><p>文法分为四种类型，即0型、1型、2型、3型。其中3型文法是（B）。<br>A. 短语文法<br>B. 正则文法<br>C. 上下文有关文法<br>D. 上下文无关文法  </p>
</li>
<li><p>四元式之间的联系是通过（B）实现的。<br>A. 指示器<br>B. 临时变量<br>C. 符号表<br>D. 程序变量  </p>
</li>
<li><p>优化可生成的目标代码（D）。<br>A. 运行时间较短<br>B. 占用存储空间较小<br>C. 运行时间短但占用内存空间大<br>D. 运行时间短且占用存储空间小  </p>
</li>
<li><p>编译程序是一种（B）。<br>A. 汇编程序<br>B. 翻译程序<br>C. 解释程序<br>D. 目标程序  </p>
</li>
<li><p>如果文法G是无二义的，则它的任何句子α（A）。<br>A. 最左推导和最右推导对应的语法树必定相同<br>B. 最左推导和最右推导对应的语法树可能不同<br>C. 最左推导和最右推导必定相同<br>D. 可能存在两个不同的最左推导，但它们对应的语法树相同  </p>
</li>
<li><p>文法G所描述的语言是的集合（C）。<br>A. 文法G的字母表V中所有符号组成的符号串<br>B. 文法G的字母表V的闭包V*中的所有符号串<br>C. 由文法的开始符号推出的所有终极符串<br>D. 由文法的开始符号推出的所有符号串  </p>
</li>
<li><p>构造编译程序应掌握（D）。<br>A. 源程序<br>B. 目标语言<br>C. 编译方法<br>D. 以上三项都是  </p>
</li>
<li><p>若一个文法是递归的，则它所产生的语言的句子（A）。<br>A. 是无穷多个<br>B. 是有穷多个<br>C. 是可枚举的<br>D. 个数是常量  </p>
</li>
<li><p>在规范归约中，用来刻画可归约串的是（B）。<br>A. 直接短语<br>B. 句柄<br>C. 最左素短语<br>D. 素短语  </p>
</li>
<li><p>词法分析器用于识别（C）。<br>A. 句子<br>B. 句型<br>C. 单词<br>D. 产生式  </p>
</li>
<li><p>若a为终结符，则A-&gt;α·aβ为（B）项目。<br>A. 归约<br>B. 移进<br>C. 接受<br>D. 待约  </p>
</li>
<li><p>通常一个编译程序中，不仅包含词法分析、语法分析、中间代码生成、代码优化、目标代码生成等五个部分，还应包括（C）。<br>A. 模拟执行器<br>B. 解释器<br>C. 表格处理和出错处理<br>D. 符号执行器  </p>
</li>
<li><p>一个句型中的最左简单短语称为该句型的句柄。（A）<br>A. 正确<br>B. 错误  </p>
</li>
<li><p>编译程序是对（D）。<br>A. 汇编程序的翻译<br>B. 高级语言程序的解释执行<br>C. 机器语言的执行<br>D. 高级语言的翻译  </p>
</li>
<li><p>将编译程序分成若干个“遍”是为了（B）。<br>A. 提高程序的执行效率<br>B. 使程序的结构更加清晰<br>C. 利用有限的机器内存并提高机器的执行效率<br>D. 利用有限的机器内存但降低了机器的执行效率  </p>
</li>
<li><p>构造编译程序应掌握（D）。<br>A. 源程序<br>B. 目标语言<br>C. 编译方法<br>D. 以上三项都是  </p>
</li>
<li><p>在语法分析处理中，FIRST集合、FOLLOW集合、SELECT集合均是（B）。<br>A. 非终极符集<br>B. 终极符集<br>C. 字母表<br>D. 状态集  </p>
</li>
<li><p>在自底向上的语法分析方法中，分析的关键是（A）。<br>A. 寻找句柄<br>B. 寻找句型<br>C. 消除递归<br>D. 选择候选式  </p>
</li>
<li><p>在LR分析法中，分析栈中存放的状态是识别规范句型的DFA状态，即（C）。<br>A. 句柄<br>B. 前缀<br>C. 活前缀<br>D. LR(0)项目  </p>
</li>
<li><p>词法分析器的输出结果是（C）。<br>A. 单词的种别编码<br>B. 单词在符号表中的位置<br>C. 单词的种别编码和自身值<br>D. 单词自身值  </p>
</li>
<li><p>若文法G定义的语言是无限集，则文法必然是（A）。<br>A. 递归的<br>B. 前后文无关的<br>C. 二义性的<br>D. 无二义性的  </p>
</li>
<li><p>正规式M1和M2等价是指（C）。<br>A. M1和M2的状态数相等<br>B. M1和M2的有向弧条数相等<br>C. M1和M2所识别的语言集相等<br>D. M1和M2状态数和有向弧条数相等  </p>
</li>
<li><p>一个文法所描述的语言是（A）。<br>A. 唯一的<br>B. 不唯一的<br>C. 可能唯一，也可能不唯一<br>D. 都不对  </p>
</li>
<li><p>编译程序绝大多数时间花在（D）上。<br>A. 出错处理<br>B. 词法分析<br>C. 目标代码生成<br>D. 管理表格  </p>
</li>
<li><p>下列哪个选项不属于编译程序的组成部分？（B）<br>A. 词法分析器<br>B. 汇编器<br>C. 语法分析器<br>D. 代码优化器  </p>
</li>
<li><p>下列哪个不是编译程序的工作阶段？（C）<br>A. 编辑<br>B. 编译<br>C. 解释执行<br>D. 连接</p>
</li>
</ol>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Desktop上传静态网页</title>
    <url>/post/20250428125135.html</url>
    <content><![CDATA[<p>（此篇文章用于记录我上传静态网页的过程，我怕我下次上传的时候忘记步骤，在这里留个记录）</p>
<p>1.在GitHub中新建一个仓库<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/1.png"
                      alt="a"
                ><br>2.点击创建<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/2.png"
                      alt="a"
                ><br>3.在GitHub Desktop中链接<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/3.png"
                      alt="a"
                ><br>4.在GitHub中复制HTTPS的链接<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/4.png"
                      alt="a"
                ><br>5.在GitHub Desktop中，将网页GitHub中复制的链接粘贴过来，然后下面的那个是在本地的位置<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/5.png"
                      alt="a"
                ><br>6.等待GitHub Desktop与GitHub的链接<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/6.png"
                      alt="a"
                ><br>7.连接好后，打开本地的仓库的地址<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/7.png"
                      alt="a"
                ><br>8.将需要上传的文件项目粘贴进来<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/8.png"
                      alt="a"
                ><br>9.然后在GitHub Desktop中就可以看到咱们需要上传的项目了，下面的那个地方，随便输入就行了，相当于是提交，最后点击一下最下面的Commit to main<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/9.png"
                      alt="a"
                ><br>10.然后点击他那个publish就行了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/10.png"
                      alt="a"
                ><br>11.然后咱们回到咱们的GitHub网页中，咱们刷新一下就可以看见咋那么刚才上传的项目<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/11.png"
                      alt="a"
                ><br>12.然后咱们点击setting里面的pages页面<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/12.png"
                      alt="a"
                ><br>13.把这个里面的none改成main，后面那个会自己改，root没改的话，手动一下，然后点击save<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/13.png"
                      alt="a"
                ><br>14.点击咱们的actions<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/14.png"
                      alt="a"
                ><br>15.你的这个项目图可能前边不是绿色的，不要着急，先点进去<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/15.png"
                      alt="a"
                ><br>16.在这个页面等一会儿，等他变成绿色，说明部署完毕了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/16.png"
                      alt="a"
                ><br>17.然后回到setting页面里面的pages就可以发现上面还有一个网页链接出现，那就说明部署成功了，点击即可访问，或者在网址栏里面输入链接就能直接访问了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250428/17.png"
                      alt="a"
                ></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-8位数码管输出学号</title>
    <url>/post/20250722215257.html</url>
    <content><![CDATA[<h1 id="第七篇"><a href="#第七篇" class="headerlink" title="第七篇"></a>第七篇</h1><p>数码管输出80220101</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> time 100</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> led[]=&#123;<span class="number">0x80</span>,<span class="number">0xc0</span>,<span class="number">0xa4</span>,<span class="number">0xa4</span>,<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xc0</span>,<span class="number">0xf9</span>&#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> com[]=&#123;<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x0c</span>,<span class="number">0x10</span>,<span class="number">0x14</span>,<span class="number">0x18</span>,<span class="number">0x1c</span>&#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> i,w;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			P2=com[i];</span><br><span class="line">			P0=~led[i];</span><br><span class="line">			delay(time);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-四个按键实现四种控制小灯样式</title>
    <url>/post/20250722212012.html</url>
    <content><![CDATA[<h1 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h1><p>分别通过四个按键实现一下功能：<br>①第四位亮<br>②高四位亮<br>③交叉亮<br>④流水灯</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line">sbit S1=P3^<span class="number">1</span>;</span><br><span class="line">sbit S2=P3^<span class="number">0</span>;</span><br><span class="line">sbit S3=P3^<span class="number">2</span>;</span><br><span class="line">sbit S4=P3^<span class="number">3</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> a;</span><br><span class="line">	P2=<span class="number">0xFF</span>;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(S1==<span class="number">0</span> &amp;&amp; S2!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			delay(<span class="number">1200</span>);</span><br><span class="line">			<span class="keyword">if</span>(S1==<span class="number">0</span> &amp;&amp; S2!=<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				P2=<span class="number">0xF0</span>;<span class="comment">//低四位亮</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(S1!=<span class="number">0</span> &amp;&amp; S2==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			delay(<span class="number">1200</span>);</span><br><span class="line">			<span class="keyword">if</span>(S1!=<span class="number">0</span> &amp;&amp; S2==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				P2=<span class="number">0x0F</span>;<span class="comment">//高四位亮</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(S1==<span class="number">0</span> &amp;&amp; S2==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			delay(<span class="number">1200</span>);</span><br><span class="line">			<span class="keyword">if</span>(S1==<span class="number">0</span> &amp;&amp; S2==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				P2=<span class="number">0x00</span>;<span class="comment">//都亮</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(S3==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			delay(<span class="number">1200</span>);</span><br><span class="line">			a=<span class="number">0x55</span>;</span><br><span class="line">			<span class="keyword">if</span>(S3==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				P2=a;<span class="comment">//交叉亮</span></span><br><span class="line">				delay(<span class="number">5000</span>);</span><br><span class="line">				P2=~a;<span class="comment">//交叉亮</span></span><br><span class="line">				delay(<span class="number">5000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(S4==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			delay(<span class="number">1200</span>);</span><br><span class="line">			P2=<span class="number">0x7F</span>;</span><br><span class="line">			<span class="keyword">while</span>(S4==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				P2=_cror_(P2,<span class="number">1</span>); <span class="comment">//循环右移</span></span><br><span class="line">				delay(<span class="number">5000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(S1!=<span class="number">0</span>&amp;&amp;S2!=<span class="number">0</span>&amp;&amp;S3!=<span class="number">0</span>&amp;&amp;S4!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			P2=<span class="number">0xFF</span>;<span class="comment">//没按不亮</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-声光报警器</title>
    <url>/post/20250722212410.html</url>
    <content><![CDATA[<h1 id="第三篇"><a href="#第三篇" class="headerlink" title="第三篇"></a>第三篇</h1><h3 id="一、功能模块解析"><a href="#一、功能模块解析" class="headerlink" title="一、功能模块解析"></a>一、功能模块解析</h3><ol>
<li><p>​<strong>​引脚定义​</strong>​：</p>
<ul>
<li><code>S1=P3^1</code>：按键输入（低电平触发）</li>
<li><code>beep=P1^5</code>：蜂鸣器输出</li>
<li><code>green=P2^0</code>：绿灯控制（低电平亮）</li>
<li><code>red=P2^1</code>：红灯控制（低电平亮）</li>
</ul>
</li>
<li><p>​<strong>​功能函数​</strong>​：</p>
</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void delay(unsigned int i)  // 阻塞延时</span><br><span class="line">void Beep(unsigned int i)   // 产生频率可调的蜂鸣声</span><br><span class="line">void Light(unsigned int i)   // 红灯闪烁（未在main调用）</span><br><span class="line">void all(unsigned int i)     // 声光同步报警（红灯闪烁+蜂鸣）</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>​<strong>​主控制逻辑​</strong>​：</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">    green=0;  // 绿灯常亮（待机状态）</span><br><span class="line">    red=1;    // 红灯熄灭</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        if(S1==0) &#123;         // 按键检测</span><br><span class="line">            delay(1200);     // 消抖延迟</span><br><span class="line">            green=1;         // 灭绿灯</span><br><span class="line">            if(S1==0) &#123;      // 二次确认按键</span><br><span class="line">                all(1000);   // 触发声光报警</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else green=0;  // 松开按键恢复绿灯</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="二、核心工作原理"><a href="#二、核心工作原理" class="headerlink" title="二、核心工作原理"></a>二、核心工作原理</h3><ol>
<li><p>​<strong>​待机状态​</strong>​：</p>
<ul>
<li>绿灯常亮（<code>green=0</code>）表示系统就绪</li>
<li>红灯熄灭（<code>red=1</code>）</li>
</ul>
</li>
<li><p>​<strong>​报警触发机制​</strong>​：</p>
<ul>
<li>当按键<code>S1</code>被按下时（低电平）：<ol>
<li>先进行1200单位的消抖延时</li>
<li>熄灭绿灯（<code>green=1</code>）指示状态切换</li>
<li>二次确认按键按下（防误触）</li>
<li>调用<code>all(1000)</code>执行声光报警</li>
</ol>
</li>
</ul>
</li>
<li><p>​<strong>​声光报警实现​</strong>​：</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void all(unsigned int i) &#123;</span><br><span class="line">    for(a=0;a&lt;i;a++) &#123;</span><br><span class="line">        red=0;         // 红灯亮</span><br><span class="line">        Beep(50);      // 高频蜂鸣</span><br><span class="line">        delay(5000);   // 持续亮灯</span><br><span class="line">        red=1;         // 红灯灭</span><br><span class="line">        Beep(50);      // 不同频率蜂鸣</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>红灯按固定频率闪烁</li>
<li>亮&#x2F;灭状态切换时蜂鸣器发出不同频率声响</li>
<li>循环次数<code>i=1000</code>决定报警时长</li>
</ul>
</li>
</ol>
<h3 id="三、关键设计特性"><a href="#三、关键设计特性" class="headerlink" title="三、关键设计特性"></a>三、关键设计特性</h3><ol>
<li><p>​<strong>​硬件控制特性​</strong>​：</p>
<ul>
<li><p>​<strong>​蜂鸣器驱动​</strong>​：通过<code>Beep()</code>函数实现PWM方波</p>
  <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(k=0;k&lt;i;k++) &#123; beep=0; &#125;  // 低电平持续</span><br><span class="line">for(j=0;j&lt;i;j++) &#123; beep=1; &#125;  // 高电平持续</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>i</code>值控制音频频率（值越小频率越高）</li>
</ul>
</li>
</ul>
</li>
<li><p>​<strong>​安全设计​</strong>​：</p>
<ul>
<li>两级按键检测（首次扫描+消抖后确认）</li>
<li>状态可视化（绿灯表示待机，红灯表示报警）</li>
</ul>
</li>
<li><p>​<strong>​待优化点​</strong>​：</p>
<ul>
<li><code>Light()</code>函数定义但未使用</li>
<li>报警结束后无状态恢复逻辑</li>
<li>延时精度依赖主频（未使用定时器）</li>
<li>缺少按键释放检测（会持续触发）</li>
</ul>
</li>
</ol>
<blockquote>
<p>系统典型应用场景：安全设备报警、异常状态提醒或工业设备紧急指示。当检测到按键触发（模拟异常事件）时，系统通过交替的灯光闪烁和多频蜂鸣实现高辨识度报警。</p>
</blockquote>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit S1=P3^<span class="number">1</span>;</span><br><span class="line">sbit beep=P1^<span class="number">5</span>;</span><br><span class="line">sbit green=P2^<span class="number">0</span>;</span><br><span class="line">sbit red=P2^<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Beep</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k,j,a;</span><br><span class="line">	<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">1000</span>;a++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">		&#123;</span><br><span class="line">			beep=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			beep=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Light</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k,j,a;</span><br><span class="line">	<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">5000</span>;a++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">		&#123;</span><br><span class="line">			red=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			red=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">all</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k,j,a;</span><br><span class="line">	<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;i;a++)</span><br><span class="line">	&#123;</span><br><span class="line">		red=<span class="number">0</span>;</span><br><span class="line">		Beep(<span class="number">50</span>);</span><br><span class="line">		delay(<span class="number">5000</span>);</span><br><span class="line">		red=<span class="number">1</span>;</span><br><span class="line">		Beep(<span class="number">50</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	green=<span class="number">0</span>;</span><br><span class="line">	red=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(S1==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			delay(<span class="number">1200</span>);</span><br><span class="line">			green=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(S1==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				all(<span class="number">1000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> green=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-多按键控制LED灯系统</title>
    <url>/post/20250722214048.html</url>
    <content><![CDATA[<h1 id="第五篇"><a href="#第五篇" class="headerlink" title="第五篇"></a>第五篇</h1><h3 id="​​一、硬件连接分析​​"><a href="#​​一、硬件连接分析​​" class="headerlink" title="​​一、硬件连接分析​​"></a>​<strong>​一、硬件连接分析​</strong>​</h3><ol>
<li><p>​<strong>​按键接口​</strong>​：</p>
<ul>
<li><code>K1</code>(P3.1)：控制LED1</li>
<li><code>K2</code>(P3.0)：控制LED2</li>
<li><code>K3</code>(P3.2)：控制LED3</li>
<li><code>K4</code>(P3.3)：全局复位键（NEXT）</li>
</ul>
</li>
<li><p>​<strong>​LED接口​</strong>​：</p>
<ul>
<li><code>L1</code>(P2.0)：LED1（低电平点亮）</li>
<li><code>L2</code>(P2.1)：LED2</li>
<li><code>L3</code>(P2.2)：LED3</li>
</ul>
</li>
</ol>
<blockquote>
<p>​<strong>​硬件特性​</strong>​：LED低电平驱动（<code>0</code>点亮），按键低电平触发（需上拉电阻）。</p>
</blockquote>
<hr>
<h3 id="​​二、核心功能逻辑​​"><a href="#​​二、核心功能逻辑​​" class="headerlink" title="​​二、核心功能逻辑​​"></a>​<strong>​二、核心功能逻辑​</strong>​</h3><ol>
<li><p>​<strong>​初始状态​</strong>​：</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">L1=1; L2=1; L3=1;  // 所有LED熄灭</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>​<strong>​按键控制逻辑​</strong>​：</p>
<ul>
<li>​<strong>​按下<code>K1</code>​</strong>​：点亮<code>L1</code>，保持<code>L2/L3</code>熄灭，直到按下<code>K4</code>退出</li>
<li>​<strong>​按下<code>K2</code>​</strong>​：点亮<code>L2</code>，保持<code>L1/L3</code>熄灭，直到按下<code>K4</code>退出</li>
<li>​<strong>​按下<code>K3</code>​</strong>​：点亮<code>L3</code>，保持<code>L1/L2</code>熄灭，直到按下<code>K4</code>退出</li>
</ul>
</li>
<li><p>​<strong>​全局复位​</strong>​：<br> 任意状态下按下<code>K4</code>（NEXT键）均返回初始状态。</p>
</li>
</ol>
<hr>
<h3 id="​​三、代码​​"><a href="#​​三、代码​​" class="headerlink" title="​​三、代码​​"></a>​<strong>​三、代码​</strong>​</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line">sbit K1=P3^<span class="number">1</span>;<span class="comment">//control-&gt;L1</span></span><br><span class="line">sbit K2=P3^<span class="number">0</span>;<span class="comment">//control-&gt;L2</span></span><br><span class="line">sbit K3=P3^<span class="number">2</span>;<span class="comment">//control-&gt;L3</span></span><br><span class="line">sbit K4=P3^<span class="number">3</span>;<span class="comment">//NEXT</span></span><br><span class="line"></span><br><span class="line">sbit L1=P2^<span class="number">0</span>;</span><br><span class="line">sbit L2=P2^<span class="number">1</span>;</span><br><span class="line">sbit L3=P2^<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		L1=<span class="number">1</span>;</span><br><span class="line">		L2=<span class="number">1</span>;</span><br><span class="line">		L3=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(K1==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				L1=<span class="number">0</span>;</span><br><span class="line">				K2=<span class="number">1</span>;</span><br><span class="line">				K3=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(K4==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(K2==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				K1=<span class="number">1</span>;</span><br><span class="line">				L2=<span class="number">0</span>;</span><br><span class="line">				K3=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(K4==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(K3==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				K1=<span class="number">1</span>;</span><br><span class="line">				K2=<span class="number">1</span>;</span><br><span class="line">				L3=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(K4==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-密码矩阵</title>
    <url>/post/20250722215916.html</url>
    <content><![CDATA[<h1 id="第八篇"><a href="#第八篇" class="headerlink" title="第八篇"></a>第八篇</h1><p>4×4的矩阵上，有一个按键是钥匙，按“钥匙”就解开了,这里我用的是第11个按钮</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> key 11</span></span><br><span class="line">sbit close=P2^<span class="number">0</span>;</span><br><span class="line">sbit open=P2^<span class="number">1</span>;</span><br><span class="line">sbit S1=P3^<span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> button,hh,ll,button2,result,time;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">abc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	P1=<span class="number">0x0f</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		button2=P1;</span><br><span class="line">		<span class="keyword">if</span>(button2==<span class="number">0x0e</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ll=<span class="number">3</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(button2==<span class="number">0x0d</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ll=<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(button2==<span class="number">0x0b</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ll=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(button2==<span class="number">0x07</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ll=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	close=<span class="number">0</span>;</span><br><span class="line">	open=<span class="number">1</span>;</span><br><span class="line">	P1=<span class="number">0xf0</span>;</span><br><span class="line">	P0=~<span class="number">0x86</span>;	</span><br><span class="line"></span><br><span class="line">		button=P1;</span><br><span class="line">		<span class="keyword">if</span>(button!=<span class="number">0xf0</span>)<span class="comment">//有按键按下,这里判断行</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(button==<span class="number">0xe0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				hh=<span class="number">3</span>;</span><br><span class="line">				abc();</span><br><span class="line"><span class="comment">//				break;</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(button==<span class="number">0xd0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				hh=<span class="number">2</span>;</span><br><span class="line">				abc();</span><br><span class="line"><span class="comment">//				break;</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(button==<span class="number">0xb0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				hh=<span class="number">1</span>;</span><br><span class="line">				abc();</span><br><span class="line"><span class="comment">//				break;</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(button==<span class="number">0x70</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				hh=<span class="number">0</span>;</span><br><span class="line">				abc();</span><br><span class="line"><span class="comment">//				break;</span></span><br><span class="line">			&#125;</span><br><span class="line">			result=hh*<span class="number">4</span>+ll+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(result==key)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					open=<span class="number">0</span>;</span><br><span class="line">					close=<span class="number">1</span>;</span><br><span class="line">					P0=~<span class="number">0x8c</span>;</span><br><span class="line">					<span class="keyword">for</span>(time=<span class="number">0</span>;time&lt;<span class="number">60000</span>;time++);	</span><br><span class="line">					<span class="keyword">for</span>(time=<span class="number">0</span>;time&lt;<span class="number">60000</span>;time++);	</span><br><span class="line">					<span class="keyword">if</span>(S1==<span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line"><span class="comment">//					P0=~0x86;	</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//没有按键按下</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-小灯闪烁</title>
    <url>/post/20250722210938.html</url>
    <content><![CDATA[<p>计算机科学与技术专业课程–C51单片机<br>该系列内容为学生从第一节课到最后一节课的作业，发在网络上记录一下！</p>
<h1 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h1><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line">sbit P1_0=P1^<span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		P1_0=<span class="number">0</span>;</span><br><span class="line">		delay(<span class="number">10000</span>);</span><br><span class="line">		P1_0=<span class="number">1</span>;</span><br><span class="line">		delay(<span class="number">10000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-抢答系统</title>
    <url>/post/20250722214637.html</url>
    <content><![CDATA[<h1 id="第六篇"><a href="#第六篇" class="headerlink" title="第六篇"></a>第六篇</h1><h3 id="一、硬件系统架构"><a href="#一、硬件系统架构" class="headerlink" title="一、硬件系统架构"></a>一、硬件系统架构</h3><ol>
<li><p>​<strong>​输入控制​</strong>​：</p>
<ul>
<li><code>K1</code>(P3.1)：模式1触发键</li>
<li><code>K2</code>(P3.0)：模式2触发键</li>
<li><code>K3</code>(P3.2)：模式3触发键</li>
<li><code>K4</code>(P3.3)：全局复位键</li>
</ul>
</li>
<li><p>​<strong>​输出设备​</strong>​：</p>
<ul>
<li><code>LED</code>(P0)：8段数码管数据端口（共阳极）</li>
<li><code>P2A/P2B/P2C</code>(P2.2-4)：数码管位选控制</li>
</ul>
</li>
<li><p>​<strong>​显示逻辑​</strong>​：</p>
<ul>
<li>数码管显示值对应：<ul>
<li><code>0xC0</code>：初始显示”0”</li>
<li><code>0xF9</code>：模式1显示”1”</li>
<li><code>0xA4</code>：模式2显示”2”</li>
<li><code>0xB0</code>：模式3显示”3”</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="二、核心运行逻辑"><a href="#二、核心运行逻辑" class="headerlink" title="二、核心运行逻辑"></a>二、核心运行逻辑</h3><ol>
<li><p>​<strong>​初始化阶段​</strong>​：</p>
 <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">P2A=1; P2B=0; P2C=0;  // 激活第一位数码管</span><br><span class="line">LED=0xC0;             // 显示&quot;0&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>​<strong>​模式切换机制​</strong>​：</p>
<ul>
<li>​<strong>​按下K1​</strong>​：锁定模式1，显示”1”，等待K4退出</li>
<li>​<strong>​按下K2​</strong>​：锁定模式2，显示”2”，等待K4退出</li>
<li>​<strong>​按下K3​</strong>​：锁定模式3，显示”3”，等待K4退出</li>
</ul>
</li>
<li><p>​<strong>​复位控制​</strong>​：<br> 任何模式下按下<code>K4</code>均返回初始状态（显示”0”）</p>
</li>
</ol>
<h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line">sbit K1=P3^<span class="number">1</span>;<span class="comment">//control-&gt;L1</span></span><br><span class="line">sbit K2=P3^<span class="number">0</span>;<span class="comment">//control-&gt;L2</span></span><br><span class="line">sbit K3=P3^<span class="number">2</span>;<span class="comment">//control-&gt;L3</span></span><br><span class="line">sbit K4=P3^<span class="number">3</span>;<span class="comment">//NEXT</span></span><br><span class="line">sbit LED=P0;</span><br><span class="line">sbit P2A=P2^<span class="number">2</span>;</span><br><span class="line">sbit P2B=P2^<span class="number">3</span>;</span><br><span class="line">sbit P2C=P2^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;k++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	P2A=<span class="number">1</span>;</span><br><span class="line">	P2B=<span class="number">0</span>;</span><br><span class="line">	P2C=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		LED=<span class="number">0xC0</span>;</span><br><span class="line">		<span class="keyword">if</span>(K1==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				K2=<span class="number">1</span>;</span><br><span class="line">				K3=<span class="number">1</span>;</span><br><span class="line">				LED=<span class="number">0xF9</span>;</span><br><span class="line">				<span class="keyword">if</span>(K4==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(K2==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				K1=<span class="number">1</span>;</span><br><span class="line">				K3=<span class="number">1</span>;</span><br><span class="line">				LED=<span class="number">0xA4</span>;</span><br><span class="line">				<span class="keyword">if</span>(K4==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(K3==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				K1=<span class="number">1</span>;</span><br><span class="line">				K2=<span class="number">1</span>;</span><br><span class="line">				LED=<span class="number">0xB0</span>;</span><br><span class="line">				<span class="keyword">if</span>(K4==<span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-校时”功能的 6 位数码管电子钟</title>
    <url>/post/20250722220931.html</url>
    <content><![CDATA[<p>一、整体功能  </p>
<ul>
<li>正常走时：上电后从 00-00-00 开始，按 24 小时制计时。  </li>
<li>暂停&#x2F;继续：按 K4（P3^3）立即进入&#x2F;退出暂停状态。  </li>
<li>校时：在 <strong>暂停状态</strong> 下<br>　　– K1（P3^1）小时 +1<br>　　– K2（P3^0）分钟 +1<br>　　– K3（P3^2）秒钟 +1  </li>
<li>显示：6 位共阳数码管，动态扫描，位选由 P2，段选由 P0 输出。</li>
</ul>
<p>二、代码  </p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line">sbit k1_down=P3^<span class="number">1</span>;</span><br><span class="line">sbit k2_down=P3^<span class="number">0</span>;</span><br><span class="line">sbit k3_down=P3^<span class="number">2</span>;</span><br><span class="line">sbit k4_down=P3^<span class="number">3</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> paused = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> count=<span class="number">0</span>,miao=<span class="number">0</span>,min=<span class="number">0</span>,hour=<span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> disp[]=&#123;<span class="number">0x14</span>,<span class="number">0x10</span>,<span class="number">0x0c</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> led[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_1</span><span class="params">()</span> interrupt 3 <span class="comment">//T1</span></span><br><span class="line">&#123;</span><br><span class="line">	TH1=(<span class="number">65536</span><span class="number">-10000</span>)/<span class="number">256</span>; </span><br><span class="line">  TL1=(<span class="number">65536</span><span class="number">-10000</span>)%<span class="number">256</span>;</span><br><span class="line">	TF1=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(k4_down==<span class="number">0</span>) paused = !paused;</span><br><span class="line">	<span class="keyword">if</span>(!paused)</span><br><span class="line">	&#123;</span><br><span class="line">   count++;                </span><br><span class="line">   <span class="keyword">if</span>(count==<span class="number">100</span>)        </span><br><span class="line">		count=<span class="number">0</span>;</span><br><span class="line">		miao++;              </span><br><span class="line">		<span class="keyword">if</span>(miao==<span class="number">60</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			miao=<span class="number">0</span>;min++;</span><br><span class="line">			<span class="keyword">if</span>(min==<span class="number">60</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				min=<span class="number">0</span>;hour++;</span><br><span class="line">				<span class="keyword">if</span>(hour==<span class="number">24</span>) hour=<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;	</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	count++;               </span><br><span class="line">   <span class="keyword">if</span>(count==<span class="number">15</span>)          </span><br><span class="line">	 &#123;</span><br><span class="line">		count=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (k1_down==<span class="number">0</span>) &#123;</span><br><span class="line">		hour = (++hour) % <span class="number">24</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (k2_down==<span class="number">0</span>) &#123;</span><br><span class="line">		min = (++min) % <span class="number">60</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (k3_down==<span class="number">0</span>) &#123;</span><br><span class="line">		miao = (++miao) % <span class="number">60</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Miao</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> m;</span><br><span class="line">	<span class="comment">//miao</span></span><br><span class="line">	P2=disp[<span class="number">4</span>];</span><br><span class="line">	P0=~led[i/<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">100</span>;m++);</span><br><span class="line">	P0=<span class="number">0x00</span>;</span><br><span class="line">	P2=disp[<span class="number">5</span>];</span><br><span class="line">	P0=~led[i%<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">100</span>;m++);</span><br><span class="line">	P0=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Min</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//min </span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> m;</span><br><span class="line">	P2=disp[<span class="number">2</span>];</span><br><span class="line">	P0=~led[j/<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">100</span>;m++);</span><br><span class="line">	P0=<span class="number">0x00</span>;</span><br><span class="line">	P2=disp[<span class="number">3</span>];</span><br><span class="line">	P0=~led[j%<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">100</span>;m++);</span><br><span class="line">	P0=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Hour</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//hour</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> m;</span><br><span class="line">	P2=disp[<span class="number">0</span>];</span><br><span class="line">	P0=~led[k/<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">100</span>;m++);</span><br><span class="line">	P0=<span class="number">0x00</span>;</span><br><span class="line">	P2=disp[<span class="number">1</span>];</span><br><span class="line">	P0=~led[k%<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">100</span>;m++);</span><br><span class="line">	P0=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  TMOD=<span class="number">0x10</span>;</span><br><span class="line"> 	TH1=(<span class="number">65536</span><span class="number">-50000</span>)/<span class="number">256</span>; </span><br><span class="line">  TL1=(<span class="number">65536</span><span class="number">-50000</span>)%<span class="number">256</span>;</span><br><span class="line">	ET1=<span class="number">1</span>;</span><br><span class="line">	EA=<span class="number">1</span>;</span><br><span class="line">	TR1=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		&#123;Miao(miao);Min(min);Hour(hour);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-秒表0-99（中断方式实现）</title>
    <url>/post/20250722220643.html</url>
    <content><![CDATA[<h1 id="第十篇"><a href="#第十篇" class="headerlink" title="第十篇"></a>第十篇</h1><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&quot;reg51.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void delay1s()</span></span><br><span class="line"><span class="comment">//&#123;  </span></span><br><span class="line"><span class="comment">//  unsigned char i;</span></span><br><span class="line"><span class="comment">//  for(i=0;i&lt;1;i++)&#123;      </span></span><br><span class="line"><span class="comment">//    TH1=(65536-10000)/256; </span></span><br><span class="line"><span class="comment">//    TL1=(65536-10000)%256; </span></span><br><span class="line"><span class="comment">//    TR1=1;</span></span><br><span class="line"><span class="comment">//    while(!TF1); </span></span><br><span class="line"><span class="comment">//    TF1=0;	</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> miao=<span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> led[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ZD1</span><span class="params">()</span> interrupt 3</span><br><span class="line">&#123;  </span><br><span class="line">  <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> count=<span class="number">0</span>;   </span><br><span class="line">  TH1=(<span class="number">65536</span><span class="number">-50000</span>)/<span class="number">256</span>; </span><br><span class="line">  TL1=(<span class="number">65536</span><span class="number">-50000</span>)%<span class="number">256</span>; </span><br><span class="line">	count++;</span><br><span class="line">  <span class="keyword">if</span>(count&gt;=<span class="number">20</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		count=<span class="number">0</span>;</span><br><span class="line">		miao++; </span><br><span class="line">    <span class="keyword">if</span>(miao==<span class="number">100</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			miao=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;		</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">disp</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line"><span class="comment">//    unsigned char led[]=&#123;0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90&#125; ;</span></span><br><span class="line"><span class="comment">//    for ( k = 0; k &lt; 50; k++)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line">        P2=<span class="number">0xe7</span>;</span><br><span class="line">        P0=~led[i/<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">100</span>;k++);</span><br><span class="line">	P0=<span class="number">0X00</span>;</span><br><span class="line"><span class="comment">//        delay1s();</span></span><br><span class="line">        P2=<span class="number">0xe3</span>;</span><br><span class="line">        P0=~led[i%<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">100</span>;k++);</span><br><span class="line">	P0=<span class="number">0X00</span>;</span><br><span class="line"><span class="comment">//        delay1s();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    unsigned char miao=0;</span></span><br><span class="line">    TMOD=<span class="number">0x10</span>; </span><br><span class="line">    TH1=(<span class="number">65536</span><span class="number">-50000</span>)/<span class="number">256</span>;  </span><br><span class="line">    TL1=(<span class="number">65536</span><span class="number">-50000</span>)%<span class="number">256</span>; </span><br><span class="line"></span><br><span class="line">	ET1=<span class="number">1</span>;<span class="comment">//开放T1中断允许</span></span><br><span class="line">	EA=<span class="number">1</span>;<span class="comment">//开放总中断允许</span></span><br><span class="line"></span><br><span class="line">		TR1=<span class="number">1</span>; 	</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">        disp(miao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-秒表0到99</title>
    <url>/post/20250722220253.html</url>
    <content><![CDATA[<h1 id="第九篇"><a href="#第九篇" class="headerlink" title="第九篇"></a>第九篇</h1><p>0-99循环显示，每隔一秒，增加1</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&quot;reg51.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay1s</span><span class="params">()</span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1</span>;i++)&#123;      </span><br><span class="line">    TH1=(<span class="number">65536</span><span class="number">-10000</span>)/<span class="number">256</span>; </span><br><span class="line">    TL1=(<span class="number">65536</span><span class="number">-10000</span>)%<span class="number">256</span>; </span><br><span class="line">    TR1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!TF1); </span><br><span class="line">    TF1=<span class="number">0</span>;	</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">disp</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> k;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> led[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125; ;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">50</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        P2=<span class="number">0xe7</span>;</span><br><span class="line">        P0=~led[i/<span class="number">10</span>];</span><br><span class="line">        delay1s();</span><br><span class="line">        P2=<span class="number">0xe3</span>;</span><br><span class="line">        P0=~led[i%<span class="number">10</span>];</span><br><span class="line">        delay1s();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> miao=<span class="number">0</span>;</span><br><span class="line">    TMOD=<span class="number">0x10</span>; </span><br><span class="line">    TH1=(<span class="number">65536</span><span class="number">-50000</span>)/<span class="number">256</span>;  </span><br><span class="line">    TL1=(<span class="number">65536</span><span class="number">-50000</span>)%<span class="number">256</span>; </span><br><span class="line">    TR1=<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        disp(miao);</span><br><span class="line">        miao++; </span><br><span class="line">        <span class="keyword">if</span>(miao==<span class="number">100</span>)miao=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>C51-通过按键调整PWM占空比控制LED亮度</title>
    <url>/post/20250722212805.html</url>
    <content><![CDATA[<h1 id="第四篇"><a href="#第四篇" class="headerlink" title="第四篇"></a>第四篇</h1><p>通过调节占空比控制灯的亮度</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> on 0    <span class="comment">// 低电平点亮</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> off 1   <span class="comment">// 高电平熄灭</span></span></span><br><span class="line">sbit up = P3^<span class="number">1</span>;</span><br><span class="line">sbit down = P3^<span class="number">0</span>;</span><br><span class="line">sbit light = P2^<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> ms)</span> &#123; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; ms; x++)</span><br><span class="line">        <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">120</span>; y++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">500</span>; <span class="comment">// 初始状态：灯灭</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        light = on;  <span class="comment">// 亮</span></span><br><span class="line">        delay_ms(i);</span><br><span class="line">        light = off; <span class="comment">// 灭</span></span><br><span class="line">        delay_ms(j);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 上调亮度</span></span><br><span class="line">        <span class="keyword">if</span> (up == <span class="number">0</span>) &#123;</span><br><span class="line">            delay_ms(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (up == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">1000</span>) i++; <span class="comment">// 上限保护</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">10</span>) j--;   <span class="comment">// 下限保护</span></span><br><span class="line">                <span class="keyword">while</span> (up == <span class="number">0</span>);   <span class="comment">// 等待按键释放</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下调亮度</span></span><br><span class="line">        <span class="keyword">if</span> (down == <span class="number">0</span>) &#123;</span><br><span class="line">            delay_ms(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (down == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">10</span>) i--;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; <span class="number">1000</span>) j++;</span><br><span class="line">                <span class="keyword">while</span> (down == <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>C51单片机</category>
      </categories>
      <tags>
        <tag>C51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-1-点亮小灯</title>
    <url>/post/20250722222258.html</url>
    <content><![CDATA[<p>计算机科学与技术专业课程–嵌入式开发技术，用的是STM32系列的单片机。<br>此系列文章仅为学生的作业记录。</p>
<hr>
<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;               </span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;       </span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;      </span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);                 </span><br><span class="line"></span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_8);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        GPIO_ResetBits(GPIOB, GPIO_Pin_8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/1.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-10-中华万年历</title>
    <url>/post/20250722225714.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (; count != <span class="number">0</span>; count--)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="number">5000</span>;</span><br><span class="line">        <span class="keyword">while</span> (i--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SMG_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = <span class="number">0xffff</span>; <span class="comment">// GPIOC 0~15</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = <span class="number">0x0fff</span>; <span class="comment">// GPIOB 0~12</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> table[] = &#123;<span class="number">0xc0</span>, <span class="number">0xf9</span>, <span class="number">0xa4</span>, <span class="number">0xb0</span>, <span class="number">0x99</span>, <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xf8</span>, <span class="number">0x80</span>, <span class="number">0x90</span>&#125;;</span><br><span class="line"><span class="type">uint16_t</span> wei[] = &#123;<span class="number">0xffe</span>, <span class="number">0xffd</span>, <span class="number">0xffb</span>, <span class="number">0xff7</span>, <span class="number">0xfef</span>, <span class="number">0xfdf</span>,<span class="number">0xfbf</span>, <span class="number">0xf7f</span>, <span class="number">0xeff</span>, <span class="number">0xdff</span>, <span class="number">0xbff</span>, <span class="number">0x7ff</span>&#125;;</span><br><span class="line"><span class="type">uint16_t</span> gw, dw;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> time[] = &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>&#125;; <span class="comment">// 202504231515</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UpdateDateTime</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsLeapYear</span><span class="params">(<span class="type">int</span> year)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetMaxDaysInMonth</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> days[] = &#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">2</span> &amp;&amp; IsLeapYear(year))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">29</span>;</span><br><span class="line">    <span class="keyword">return</span> days[month - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UpdateDateTime</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nian = time[<span class="number">0</span>] * <span class="number">1000</span> + time[<span class="number">1</span>] * <span class="number">100</span> + time[<span class="number">2</span>] * <span class="number">10</span> + time[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> yue = time[<span class="number">4</span>] * <span class="number">10</span> + time[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> ri = time[<span class="number">6</span>] * <span class="number">10</span> + time[<span class="number">7</span>];</span><br><span class="line">    <span class="type">int</span> shi = time[<span class="number">8</span>] * <span class="number">10</span> + time[<span class="number">9</span>];</span><br><span class="line">    <span class="type">int</span> fen = time[<span class="number">10</span>] * <span class="number">10</span> + time[<span class="number">11</span>];</span><br><span class="line">		<span class="type">int</span> maxDays;</span><br><span class="line">    fen++;</span><br><span class="line">    <span class="keyword">if</span> (fen &gt;= <span class="number">60</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fen = <span class="number">0</span>;</span><br><span class="line">        shi++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (shi &gt;= <span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        shi = <span class="number">0</span>;</span><br><span class="line">        ri++;</span><br><span class="line">    &#125;</span><br><span class="line">    maxDays = GetMaxDaysInMonth(nian, yue);</span><br><span class="line">    <span class="keyword">if</span> (ri &gt; maxDays)</span><br><span class="line">    &#123;</span><br><span class="line">        ri = <span class="number">1</span>;</span><br><span class="line">        yue++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (yue &gt; <span class="number">12</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        yue = <span class="number">1</span>;</span><br><span class="line">        nian++;</span><br><span class="line">    &#125;</span><br><span class="line">    time[<span class="number">0</span>] = nian / <span class="number">1000</span>;</span><br><span class="line">    time[<span class="number">1</span>] = (nian / <span class="number">100</span>) % <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">2</span>] = (nian / <span class="number">10</span>) % <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">3</span>] = nian % <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">4</span>] = yue / <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">5</span>] = yue % <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">6</span>] = ri / <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">7</span>] = ri % <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">8</span>] = shi / <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">9</span>] = shi % <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">10</span>] = fen / <span class="number">10</span>;</span><br><span class="line">    time[<span class="number">11</span>] = fen % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i,s;</span><br><span class="line">    SMG_Init();</span><br><span class="line">		s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">			<span class="keyword">if</span>(s==<span class="number">100</span>) <span class="comment">//手机测得100是2.5秒左右，100-&gt;2.5s</span></span><br><span class="line">			&#123;</span><br><span class="line">				UpdateDateTime(); </span><br><span class="line">				s=<span class="number">0</span>;</span><br><span class="line">			&#125;  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            dw = table[time[i]];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">6</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span> || i == <span class="number">5</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dw = dw + <span class="number">0x0080</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                GPIO_Write(GPIOC, dw); </span><br><span class="line">                GPIO_Write(GPIOB, ~wei[i]); </span><br><span class="line">                Delay(<span class="number">1</span>);</span><br><span class="line">                GPIO_Write(GPIOB, <span class="number">0x000</span>); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                gw = table[time[i]] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">7</span> || i == <span class="number">9</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    gw = gw + <span class="number">0x8000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                GPIO_Write(GPIOC, gw); </span><br><span class="line">                GPIO_Write(GPIOB, ~wei[i]); </span><br><span class="line">                Delay(<span class="number">1</span>);</span><br><span class="line">                GPIO_Write(GPIOB, <span class="number">0x000</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">				s++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/9.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>STM32-11-一键控制4个灯</title>
    <url>/post/20250722230031.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY PCin(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1 PBout(8)<span class="comment">//0不亮，1亮</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2 PBout(9)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3 PBout(10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED4 PBout(11)</span></span><br><span class="line">u8 id=<span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_ResetBits(GPIOB, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11);<span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">KEY_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;<span class="comment">//上拉输出</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (; count != <span class="number">0</span>; count--)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="number">5000</span>;</span><br><span class="line">        <span class="keyword">while</span> (i--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">KEY_Scan</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(KEY==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">	 Delay(<span class="number">20</span>);</span><br><span class="line">	 <span class="keyword">if</span>(KEY==<span class="number">0</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 id=id%<span class="number">4</span>;</span><br><span class="line">		 <span class="keyword">if</span>(id==<span class="number">0</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">			 LED1=<span class="number">1</span>;</span><br><span class="line">			 LED2=<span class="number">0</span>;</span><br><span class="line">			 LED3=<span class="number">0</span>;</span><br><span class="line">			 LED4=<span class="number">0</span>;</span><br><span class="line">			 <span class="keyword">while</span>(KEY==<span class="number">0</span>);</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="keyword">else</span> <span class="keyword">if</span>(id==<span class="number">1</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">			 LED1=<span class="number">0</span>;</span><br><span class="line">			 LED2=<span class="number">1</span>;</span><br><span class="line">			 LED3=<span class="number">0</span>;</span><br><span class="line">			 LED4=<span class="number">0</span>;</span><br><span class="line">			 <span class="keyword">while</span>(KEY==<span class="number">0</span>);</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="keyword">else</span> <span class="keyword">if</span>(id==<span class="number">2</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">			 LED1=<span class="number">0</span>;</span><br><span class="line">			 LED2=<span class="number">0</span>;</span><br><span class="line">			 LED3=<span class="number">3</span>;</span><br><span class="line">			 LED4=<span class="number">0</span>;</span><br><span class="line">			 <span class="keyword">while</span>(KEY==<span class="number">0</span>);</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="keyword">else</span> <span class="keyword">if</span>(id==<span class="number">3</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">			 LED1=<span class="number">0</span>;</span><br><span class="line">			 LED2=<span class="number">0</span>;</span><br><span class="line">			 LED3=<span class="number">0</span>;</span><br><span class="line">			 LED4=<span class="number">1</span>;</span><br><span class="line">			 <span class="keyword">while</span>(KEY==<span class="number">0</span>);</span><br><span class="line">		 &#125;</span><br><span class="line">		 id=id+<span class="number">1</span>;</span><br><span class="line">	 &#125;	</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LED_Init();</span><br><span class="line">		KEY_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123; </span><br><span class="line">			KEY_Scan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/10.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-12-LED灯设计与实现</title>
    <url>/post/20250722230344.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><h5 id="1-1-main-c"><a href="#1-1-main-c" class="headerlink" title="1.1 main.c"></a>1.1 main.c</h5><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY1 PCin(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY2 PCin(1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY3 PCin(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY4 PCin(3)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1 PBout(8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2 PBout(9)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3 PBout(10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED4 PBout(11)</span></span><br><span class="line">u8 k1=<span class="number">1</span>,k2=<span class="number">1</span>,k3=<span class="number">1</span>,k4=<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_ResetBits(GPIOB, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11);<span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">KEY_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;<span class="comment">//上拉输出</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (; count != <span class="number">0</span>; count--)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="number">5000</span>;</span><br><span class="line">        <span class="keyword">while</span> (i--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">KEY_Scan</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(KEY1==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">	 Delay(<span class="number">20</span>);</span><br><span class="line">	 <span class="keyword">if</span>(KEY1==<span class="number">0</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="comment">//LED1=k1;</span></span><br><span class="line">		 <span class="comment">//k1=!k1;</span></span><br><span class="line">		 <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">			 <span class="keyword">if</span>(KEY1==<span class="number">0</span>)</span><br><span class="line">				LED1=k1;</span><br><span class="line">			 <span class="keyword">else</span></span><br><span class="line">			 &#123;</span><br><span class="line">				 k1=!k1;</span><br><span class="line">				 <span class="keyword">break</span>;</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(KEY2==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">	 Delay(<span class="number">20</span>);</span><br><span class="line">	 <span class="keyword">if</span>(KEY2==<span class="number">0</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">			 <span class="keyword">if</span>(KEY2==<span class="number">0</span>)</span><br><span class="line">				LED2=k2;</span><br><span class="line">			 <span class="keyword">else</span></span><br><span class="line">			 &#123;</span><br><span class="line">				 k2=!k2;</span><br><span class="line">				 <span class="keyword">break</span>;</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(KEY3==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">	 Delay(<span class="number">20</span>);</span><br><span class="line">	 <span class="keyword">if</span>(KEY3==<span class="number">0</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">			 <span class="keyword">if</span>(KEY3==<span class="number">0</span>)</span><br><span class="line">				LED3=k3;</span><br><span class="line">			 <span class="keyword">else</span></span><br><span class="line">			 &#123;</span><br><span class="line">				 k3=!k3;</span><br><span class="line">				 <span class="keyword">break</span>;</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(KEY4==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">	 Delay(<span class="number">20</span>);</span><br><span class="line">	 <span class="keyword">if</span>(KEY4==<span class="number">0</span>)</span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">			 <span class="keyword">if</span>(KEY4==<span class="number">0</span>)</span><br><span class="line">				LED4=k4;</span><br><span class="line">			 <span class="keyword">else</span></span><br><span class="line">			 &#123;</span><br><span class="line">				 k4=!k4;</span><br><span class="line">				 <span class="keyword">break</span>;</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LED_Init();</span><br><span class="line">		KEY_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123; </span><br><span class="line">			KEY_Scan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="1-2-sys-h"><a href="#1-2-sys-h" class="headerlink" title="1.2 sys.h"></a>1.2 sys.h</h5><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SYS_H </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SYS_H  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BITBAND(addr, bitnum) ((addr &amp; 0xF0000000)+0x2000000+((addr &amp; 0xFFFFF)&lt;&lt;5)+(bitnum&lt;&lt;2))  </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM_ADDR(addr)  *((volatile unsigned long  *)(addr))  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BIT_ADDR(addr, bitnum)   MEM_ADDR(BITBAND(addr, bitnum))  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOA_ODR_Addr    (GPIOA_BASE+12)   <span class="comment">//0x4001080C </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOB_ODR_Addr    (GPIOB_BASE+12)   <span class="comment">//0x40010C0C </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOC_ODR_Addr    (GPIOC_BASE+12)   <span class="comment">//0x4001100C </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOD_ODR_Addr    (GPIOD_BASE+12)   <span class="comment">//0x4001140C </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE_ODR_Addr    (GPIOE_BASE+12)   <span class="comment">//0x4001180C </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOF_ODR_Addr    (GPIOF_BASE+12)   <span class="comment">//0x40011A0C </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOG_ODR_Addr    (GPIOG_BASE+12)   <span class="comment">//0x40011E0C </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOA_IDR_Addr    (GPIOA_BASE+8)   <span class="comment">//0x40010808 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOB_IDR_Addr    (GPIOB_BASE+8)   <span class="comment">//0x40010C08 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOC_IDR_Addr    (GPIOC_BASE+8)   <span class="comment">//0x40011008 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOD_IDR_Addr    (GPIOD_BASE+8)   <span class="comment">//0x40011408 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE_IDR_Addr    (GPIOE_BASE+8)   <span class="comment">//0x40011808 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOF_IDR_Addr    (GPIOF_BASE+8)   <span class="comment">//0x40011A08 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOG_IDR_Addr    (GPIOG_BASE+8)   <span class="comment">//0x40011E08 </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAout(n)   BIT_ADDR(GPIOA_ODR_Addr,n)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAin(n)    BIT_ADDR(GPIOA_IDR_Addr,n)    </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PBout(n)   BIT_ADDR(GPIOB_ODR_Addr,n)   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PBin(n)    BIT_ADDR(GPIOB_IDR_Addr,n)    </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCout(n)   BIT_ADDR(GPIOC_ODR_Addr,n)    </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCin(n)    BIT_ADDR(GPIOC_IDR_Addr,n)    </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PDout(n)   BIT_ADDR(GPIOD_ODR_Addr,n)    </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PDin(n)    BIT_ADDR(GPIOD_IDR_Addr,n)    </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PEout(n)   BIT_ADDR(GPIOE_ODR_Addr,n)   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PEin(n)    BIT_ADDR(GPIOE_IDR_Addr,n)   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFout(n)   BIT_ADDR(GPIOF_ODR_Addr,n)    </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFin(n)    BIT_ADDR(GPIOF_IDR_Addr,n)   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PGout(n)   BIT_ADDR(GPIOG_ODR_Addr,n)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PGin(n)    BIT_ADDR(GPIOG_IDR_Addr,n)   </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure></div>
<h5 id="1-3-sys-c"><a href="#1-3-sys-c" class="headerlink" title="1.3 sys.c"></a>1.3 sys.c</h5><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/11.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-13-中断01和9-5点亮4个灯</title>
    <url>/post/20250722231025.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x_it.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;exit.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1 PBout(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2 PBout(1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3 PBout(9)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED4 PBout(14)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY1 PCin(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY2 PCin(1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY3 PCin(10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY4 PCin(11)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">KEY_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_10 | GPIO_Pin_11;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; </span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_9 | GPIO_Pin_14;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_9 | GPIO_Pin_14); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">static</span> u8 k1 = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line0) != RESET) </span><br><span class="line">    &#123; </span><br><span class="line">        Delay(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(KEY1 == <span class="number">0</span>) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span>(k1 == <span class="number">0</span>) </span><br><span class="line">                LED1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                LED1 = <span class="number">0</span>;</span><br><span class="line">            k1 = !k1; </span><br><span class="line">        &#125;</span><br><span class="line">        EXTI_ClearITPendingBit(EXTI_Line0); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">static</span> u8 k2 = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line1) != RESET) </span><br><span class="line">    &#123; </span><br><span class="line">        Delay(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(KEY2 == <span class="number">0</span>) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span>(k2 == <span class="number">0</span>) </span><br><span class="line">                LED2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                LED2 = <span class="number">0</span>;</span><br><span class="line">            k2 = !k2; </span><br><span class="line">        &#125;</span><br><span class="line">        EXTI_ClearITPendingBit(EXTI_Line1); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">static</span> u8 k3 = <span class="number">0</span>; </span><br><span class="line">    <span class="type">static</span> u8 k4 = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line10) != RESET) </span><br><span class="line">    &#123; </span><br><span class="line">        Delay(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_10) == <span class="number">0</span>) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span>(k3 == <span class="number">0</span>) </span><br><span class="line">                LED3 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                LED3 = <span class="number">0</span>;</span><br><span class="line">            k3 = !k3; </span><br><span class="line">        &#125;</span><br><span class="line">        EXTI_ClearITPendingBit(EXTI_Line10); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line11) != RESET) </span><br><span class="line">    &#123; </span><br><span class="line">        Delay(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_11) == <span class="number">0</span>) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span>(k4 == <span class="number">0</span>) </span><br><span class="line">                LED4 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                LED4 = <span class="number">0</span>;</span><br><span class="line">            k4 = !k4; </span><br><span class="line">        &#125;</span><br><span class="line">        EXTI_ClearITPendingBit(EXTI_Line11); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI_Config</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    EXTI_InitTypeDef EXTI_InitStructure; </span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure; </span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); </span><br><span class="line"></span><br><span class="line">    GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource0); </span><br><span class="line">    GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource1); </span><br><span class="line">    GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource10); </span><br><span class="line">    GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource11); </span><br><span class="line"></span><br><span class="line">    EXTI_InitStructure.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line10 | EXTI_Line11; </span><br><span class="line">    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; </span><br><span class="line">    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; </span><br><span class="line">    EXTI_InitStructure.EXTI_LineCmd = ENABLE; </span><br><span class="line">    EXTI_Init(&amp;EXTI_InitStructure); </span><br><span class="line"></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0); </span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn; </span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0x0</span>; </span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0x0</span>; </span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; </span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure); </span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn; </span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure); </span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; </span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    LED_Init(); </span><br><span class="line">    KEY_Init(); </span><br><span class="line">    EXTI_Config(); </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/12.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-14-中断9_15方式的声光报警器</title>
    <url>/post/20250722231232.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x_it.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;exit.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;alarm.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> u8 alarm_enabled = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    LED_Init(); </span><br><span class="line">    KEY_Init(); </span><br><span class="line">    EXTI_Config(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Alarm();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/13.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-2-LED灯闪烁</title>
    <url>/post/20250722223221.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span> </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span> <span class="comment">//????</span></span><br><span class="line">&#123; </span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> i; </span><br><span class="line"> <span class="keyword">for</span>(;count!=<span class="number">0</span>;count--)</span><br><span class="line">	&#123;</span><br><span class="line">		i=<span class="number">5000</span>; </span><br><span class="line">		<span class="keyword">while</span>(i--); </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); </span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; </span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"> GPIO_SetBits(GPIOB,GPIO_Pin_8); </span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line"> &#123; </span><br><span class="line"> GPIO_ResetBits(GPIOB,GPIO_Pin_8); </span><br><span class="line"> Delay(<span class="number">100</span>); </span><br><span class="line"> GPIO_SetBits(GPIOB,GPIO_Pin_8); </span><br><span class="line"> Delay(<span class="number">100</span>); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/1.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-3-两个小灯不同频率的闪烁</title>
    <url>/post/20250722223437.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i; </span><br><span class="line">    <span class="keyword">for</span>(;count!=<span class="number">0</span>;count--) </span><br><span class="line">    &#123; </span><br><span class="line">        i = <span class="number">5000</span>; </span><br><span class="line">        <span class="keyword">while</span>(i--); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_8;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_5 | GPIO_Pin_8);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">			<span class="keyword">if</span>(i%<span class="number">6</span>!=<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">        GPIO_ResetBits(GPIOB, GPIO_Pin_5); </span><br><span class="line">        Delay(<span class="number">10</span>);</span><br><span class="line">        GPIO_SetBits(GPIOB, GPIO_Pin_5); </span><br><span class="line">        Delay(<span class="number">10</span>);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">        GPIO_ResetBits(GPIOB, GPIO_Pin_8);<span class="comment">//di</span></span><br><span class="line">        Delay(<span class="number">100</span>); </span><br><span class="line">        GPIO_SetBits(GPIOB, GPIO_Pin_8); <span class="comment">//gao</span></span><br><span class="line">        Delay(<span class="number">100</span>); </span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/2.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-4-LED灯循环点亮控制</title>
    <url>/post/20250722223743.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span> </span></span><br><span class="line"><span class="type">uint16_t</span> temp, i; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span></span><br><span class="line">&#123; </span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> i; </span><br><span class="line"> <span class="keyword">for</span>(;count!=<span class="number">0</span>;count--) </span><br><span class="line"> &#123; </span><br><span class="line"> i=<span class="number">5000</span>; </span><br><span class="line"> <span class="keyword">while</span>(i--); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); </span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = </span><br><span class="line"> GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; </span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line"> &#123; </span><br><span class="line"> temp=<span class="number">0x0100</span>; </span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) </span><br><span class="line"> &#123; </span><br><span class="line"> GPIO_Write(GPIOB,~temp); </span><br><span class="line"> Delay(<span class="number">100</span>); </span><br><span class="line"> temp=temp&lt;&lt;<span class="number">1</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/3.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-5-跑马灯</title>
    <url>/post/20250722224104.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> temp, i, j;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(; count != <span class="number">0</span>; count--)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="number">5000</span>;</span><br><span class="line">        <span class="keyword">while</span>(i--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); </span><br><span class="line"> </span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = <span class="number">0x03FF</span>; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; </span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123; </span><br><span class="line"> GPIO_SetBits(GPIOB, <span class="number">0x0FFFF</span>); </span><br><span class="line"> temp = <span class="number">0x0001</span>; </span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) </span><br><span class="line"> &#123; </span><br><span class="line"> GPIO_ResetBits(GPIOB, temp); </span><br><span class="line"> Delay(<span class="number">100</span>); </span><br><span class="line"> temp =( temp&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> temp = <span class="number">0x0FE00</span>; </span><br><span class="line"> <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++) </span><br><span class="line"> &#123; </span><br><span class="line"> GPIO_SetBits(GPIOB, temp); </span><br><span class="line"> Delay(<span class="number">100</span>); </span><br><span class="line"> temp = (temp&gt;&gt;<span class="number">1</span>)+ <span class="number">0x8000</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/4.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-6-跑马灯（时钟使能）</title>
    <url>/post/20250722224331.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span> </span></span><br><span class="line"><span class="type">uint16_t</span> temp, i,temp1,j; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span></span><br><span class="line">&#123; </span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> i; </span><br><span class="line"> <span class="keyword">for</span>(;count!=<span class="number">0</span>;count--) </span><br><span class="line"> &#123; </span><br><span class="line"> i=<span class="number">5000</span>; </span><br><span class="line"> <span class="keyword">while</span>(i--); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line"> RCC-&gt;APB2ENR|=<span class="number">1</span>&lt;&lt;<span class="number">3</span>;</span><br><span class="line">GPIOB-&gt;CRL&amp;=<span class="number">0X00000000</span>;	 </span><br><span class="line">GPIOB-&gt;CRH&amp;=<span class="number">0XFFFFFF00</span>;	</span><br><span class="line">GPIOB-&gt;CRL|=<span class="number">0X33333333</span>;	</span><br><span class="line">GPIOB-&gt;CRH|=<span class="number">0X33333333</span>;</span><br><span class="line">GPIOB-&gt;ODR|=<span class="number">0X03ff</span>;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line"> &#123; </span><br><span class="line"> <span class="comment">//GPIO_SetBits(GPIOB, 0xFFFF); </span></span><br><span class="line">	 GPIOB-&gt;ODR=~<span class="number">0X0FFFF</span>;</span><br><span class="line"> temp = <span class="number">0x0001</span>; </span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++) </span><br><span class="line"> &#123; </span><br><span class="line"> <span class="comment">//GPIO_ResetBits(GPIOB, temp);</span></span><br><span class="line">GPIOB-&gt;ODR=~temp;	 </span><br><span class="line"> Delay(<span class="number">50</span>); </span><br><span class="line"> temp =( temp&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> temp = <span class="number">0x0000</span>; </span><br><span class="line"> <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) </span><br><span class="line"> &#123; </span><br><span class="line"> <span class="comment">//GPIO_SetBits(GPIOB, temp); </span></span><br><span class="line">	 GPIOB-&gt;ODR=temp;</span><br><span class="line"> Delay(<span class="number">50</span>); </span><br><span class="line"> temp = (temp&gt;&gt;<span class="number">1</span>)+ <span class="number">0x8000</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/5.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-7-数码管静态显示0到20</title>
    <url>/post/20250722224625.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span> </span></span><br><span class="line"><span class="type">uint16_t</span> table[]=&#123;<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>&#125;; </span><br><span class="line"><span class="type">uint16_t</span> disp[<span class="number">2</span>]; </span><br><span class="line"><span class="type">uint16_t</span> temp,i;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span> </span><br><span class="line">&#123; </span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> i; </span><br><span class="line"> <span class="keyword">for</span>(;count!=<span class="number">0</span>;count--)</span><br><span class="line">	&#123;</span><br><span class="line">		i=<span class="number">5000</span>; </span><br><span class="line">		<span class="keyword">while</span>(i--); </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); </span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = <span class="number">0xffff</span>; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; </span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line"> GPIO_Init(GPIOC, &amp;GPIO_InitStructure); </span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line"> &#123; </span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;i++) </span><br><span class="line"> &#123; </span><br><span class="line"> disp[<span class="number">1</span>]=table[i/<span class="number">10</span>]; </span><br><span class="line"> disp[<span class="number">0</span>]=table[i%<span class="number">10</span>]; </span><br><span class="line"> temp=(disp[<span class="number">1</span>]&lt;&lt;<span class="number">8</span>)|(disp[<span class="number">0</span>]&amp;<span class="number">0x0ff</span>); </span><br><span class="line"> GPIO_Write(GPIOC,temp); </span><br><span class="line"> Delay(<span class="number">100</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/6.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-8-数码管显示0-9999</title>
    <url>/post/20250722224919.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span> </span></span><br><span class="line"><span class="type">uint16_t</span> table[]=&#123;<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>&#125;; </span><br><span class="line"><span class="type">uint16_t</span> disp[<span class="number">4</span>]; </span><br><span class="line"><span class="type">uint16_t</span> temp,i,temp2,a,b,c;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span> </span><br><span class="line">&#123; </span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> i; </span><br><span class="line"> <span class="keyword">for</span>(;count!=<span class="number">0</span>;count--)</span><br><span class="line">	&#123;</span><br><span class="line">		i=<span class="number">5000</span>; </span><br><span class="line">		<span class="keyword">while</span>(i--); </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); </span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = <span class="number">0xffff</span>; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; </span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"> GPIO_Init(GPIOC, &amp;GPIO_InitStructure); </span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure); </span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line"> &#123; </span><br><span class="line">	 <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">9999</span>;i++) </span><br><span class="line">	 &#123; </span><br><span class="line">		 a=i/<span class="number">1000</span>;</span><br><span class="line">		 b=i/<span class="number">100</span>-a*<span class="number">10</span>;</span><br><span class="line">		 c=i/<span class="number">10</span>-a*<span class="number">100</span>-b*<span class="number">10</span>;</span><br><span class="line">		 disp[<span class="number">3</span>]=table[a]; </span><br><span class="line">		 disp[<span class="number">2</span>]=table[b] ; </span><br><span class="line">		 disp[<span class="number">1</span>]=table[c]; </span><br><span class="line">		 disp[<span class="number">0</span>]=table[i%<span class="number">10</span>]; </span><br><span class="line">		 temp=(disp[<span class="number">1</span>]&lt;&lt;<span class="number">8</span>)|(disp[<span class="number">0</span>]&amp;<span class="number">0x0ff</span>); </span><br><span class="line">		 GPIO_Write(GPIOC,temp); </span><br><span class="line">		 temp2=(disp[<span class="number">3</span>]&lt;&lt;<span class="number">8</span>)|(disp[<span class="number">2</span>]&amp;<span class="number">0x0ff</span>); </span><br><span class="line">		 GPIO_Write(GPIOB,temp2);</span><br><span class="line">		 Delay(<span class="number">100</span>); </span><br><span class="line">	 &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/7.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-9-6个数码管扫描显示654321</title>
    <url>/post/20250722225334.html</url>
    <content><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (; count != <span class="number">0</span>; count--)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="number">5000</span>;</span><br><span class="line">        <span class="keyword">while</span> (i--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SMG_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = <span class="number">0x00ff</span>;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = <span class="number">0x003f</span>;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> table[] = &#123;<span class="number">0xc8</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;;</span><br><span class="line"><span class="type">uint16_t</span> wei[] = &#123;<span class="number">0x0fe</span>,<span class="number">0x0fd</span>,<span class="number">0x0fb</span>,<span class="number">0x0f7</span>,<span class="number">0x0ef</span>,<span class="number">0x0df</span>,<span class="number">0xff</span>,<span class="number">0xff</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SMG_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">7</span>;i++) </span><br><span class="line">			  &#123; </span><br><span class="line">			   GPIO_Write(GPIOB,wei[i<span class="number">-1</span>]); </span><br><span class="line">			   GPIO_Write(GPIOC,table[i]);</span><br><span class="line">			   Delay(<span class="number">50</span>); </span><br><span class="line">			   GPIO_Write(GPIOB,<span class="number">0x0ff</span>); </span><br><span class="line">			   Delay(<span class="number">50</span>); </span><br><span class="line">			  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-模拟图"><a href="#2-模拟图" class="headerlink" title="2.模拟图"></a>2.模拟图</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250722/8.png"
                      alt="a"
                ></p>
<hr>
<p>代码下载链接（123云盘）：<a class="link"   href="https://www.123684.com/s/wFuijv-i8Zgh" >https://www.123684.com/s/wFuijv-i8Zgh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑配置佳能打印机L11121E</title>
    <url>/post/20250725144519.html</url>
    <content><![CDATA[<h2 id="一、前提条件"><a href="#一、前提条件" class="headerlink" title="一、前提条件"></a>一、前提条件</h2><p>博主最近买了一台二手的佳能L11121E的打印机，以前没用过这个牌子的打印机，以前用的打印机插电脑上都直接识别出来了，这个他识别不出来。（控制面板-&gt; 设备与打印机）如图所示:<br>(备注：博主已经解决了这个问题，当时没有截图，解决完任务后想写一篇博客帮助更多有需要的人，下图是在网上找到的出现同样问题的图片)，就是在最下面的未指定一栏出现了打印机设备，这时候证明打印机设备连接到电脑上了，但是需要一个驱动程序。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250725/1.png"
                      alt="a"
                ></p>
<h2 id="二、检查服务是否打开"><a href="#二、检查服务是否打开" class="headerlink" title="二、检查服务是否打开"></a>二、检查服务是否打开</h2><h5 id="①鼠标右键点击“此电脑”，然后点击“管理“"><a href="#①鼠标右键点击“此电脑”，然后点击“管理“" class="headerlink" title="①鼠标右键点击“此电脑”，然后点击“管理“"></a>①鼠标右键点击“此电脑”，然后点击“管理“</h5><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250725/2.png"
                      alt="a"
                ></p>
<h5 id="②在”服务“中确保下图所示服务已经打开"><a href="#②在”服务“中确保下图所示服务已经打开" class="headerlink" title="②在”服务“中确保下图所示服务已经打开"></a>②在”服务“中确保下图所示服务已经打开</h5><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250725/3.png"
                      alt="a"
                ></p>
<h2 id="三、如果该服务是打开的，说明是缺少驱动，需要下载驱动"><a href="#三、如果该服务是打开的，说明是缺少驱动，需要下载驱动" class="headerlink" title="三、如果该服务是打开的，说明是缺少驱动，需要下载驱动"></a>三、如果该服务是打开的，说明是缺少驱动，需要下载驱动</h2><h5 id="①看自己的打印机是什么型号"><a href="#①看自己的打印机是什么型号" class="headerlink" title="①看自己的打印机是什么型号"></a>①看自己的打印机是什么型号</h5><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250725/4.png"
                      alt="a"
                ><br>比如说我的这个打印机型号是L11121E，然后就可以去官网下载该型号的驱动程序。</p>
<h5 id="②到对应官网上下载驱动"><a href="#②到对应官网上下载驱动" class="headerlink" title="②到对应官网上下载驱动"></a>②到对应官网上下载驱动</h5><p>比如说我这个型号：佳能驱动下载链接（<a class="link"   href="https://www.canon.com.cn/supports/download/sims/search/index" >下载与支持 – 服务与支持 - 佳能（中国）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）<br>（备注：如果你和我这个型号L11121E一样，你会搜不到这个型号的驱动，所以你可以下载LBP3000驱动就可以了，博主这里下载的是LBP3000，但是网上也有部分人下载的是LBP2900）<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250725/5.png"
                      alt="a"
                ><br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250725/6.png"
                      alt="a"
                ></p>
<h5 id="③把下载的驱动运行起来"><a href="#③把下载的驱动运行起来" class="headerlink" title="③把下载的驱动运行起来"></a>③把下载的驱动运行起来</h5><p>一般在你没有改变下载位置的情况下可以在“此电脑”-&gt;“下载”中看到你下载的驱动，然后直接运行起来就行了，然后在该位置就会出现一个文件夹，就是下图红色方框下面出现的那个新的文件夹。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250725/7.png"
                      alt="a"
                ></p>
<h5 id="④打开新出现的文件夹"><a href="#④打开新出现的文件夹" class="headerlink" title="④打开新出现的文件夹"></a>④打开新出现的文件夹</h5><p>进去文件夹后，“x64”文件夹里面，运行setup程序<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250725/8.png"
                      alt="a"
                ></p>
<h5 id="⑤按照屏幕上指示操作就行了"><a href="#⑤按照屏幕上指示操作就行了" class="headerlink" title="⑤按照屏幕上指示操作就行了"></a>⑤按照屏幕上指示操作就行了</h5><p>这一步就跟着屏幕操作就行了，我解决问题的时候没截图，不想卸了重装了，大致过程就是这样：<br>**同意协议-&gt;插上usb</p>
<p>**操作结束界面就可以看见“未指定”处就没有刚才那个打印机了，在上边打印机处，可以看到我们已经成功了</p>
<hr>
<p>佳能官网步骤：<a class="link"   href="https://oip.manual.canon/USRMA-2852-zz-SS-zhCN/contents/dwi-inst-dl.html" >从佳能网站下载后安装 - Canon - Windows 打印机驱动程序 - 安装指南<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>解决错误</category>
      </categories>
      <tags>
        <tag>解决错误</tag>
      </tags>
  </entry>
  <entry>
    <title>7月26号日记--有点内耗</title>
    <url>/post/20250726233447.html</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3faeb2ba836f48bb7e33e4e1fdc138e1c70d11d8a0a9e3ec6de4df946ea501c5">d5a250a6880d98c21c2687900615c59200d352abced21b1c1b6bffac82edeb0fc183652384c4e93b65c5c2678337e5a76300c7b46c24a7da2f59ea09ade2549f7754d15cb732db96fb06dd93793988887ef20e21daa223e419b50a708e0418218abde8faf22f9d86432a7429aab9f5b94b054deb07fe934d2f854b7bbff4976bbf6bf2bd8bc73dcc52e3d3b712ef9779b8ee7ff053948ae5d11c89809a0a5895b57b41b710e6475fad83f764ee5144cd1d38f937fe0cf23dc70fca8039439100ccb67997f67b25ec32b7402085b781401916f3724f53245bad256c1d28e811bd4e2d6378ff5562197e00c0aad3fe27f7872e63a693a0181a7a7179d37088c4268a5b3c754301ee0c98ece259ba5f938a391caab3e9670418feb137973f363af16af4f5443a7054c8aa926c81d352ca853697ce953158cbb1b65738947b74db1ed23785a6cb14b6d5d1cc2a350b4e034e6619a202bb23c57701b068b13572236f0da7a79623a3dc442a53afceb1129a06a900bd1693a47cf80f9970aea858cbb5387eec7371ee60ad15a9ed3dedfdf4e0b0f049ffad4789c2edf529c55fe0e24e98eed3e09224edc20e6c7a84d9bd3fc2a0a554c6ee55fc5c93718af1e5c6e4ae4b94e1c791982c22fe9caa08af7042520aaf90a9f7743ff8ad4d784173478a1996fa8cb603e27b13be32fa46c4be1e029d88a3669977e1f43d7cb0bd8b81e73c59438e5578fe4d83a7e7a4e4a6fc712a6e0202cb1a36d92f94465ce2ca7cf740bd332ae56c1c0182d028fb4f780aea476d84ca39d1c6263d01d646e70ef1cf287fbcdf3fb678e086bb3fdaa153b3b7948b488610a04aff0572604e63089fe2b47cff0022fc20ca4d47a75482da56e7144a64eb417b50b5e174b8f98a973462f88768380704f85f756bd7d2a2fd2afe7f4aa2c2c609affaabf9543c9b7f5db1ba75f9a6377d8f152184038d6a37315be72b2a8207b4c2f4e102ccf95c9bfc90ae211cfc7debecdb9a2a65efb144dc33717703d051876e792a57b9a0d2680e494ee9c6cebcc466c65e2c09d2ebb62a2b994815cbdcb6f113bf3f6f1ef6de3b32a162fd96e483b07c1bb2d8fbd595ce4e58f8596058c973c47fd4f7ec1bde5768a73832a6261fc55189bb864388f99786b22c43ac22d07de0d534cb65fc7089557f4f9a19d5950501689ab39559a8b5930a93ae8f9d356ebc7810248092162a9a15805582bedcef08c4f33a55b5c8b0ef281bd76b8b2d50063b432f05d556067b1d368a80341116eb9fe4f529185b3bf4eb3603ab49353ba977c1bfae5bbe2c5b2b12f3578b27157e76709d468679a3387b5f94ee2346afa8e40ee61d4c718e3da2a2fb3874ff7892e761e0a7dd2889cc8e60019512746b7846c019ee3d9493ab6ace1fe8e773021c44a17bb5dc0b70fad48ce686bc5eca24f90b1c115c39f5ddd8af04158249333951ff07537a708b344efaf6b47b4c4e001bf795fa2b35512976088f0b7cf9189a0323af72a82b1b82e0686038e5c4162395b4d3537ed7584d45c3e6f7efb09c73fa1965d7ddf61b68c8a9d26fdf17118a048ffc03a639a246fcfe54148fa6502705dacf2979bf327bd486ef1f87cbbbd43c66b563fb6eaaed0e3c75041a758ab5550c603efb2028bef8f339e7163afefa8e9d0c2f5f06efe739140d88c3e4b1defeb424b5e159a946edc3fe8ddb72bf245f27d345b96690c0823c6d28201e2f1e3a11ec7b0a192e9abd34a65fef062de539c09ae40b8f9b0e07744e01f595bc821888731960a62d4bd48bbb94bd7a187cc4d61a805f1ac346ff8d1113109b40d826e26b0afdbfb677808d08cfca20b719e616b681ae3c074782dd59041a9b8263bffdd046fcb410f46dcbc142aa676203705527d7580cb71b84c3ba3a5ff0c231451015e2ea90a58aee6c31660fbc535b29cbbb9cdac2e24c64a9e562999a143f708d1cc15c2b77bcfbb3ce118471b777498c9ff6221c3850613eb072545cb24045422b4e33f094119f769a3c246bbd16ae7be4ce89e395623a1c64b363abbbadd3a5f53b869d7fef4ddaa45142a0dc130f0c26fd75c3c59272448368f2e1ca8b57b2a59cf9c78afacf244ac6d8315970d479936bd972e4730dc356a6751982196ed4fb7ff1a2aa2b258640a5931cc1679ea084fa03101a24bec8f78f4735c5aef272b1e50b712ed80adc19195fff2e5467291fc2cf0ccee7357d74d53bf00704e1033aad27aeb3fbc33b163081a6cf23f1f5db9a6675102b46423db79adce48b6bc384461d463e4eee2eda46d74206af321863f7c5b41468ffbebb5aa759a1fb0c057c63f3aa8a94265663b311a4fded1c4da8d66eb173becbe99f3cc901b070ab85970080516aeae6c046760dd00ce15a6f3ef48acdd68fa559b31e39b35f7d19ee95a81c89a35d43b6f53ed2b9ece76003ace77bf08a30ca96942f7ad4dc848c9b0bcd2a2bf24ad118b0b86459bd8db513d8bb3a8536b570fe114a8192947169d10ea49a5f5b7a66e3d2182d7afb2631641e0124cfcdcf7c6ae5b5ff540645682892bc4aed1e1fc15624bfe9e8fb390ba210daa211bab4fe1db4293af7f15584288a6d45f67fc76414b6706e74adac4ab5ae91cab7f92b5266d2816fc94de1feae6ebcfaeb2e736df54382a9c96c1e241d6d311dbe311cf445712f4115300959f68f76f116a429016f7ee475762f2439fc1564ddbd77688d14c3508acab0d4a2d089ec1f6076362e847df4cb272c5f3ee175f3fcf8ae27acb151cf1d3b038f2a3504834d177382490150508f968fa39dd00ea8968e171f1ceb7938ac525b15ce8617ec1edb0af57e54262de0ec1a024f16e5d750aee7018074c672ef26d2deacdb8bf4056406a2494c05c602e81ce3332d29db43e50efee371b7f3027d00bc49c490e25a617ba8aab9183e070598bf0f7f4eb8aca14a277aaf094a3afa130cb3653b56342a89ee73ba0ac415645c584fe6f513835b0d3b338c856be966a86be83d79d07a1fffe50c3b1102bf5c147bc69ee95dde8f7550b446b19c48ced80c6d95b61f4a74fb94cd8b96d8b24feca837bf9f3a203d2cc28cd15acc0030d3bbea97577818cfd7d714a094835bccc5cc862c54656f1ccbc05bec211bcd45dba73ff48c0bd78f326fe63706eb9a538c17a1bee731db24b096069bac3c0323a43e7d1d6c6dc1e5d4355f411beb06565dd4687d06781f2572376c872102daee6c1479f8490f7f71ee8b2439babf5c719aa53baf077ed152cf1bb51695f957e06e21fd12c96c5bfc126e30222a46fec8abcb61575a16e8de1652e488aacf4512373483ea71872b83bfb91f1f14a6e79636d620200549bb3e68a05b876dfdb9f2ec741b622eff3a6de67c3c1635b93ea676174e5ea32f02000e5034f8cdebab70fc9069cadf8d3ff63be0b490d93328532d02aadd293c2c064ac23711b51d8ba22d3e067ab0efbb9f6c578cfd0dfb466e2d2f394ad79fc6f6eb6a50ef3c69e1414643b0a533081ad1819d89e1b07fb3094a549cae6bff4ec857a858698c411c9c92bec6363090de6f08085fbb2239503e3e2dbade9c5cecf507122df520f09a5276073e3b7f5151564b7513d96c497c3670d67699f084ab6441609e1bb1d3e9f6f83ba666292d91f10494cae66d502cc71b05a06e38ecd3fa632200230f8e9f4631628ce054e047700823e03f0893b1e6a912063139ccb5e96ac765ffb8751775cfc9ba71c839df23e1a924ed2a44a87b3fd6edffcd713e2589245215d48855a606ccd9cb7be29103864508da9ae3309fe8d0b11088a7bb68b142bd2a0ab1addbe42a50c1543e0666b198813fbabcd10ebd3beb57fbfd995937854f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>答案之书</title>
    <url>/post/20250730001023.html</url>
    <content><![CDATA[<h2 id="电子版答案之书"><a href="#电子版答案之书" class="headerlink" title="电子版答案之书"></a>电子版答案之书</h2><p>最近总是莫名其妙的自我内耗，给自己写了一个1-100的答案之书，希望能够缓解自己的不开心，分享给大家，有需要的话可以看一下</p>
<p>网址：<a href="https://lemon2003.github.io/answerbook/">答案之书</a><br><a href="https://lemon2003.github.io/answerbook/">https://lemon2003.github.io/answerbook/</a><br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250730/1.png"
                      alt="a"
                ></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>琐事</tag>
      </tags>
  </entry>
  <entry>
    <title>一份很真实的简历</title>
    <url>/post/20250808080808.html</url>
    <content><![CDATA[<h1 id="✨✨个人简历✨✨"><a href="#✨✨个人简历✨✨" class="headerlink" title="✨✨个人简历✨✨"></a>✨✨个人简历✨✨</h1><h2 id="一、个人信息"><a href="#一、个人信息" class="headerlink" title="一、个人信息"></a>一、个人信息</h2><p><strong>姓名</strong>：张雨蒙</p>
<p><strong>联系方式</strong>：15617888906 | <a class="link"   href="mailto:&#49;&#x35;&#54;&#49;&#55;&#56;&#x38;&#x38;&#57;&#48;&#54;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;" >15617888906@163.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> （微信同手机号）</p>
<p><strong>出生年月</strong>：2003 年 11 月</p>
<p><strong>政治面貌</strong>：预备党员</p>
<p><strong>籍贯</strong>：河南省郑州市</p>
<p><strong>个人博客</strong>：<a href="https://lemon2003.github.io/">lemon2003.github.io</a></p>
<blockquote>
<p>这份简历是一份很真实的简历，是我将我的申请研究生的简历都细节的分析一下，讲述实际情况的简历，因为申请研究生的简历格式和排版的限制，我不能将我的最真实的情况呈现给您，所以我只能在我的博客中，将我的简历细化，完整的向您讲述我的真实情况，该简历仅作为我研究生申请使用，不做其他用处。</p>
</blockquote>
<h2 id="二、教育背景"><a href="#二、教育背景" class="headerlink" title="二、教育背景"></a>二、教育背景</h2><p><strong>河南科技大学</strong><br>计算机科学与技术专业 | 2022.09 - 至今</p>
<ul>
<li><p><strong>GPA</strong>：4.44&#x2F;5.0，专业综合排名第 1</p>
</li>
<li><p><strong>主修课程</strong>：  </p>
<ul>
<li>高级语言程序设计 A（C 语言）：95 分  </li>
<li>数据结构课程设计：95 分  </li>
<li>面向对象程序设计 A（Java）：95 分  </li>
<li>Web 开发技术：95 分  </li>
<li>专业综合课程设计一（前端类）：97 分  </li>
<li>操作系统原理与应用（Linux）：97 分  </li>
<li>移动互联网开发技术：98 分  </li>
<li>计算机组成原理：98 分  </li>
<li>嵌入式系统：99 分  </li>
<li>嵌入式系统课程设计：100 分</li>
</ul>
</li>
<li><p><strong>英语能力</strong>：通过大学英语四级考试</p>
</li>
</ul>
<blockquote>
<p>我知道我的英语水平比较差劲，我的英语基础很一般，但是我会一直学习的，我会好好提升我的英语水平的，我有在每天背单词，做阅读理解，我相信一定会提升的，我四级是一次就过的，但是6级已经考了4次了，我也问过我们老师，我们老师给我做了分析，他说能一次性过四级，说明我有一定的基础，但是不多，所以我需要加倍努力去学习，才能通过六级，经过我老师给我的分析，我的主要失分点就是听力与写作，我的六级阅读分数在185左右，属于中上游，但是听力和写作分数较低，需要多磨耳朵，多练习写作，所以我以后会经常练习写作和听力，争取早日通过六级考试。</p>
</blockquote>
<h2 id="三、科研竞赛"><a href="#三、科研竞赛" class="headerlink" title="三、科研竞赛"></a>三、科研竞赛</h2><h3 id="（一）2024-年大学生创新创业大赛"><a href="#（一）2024-年大学生创新创业大赛" class="headerlink" title="（一）2024 年大学生创新创业大赛"></a>（一）2024 年大学生创新创业大赛</h3><ul>
<li><strong>获奖等级</strong>：国家级金奖</li>
<li><strong>担任角色</strong>：副队长兼主讲人</li>
<li><strong>工作职责</strong>：负责项目 PPT 制作、素材收集与整理、讲稿撰写及现场展示</li>
<li><strong>项目历程</strong>：  <ul>
<li>大一下学期提出参赛意向，加入学长项目团队，跟随收集资料并学习相关知识与技能，积累初步经验。  </li>
<li>大二上学期正式接手项目，全面负责团队的组织协调与项目推进工作。  </li>
<li>大二暑假留校备赛，与团队成员共同攻克技术难题，反复优化项目方案。  </li>
<li>大三上学期赴上海交通大学参加国赛，凭借扎实的专业基础与出色的现场发挥，最终荣获国家级金奖，为校争光。</li>
</ul>
</li>
</ul>
<blockquote>
<p>说实话，这个比赛是我打过最累的一个比赛，我花了几乎两年时间，我在上大学之前就查过了大学生最重要的比赛，第一个就是这个比赛，所以当时我就渴望参加一场这个比赛，这也是为什么我有许多比赛都止步校一但没有进入省赛的原因。</p>
</blockquote>
<blockquote>
<p>打这个比赛确实是最耗时的一个比赛，我起初和老师提出要参加这个比赛时，老师就和我说这个比赛特别累、耗时特别长，如果要是我确定想参加的话，就跟着他名下的一个项目学习，当时那个项目，学长已经做得很好了，我跟着学长学剪辑、学排版、学摄影、学文案攥写等等，我跟着他们团队到处去拜访专家，因为他们团队已经报过名，成员都已经确定好了，所以我跟着他学习的那一年，获奖证书上并没有我的名字，换句话说我只是跟着他去学习，但确实是干了特别多的活😭。虽然很难受吧，但是好在学会了很多东西，也为我后续跟进项目积累了很多的经验。</p>
</blockquote>
<blockquote>
<p>也是因为前期和学长在一起积累的经验，在第二年，我就作为主要负责人接手了项目，其实起初的时候并不能算是接手，因为我是后加入的，换句话说，我和他们都不是一个专业的，我是向我们老师提出的申请，我们老师把我塞进他们组了，而他组本来在这个学长走后，会由原来的副队长接收项目继续打，而我只能算是新加入的，所以我算是一个变量，而我又不甘于落后，我和老师申请我和我的队员再组成一队，老师就同意了，后来校赛的时候，我们团队无论是在讲解还是答辩方面，分数都比另一队好一些，老师就把另一队并入我们这一队中，因此我成了项目的主要负责人，但是我们的项目是由那位学长创建的，我们尊重项目作者，所以在证书上，我的名字在第二位，但是该项目的任务都是由我主力完成。</p>
</blockquote>
<h3 id="（二）第十届全国大学生物理实验竞赛"><a href="#（二）第十届全国大学生物理实验竞赛" class="headerlink" title="（二）第十届全国大学生物理实验竞赛"></a>（二）第十届全国大学生物理实验竞赛</h3><ul>
<li><strong>获奖等级</strong>：国家级二等奖</li>
<li><strong>担任角色</strong>：队长兼主讲人</li>
<li><strong>工作职责</strong>：主导项目 PPT 制作、网页搭建：<a href="https://lemon2003.github.io/phy/">金属线膨胀系数计算</a>、素材搜集以及讲稿撰写，同时负责视频拍摄与剪辑</li>
<li><strong>项目历程</strong>：  <ul>
<li>大二上学期因对 “教学结合” 讲课方式的深刻理解与独到见解，主动申请讲课，由此获得老师关注与青睐。  </li>
<li>大二暑假应老师邀请，全身心投入到竞赛准备中，从选题调研到实验设计，从数据收集到结果分析，每一个环节都倾注了大量心血与汗水。  </li>
<li>大三上学期，凭借团队成员的默契配合与扎实的专业功底，在激烈的竞争中脱颖而出，斩获国家级二等奖，充分展现了自身的创新思维与实践能力，也为学校赢得了荣誉。</li>
</ul>
</li>
</ul>
<blockquote>
<p>当时接这个比赛是我们老师找的我，我因为”教学结合“的讲课计划，主动上台讲课，老师说我逻辑清晰，条理清楚，讲的很好。（当然啦，上了大学后，我一直在慢慢转变自己，从以前的”i”人，变成了一个“e”人，哈哈哈）然后老师在第二年的这个比赛开始的时候，就要邀请我加入，然后我就爽快的同意啦。哈哈哈😁😁😁😁</p>
</blockquote>
<blockquote>
<p>但是还是要说清楚，这个比赛确实当时和我“互联网+”比赛训练时间上有些冲突，虽然当时大家相互合作，完成了任务并取得国二的奖项，但是这个比赛我相信如果时间充裕的话我可以做的更好。<br>因为当时我原本的计划是打算直接做成一个小游戏似的网站，结合趣味性，但是当时时间就很急，最后只是简单的做了一个计算的表格，方便处理实验数据。</p>
</blockquote>
<blockquote>
<p>当时这个比赛选题的时候，我们老师通过分析历年获奖情况，为我们提供了多个主题。作为团队队长，我需要确定最终的主题，而队员们都没有什么特别倾向的主题，均表示听从我的安排。当时，我查阅了大量资料，在多个主题之间反复斟酌，十分纠结，唯恐所选主题不够理想。为此，我不仅在网上查找以往比赛的视频，学习获奖团队的讲解，还阅读了许多相关文献。直至半个月后，我们才最终确定了主题。确实挺晚的，我们是我们学校最晚确定主题的一队😰，这个也确实怪我，我有一点”选择困难症“（可能说少了，我其实选择困难挺严重的，其实主要是想的很多，我会尽量的考虑到所有未来可能发生或面临的问题，所以才会选择很困难。）当时确实是反复斟酌主题，寻找可以创新的点，花费的时间比较长。</p>
</blockquote>
<h3 id="（三）中国大学生计算机设计大赛"><a href="#（三）中国大学生计算机设计大赛" class="headerlink" title="（三）中国大学生计算机设计大赛"></a>（三）中国大学生计算机设计大赛</h3><ul>
<li><strong>获奖情况</strong>：连续两年荣获国家级三等奖</li>
<li><strong>担任角色</strong>：队长兼主讲人</li>
<li><strong>工作职责</strong>：从大二上学期确定参赛主题到大二暑假赴沈阳东北大学参加国赛，全程主导项目策划与实施，负责产品设计、PPT 制作、讲稿撰写以及现场展示以及现场答辩等关键环节</li>
<li><strong>项目成果</strong>：在首次参赛取得国家级三等奖的基础上，次年再次参赛，获的国家级三等奖。</li>
</ul>
<blockquote>
<p>这个比赛其实对我来说意义挺大的，我参加第十七届的时候，什么都不会，就是凭借一枪热血，说干就干，为啥说意义很大呢，因为第十七届的比赛是国三，是我第一个国奖证书，是大二的暑假才拿到，这个证书对我来说真的意义深远，因为我大二要升大三了，大学都过去一半了，才获得第一个国奖证书，但是当时就是一个愣头青，老师问我问题的时候，我都回答不到点子上，他问啥，我就直接说啥，没有技巧可言，而且有时候因为急切地想回答老师的问题，在老师没说完的情况下就接上了，后来我们指导老师给我说，我的答辩给人一种很急切，不自然的感觉，成绩其实很低，能进国赛，纯纯靠作品还不错。所以这件事一直成为我的一个遗憾，第二年我就又报名参赛了，但是，确实是精力已经明显不够了，我需要复习考研的知识，我需要考408，这个真的很多，有4本书，再加上学习数学，基本上没有太长的时间精力去打比赛了，所以作品质量没有第一年作品质量高了，但是我的答辩风格确确实实是有了很大的进步。</p>
</blockquote>
<h3 id="（四）第十四届-MathorCup-数学应用挑战赛-2024-年-“亚太杯”-数学建模比赛"><a href="#（四）第十四届-MathorCup-数学应用挑战赛-2024-年-“亚太杯”-数学建模比赛" class="headerlink" title="（四）第十四届 MathorCup 数学应用挑战赛 &amp; 2024 年 “亚太杯” 数学建模比赛"></a>（四）第十四届 MathorCup 数学应用挑战赛 &amp; 2024 年 “亚太杯” 数学建模比赛</h3><ul>
<li><strong>获奖情况</strong>：均获得省级三等奖</li>
<li><strong>担任角色</strong>：全能ACE</li>
<li><strong>工作职责</strong>：负责数学模型的构建与优化，以及论文撰写工作，运用所学数学知识与计算机技能，将复杂问题抽象为数学模型并求解，为团队最终获奖奠定了坚实基础</li>
<li><strong>项目感悟</strong>：通过参与数学建模比赛，深刻体会到数学在解决实际问题中的强大威力，也进一步提升了自身的数学建模能力与论文撰写水平，更重要的是培养了团队协作精神与创新思维，为今后从事科研工作积累了宝贵经验。</li>
</ul>
<blockquote>
<p>建模竞赛，其实我参加了很多，但好多也都是因为竞赛时间冲突，止步于校赛，其实建模竞赛的思路都差不多，就那几个模型，领悟透彻一两个，比如说”神经网络“、”灰色梯度分析“等一些很基础的模型（其实一点都不基础，妈呀，老难了，基本思路好理解，主要是编写代码的时候，合理运用数据真的很难），基本上打比赛都没有什么特别大的问题。</p>
</blockquote>
<h3 id="（五）数学、英语等相关校级竞赛"><a href="#（五）数学、英语等相关校级竞赛" class="headerlink" title="（五）数学、英语等相关校级竞赛"></a>（五）数学、英语等相关校级竞赛</h3><ul>
<li><strong>获奖情况</strong>：在校期间参加全国大学生英语阅读、写作等竞赛以及数学比赛等若干大学生竞赛，多次荣获校级奖项</li>
<li><strong>个人感悟</strong>：尽管在部分竞赛中因时间冲突等原因未能取得更高等级奖项，但每一次参赛经历都是一次难得的学习与成长机会，让我在挑战自我的过程中不断发现了自身的不足与潜力，也更加坚定了在学术道路上不断前行的决心。</li>
</ul>
<blockquote>
<p>我当时为了提升自己的英语数学科目的水平，参加了很多竞赛，英语写作、阅读、演讲等等好多比赛，也认识了好多研究生毕业不久的老师，他们对我们都特别好，都是一点一点的批改我们的作业，真的很认真，我真的特别喜欢他们，跟着他们的那段时间，我感觉我的英语水平提高了不少，如果不是因为竞赛的时间冲突，我肯定会一步一步和他们一起走下去。</p>
</blockquote>
<h2 id="四、项目实践"><a href="#四、项目实践" class="headerlink" title="四、项目实践"></a>四、项目实践</h2><h3 id="（一）网页设计开发项目"><a href="#（一）网页设计开发项目" class="headerlink" title="（一）网页设计开发项目"></a>（一）网页设计开发项目</h3><ul>
<li><strong>项目背景</strong>：大二上学期在 “Web 开发技术” 课程学习过程中，对网页设计产生浓厚兴趣，于是决定将所学知识付诸实践，自主开展网页设计开发项目。  </li>
<li><strong>项目成果</strong>：成功制作 “游戏喜爱度投票” 网站 ：<a href="https://lemon2003.github.io/game/">游戏争霸赛</a>，该网站功能齐全、界面美观，能够满足用户对不同类型游戏喜爱度的投票与统计需求，为后续进一步学习网页开发积累了实践经验。</li>
<li><strong>技术拓展</strong>：在完成课程项目的基础上，深入学习并掌握了 GitHub 平台与 Hexo 平台的搭建与使用方法，成功搭建个人专属博客 <a href="https://lemon2003.github.io/">lemon2003.github.io</a>，通过博客分享自己的学习心得与生活感悟，与更多志同道合的朋友交流互动，同时也有助于提升自身的技术影响力与个人品牌价值。  <blockquote>
<p>其实，当时做课程设计的时候，我就有意向将自己的设计做成网页放到网站上，我当时就想能不能做一个自己的网站，当时本意是想买一个域名，但是当时确实考虑到自己既要兼顾学业和竞赛，可能没有太多的时间去维护自己的网页。后来便直接将网页放置在github上，设置成静态网页，相比之下确实是节约成本，也实现了我的小目标，但是因为github平台的原因，可能有时候可能会进不去网页。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>后来也是偶然间在bilibili上刷到了有博主通过Hexo结合github搭建个人博客，所以，我通过查阅资料，最终搭建成功了我的博客，平时准备考研学习，并没有每天关注，但是会时不时的发一两篇文章，有时会发送一些学习遇到的问题，或是生活琐事，完全是当成朋友圈玩了。</p>
</blockquote>
<h3 id="（二）嵌入式系统设计开发项目"><a href="#（二）嵌入式系统设计开发项目" class="headerlink" title="（二）嵌入式系统设计开发项目"></a>（二）嵌入式系统设计开发项目</h3><ul>
<li><strong>项目背景</strong>：大三下学期在 “嵌入式系统” 课程学习期间，对 STM32F103 系列芯片编程产生浓厚兴趣，为了进一步加深对嵌入式系统的理解和掌握，积极参与课程设计项目，挑战自我，提升实践能力。  </li>
<li><strong>项目成果</strong>：  <ul>
<li>基础任务：利用 STM32F103C8T6 芯片完成 2024 年电赛 H 题，成功实现小车跑一圈 “0” 字型的任务要求，通过实践验证了对嵌入式系统基本原理与编程方法的理解与应用能力。  </li>
<li>拓展任务：在完成基础任务的基础上，进一步优化算法与程序设计，成功实现了小车跑两圈 “8” 字型的拓展任务，展现了较强的创新思维与技术实践能力，为今后在嵌入式领域深入发展奠定了坚实基础。</li>
</ul>
</li>
</ul>
<blockquote>
<p>其实说句实话，不得不承认的一点就是所谓的小组作业差不多都是一个人的作业，我们嵌入式课程设计是三人一队，我们寝室有两个女生和我组队，但是他们二人并不是很擅长嵌入式的知识，所以这个项目都是我做的，换句话说，他们只是挂个名字而已，所以这个项目严格上来说也可以算作是我的个人项目。</p>
</blockquote>
<blockquote>
<p>其实，我们这节课并没有学电赛的知识，知识学了一些嵌入式的基础知识，比如点灯，数码管等一些很基础的知识，完全就是按照课本上的知识讲的，对于我们来说，以这样的知识完成电赛这种强度的比赛，完全就是不够的，所以我当时那两周真的很焦虑，白天正常上课，晚上会抱着我的平板看网上的电赛知识点教学，比如PWM调频，光电测速模块原理，红外循迹等等，我会学好多东西，我的性格属于那种不会轻易认输的人，我要做好的事情，我会不遗余力的去做，所以那两周，我经常熬夜看教学，最终才换得我的课程设计100分的成绩。</p>
</blockquote>
<h2 id="五、个人荣誉"><a href="#五、个人荣誉" class="headerlink" title="五、个人荣誉"></a>五、个人荣誉</h2><ul>
<li>2023 - 2024 学年国家励志奖学金  </li>
<li>2022 - 2023 学年校级奖学金  </li>
<li>2022 - 2023 学年三好学生</li>
</ul>
<blockquote>
<p>其实我还连续三年获得优秀团员评议激励，获得2024-2025学年的优秀团干部，但是证书还没下来，就没往上写。</p>
</blockquote>
<h2 id="六、自我评价"><a href="#六、自我评价" class="headerlink" title="六、自我评价"></a>六、自我评价</h2><ul>
<li><strong>学习能力</strong>：对新知识与新技术怀有强烈的好奇心与探索欲，始终保持着饱满的学习热情。<br>在 STM32 小车项目中，敏锐地察觉到陀螺仪对于提升小车运行精度的关键作用，即使该项技术并未包含在老师的要求范围内，也毫不犹豫地主动查阅大量资料，并迅速将理论知识转化为实践应用，为项目成功推进提供了有力支持。面对全新的技术模块，如 MPU6050，仅用一晚时间便深入掌握了其核心原理与应用方法，并能熟练运用到实际项目中，这种高效的学习能力使我能够在专业领域快速成长与进步，始终走在技术前沿。</li>
</ul>
<blockquote>
<p>我们在嵌入式上课期间，课堂任务环节，我总是前3名完成（不是我吹😏，我几乎上都是第一个完成任务，只有一两次是第三个完成，我的嵌入式成绩是99分，是班级最高分，哈哈哈，有点小骄傲），因为我们练习的时候都是基于C语言编写代码，我的C语言成绩是95分，也属于较高分了，这个C语言课程是大一上学期学习的课程，因为我平时也会经常练习，所以在嵌入式学习的时候，学完基本理论，就很容易编程了。但其实我们的课程中并没有涉及到MPU6050的学习，这个课程设计可以说是老师的突发奇想，老师说他想看看我们的本事，就把电赛题稍微改动了一下让我们尝试，因为课程设计只有两周，小车组装材料都需要我们自己购买，时间相对有点紧，而且当时我们老师并没有强制要求我们用MPU6050，他说我们只学了一些嵌入式的基础，打电赛的话还是远远不够的，所以要求并不是很严，他还给我们讲到了他带队参加电赛的经历，确实是很厉害的老师。</p>
</blockquote>
<ul>
<li><strong>实践能力</strong>：注重将理论知识与实践操作紧密结合，积极参与各类科研竞赛与项目实践，在实践中不断锤炼自己的专业技能与综合素质。<br>从项目初期的方案策划、资源调配，到项目执行过程中的技术攻关、难题解决，再到最终的成果展示与汇报，每一个环节都能全身心投入，确保项目高质量完成。凭借扎实的实践能力，多次在国家级、省级竞赛中斩获佳绩，为学校与团队赢得了诸多荣誉，同时也积累了丰富的实践经验，为今后的职业发展打下了坚实基础。</li>
</ul>
<blockquote>
<p>其实，打过比赛的学生都知道，所谓的团队赛，几乎上和个人赛差不多，好多人只是挂名比赛，或出于友谊或出于评议激励，只有几个人真实的做出实际行动，所以我可以说，我参加的比赛，我都是实打实的出力，怎么证明呢？我参加的比赛，如果涉及到汇报和答辩，均有我来完成或辅助完成，如果我对项目不了解或没有参与，又怎么会将这么重要的位置给我呢？如果是建模比赛，我均是跨专业组队，这一点我的队友都可以证明，我是唯一的计科专业的，换句话说，我是团队中代码编辑能力最好的一个，所以建模，写代码均由我为主力，因为建模是我建的，所以在写论文的时候，具体详细的思路也是由我来写的。个人赛就不需要证明了，所以我可以说，我参加的所有比赛，所获得的所有荣誉，均由我为主力完成，不是挂名的。</p>
</blockquote>
<ul>
<li><strong>团队协作精神</strong>：深知团队的力量大于个人，无论是在竞赛团队还是项目小组中，始终秉持着积极主动、认真负责的态度，与团队成员紧密合作、相互支持。<br>善于倾听他人的意见与建议，充分发挥自身优势，同时也能充分尊重团队成员的个性与特长，合理分工、协调配合，共同攻克一个又一个难关。在互联网竞赛项目中，面对团队成员的频繁变动与诸多不确定性因素，始终坚守岗位，以坚定的信念与顽强的毅力感染并带动团队成员，最终凭借出色的团队协作与默契配合，成功完成商业企划书撰写等关键任务，实现了团队目标，充分彰显了卓越的团队协作精神与领导才能。</li>
</ul>
<blockquote>
<p>因为我的竞赛大多数集中在大二和大三，其实每个竞赛的时间战线都很长，所以时间冲突是不可避免的，所以我有在尽可能地与队友沟通、分配任务合作完成。比如物理竞赛当时和互联网+比赛训练时间有一段时间是强烈冲突的，我们学校比较重视“互联网+”比赛，这个比赛每个学校都会限制上推参加比赛的项目的数量，我们训练是有专门的场地的，而且在它规定的时间必须到训练场地，否则就视为放弃，学校就不会上推该队伍去比赛，所以我当时主要是做“互联网+”比赛，在微信上一直和物理竞赛队员练习，分配好任务后，我们都自己完成自己的任务，我白天训练时间在场地和“互联网+”比赛队员做任务，游戏时间和晚上加班完成物理竞赛中我的任务部分，我们设置的有阶段性的目标，我们总是会在规定时间完成任务，绝不拖延，所以即使我的比赛时间有些冲突，但是我依然会保质保量地完成任务。</p>
</blockquote>
<ul>
<li><strong>坚韧不拔的毅力</strong>：在追求卓越的道路上，始终保持着坚韧不拔的毅力，面对困难与挫折从不轻言放弃。<br>备考数学竞赛期间，遇到曾经做过的类似题目却依然无法理解的困境，内心虽有浮躁与气馁，但能够迅速调整心态，坚持不懈地通过大量刷题、查阅资料、请教老师与同学等方式，逐步攻克难题，最终在竞赛中取得了理想成绩，实现了自我突破。担任项目队长选题时，深知选题方向对于整个项目成败的重要性，面对众多选项与复杂形势，没有丝毫退缩，而是反复斟酌、深入研读历年获奖案例文献，凭借顽强的毅力与严谨的态度，精心挑选出最优方案，为项目顺利开展奠定了坚实基础，这种坚韧的品质也成为了不断推动我前进的强大动力。</li>
</ul>
<blockquote>
<p>其实，坚韧不拔的毅力对我来说，真实情况应该是：我可能比较笨😂，这个不是我自己说的，这个是老师对我的评价，这个是当时做web网页课程设计的时候，用JS写花瓣飘落特效，当时我写了好久，我在网上看了好多好多的讲解，根据AI一遍一遍的修改，当时我做了一星期还没做出来，我们老师就说，你这孩子很有毅力，很爱研究。确实我知道老师只是夸我，可能没有别的意思，但是我后来和我我妈聊天的时候，我妈说可能是你笨，老师看不下去了，但是我当时和我妈说的时候，就是笑一笑说：”但是我最后做出来了，全班就我一个人做出来了。“</p>
</blockquote>
<h2 id="七、未来规划"><a href="#七、未来规划" class="headerlink" title="七、未来规划"></a>七、未来规划</h2><p><strong>大四：</strong> 完成本科学业，提升英语水平<br>目标：认真完成本科阶段的全部学业，为本科学习画上圆满句号，并提升自身英语水平。<br>学习：完成毕业设计，坚持每日进行英语词汇、阅读、写作及口语练习。<br> ● 完成学业：完成本科期间的所有学业任务，包括毕业设计。<br> ● 英语学习：广泛阅读英语文献，提升英语阅读能力。</p>
<blockquote>
<p>其实说实话，我的英语水平确实很不好，截止2025年8月16日，我的英语6级考了4次了，明明英语4级一次都过了，但是6级是考了4次都没过，我每天都会背100个英语单词，但是我总是一直背一直忘，每次考试前都会把近3年的真题和一些机构的模拟卷定时做一遍，因为每次做真题后都会仔细阅读分析，所以后来在做真题的时候，即使隔了几个月，看了关键字，文章意思就想起来了，答案都背会了，但是一做模拟卷或者正式考试的时候，总是理解不透彻出题者的意思，做错了很多我就会很浮躁很气馁，但是我会尽量的缓和调节自己的情绪，尽快重新投入学习中。</p>
</blockquote>
<p><strong>研一：</strong> 夯实基础，探寻方向<br>目标：熟悉研究领域，完成课程学习，确定研究方向与计划。<br>学习：学习专业基础课程和必修课程，通过考试，筑牢专业基础。<br> ● 文献阅读：广泛研读相关领域的文献，了解前沿动态，为确定具体研究方向做好准备。<br> ● 与导师交流：与导师进行深入探讨，交流自身兴趣点及可能的研究方向。<br> ● 初步尝试：参与实验室项目，通过实践了解研究方法和流程。</p>
<blockquote>
<p>说句实话，我其实并不是特别清楚我应该研究什么方向，我看过好多博主说要根据各个老师的研究方向去仔细查看是否与自己的兴趣符合，我看了好多研究方向，也查了很多资料，但是我是站在一个“门外汉”的角度来评判自己是都感兴趣，我虽然来自计算机科学与技术专业，但是我们所接触的课程广而不精，在本科学习阶段，我感觉自己学了好多东西，但是都不够深入，单单就兴趣来看，我好像都很感兴趣。</p>
</blockquote>
<p><strong>研二：</strong> 深入钻研，积累成果<br>目标：开展具体的研究工作并发表论文。计划如下：<br> ● 确定课题：在导师指导下，确定具体研究课题，并制定详尽的研究计划。<br> ● 科研实践：依照计划开展实验研究，收集并分析数据。<br> ● 学术交流：参加学术会议，交流研究成果，接受同行评议，拓宽学术视野。<br> ● 撰写论文：依据研究成果撰写学术论文，并向学术期刊投稿。</p>
<blockquote>
<p>其实说句实话，我对研究生生活真的很向往，我初高中的时候接触计算机领域并不多，但是当我大学学到计算机知识的时候，我第一次感觉，计算机真的很可爱，他有好多地方都很吸引我，我很喜欢写一些代码或做一些小玩意儿，实现自己的小巧思，我很享受实现小时候的“白日梦”，在大学以前，我就是纯纯一个“i”人，很内向，也不知道和别人聊什么，也不会主动找话题，很无趣，很苦闷，都是别人聊什么，我就跟着听，我给自己写过很多的对话，直到大学，虽然已经慢慢的改变了自己的性格，差不多已经算是半个”e”人了，但是我还是很喜欢记录自己，我学习了代码，我会设置关键字，逗自己开心。其实，我感觉我可能真的很适合这个领域，在大学我刚开始接触计算机领域的时候，那时候第一门专业课便是C语言，所以我就用C语言写对话，模拟人类与计算机沟通，当时确实不知道发展的进度，思维还只是很简单的关键字搜索，完成简单的对话，但是没想到在我大二的时候，AI已经发展的非常快了，已经实现了我的快乐。我的本科学校不够好，我一直向上再继续深造，我希望我可以继续在计算机领域深入的研究，做更多的事。</p>
</blockquote>
<p><strong>研三：</strong> 完成论文，规划未来<br>目标：完成毕业论文，规划职业生涯。计划如下：<br> ● 整理研究：总结研究成果，完成毕业论文的撰写。<br> ● 答辩准备：筹备毕业论文答辩，通过模拟答辩等形式熟悉答辩流程。<br> ● 职业规划：思考未来职业方向，积极寻觅工作机会，或考虑继续深造。<br> ● 总结反思：对研究生阶段的学习与研究进行全面总结，为未来的学术或职业生涯积累经验。 </p>
<blockquote>
<p>在考虑要不要读博士这条路上，我其实也不知道我会不会做得很好，我其实有些自卑、内耗、焦虑，我害怕我会给别人带来麻烦，但是我的家庭条件、我的意愿或者换句话说我的自我意识都是非常渴望去读博士，走得更高，看得更远。但我又是一个很矛盾的人，我看过网上好多的人说博士不好毕业，博士怎么怎么难，我就会很害怕，我害怕自己追求的东西实现不了，做成一场空。所以即使我真的很想读博士，但我也无法准确的说未来的选择，所以我希望未来的决策，到合适的时机，再做出我的选择。但我始终相信“自由意识杀不死你的热爱。”这句话是从辩论赛中看到的，我在很纠结的时候就会反复的告诉自己，我真的很喜欢，我真的想进步，我只想做得更好。</p>
</blockquote>
<p>我深知，未来之路充满挑战与机遇，但我将始终保持积极向上的心态，以坚韧不拔的毅力、扎实深厚的专业知识、卓越的实践能力以及出色的团队协作精神，稳步前行，在计算机领域书写属于自己的辉煌篇章。</p>
]]></content>
      <categories>
        <category>腹有诗书气自华</category>
      </categories>
      <tags>
        <tag>腹有诗书气自华</tag>
      </tags>
  </entry>
  <entry>
    <title>不开心四六级又没有过</title>
    <url>/post/20250816114710.html</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6726d5c82b006a285c741dd9c0fd4c68d1127981c58787058bf09d36309272b4">d5a250a6880d98c21c2687900615c592e6fb8bfeefe5494fb6fd0139ae9464d8a6efe4bc05e6c65e4da357af365345ce3bdc4be59bdb9e3ea3ed60a97efdcfa09ad985bf421f71b6a40aab3586a19b166d59e2d81774ee16c241c95378d33b8eefeaa97438ee0285a50f904ca6201adb449e6bf3854b02d9824780dace9b92bbccaabc6c86d642dd225f80b8f465a7a3bff0a30d3c998acef41715bfe5a0d195c0625f5cbd77670b4341594e8e541be7fc9bbfc32bc365a167698d87a2241d495b27c377f414a75dfa7029c91be2ea18f4aaaea215e5a5f744b1df16a8959f63a778180339b1928765be0df66a2d9c57bebfd93a75821a742032431421f1bb096cbe71ba51e5ed1792fd1bc6caffbee4bfbb2a712a0e8671243ebc226260fde73a803b07362055e6551e113c7bd96eba3a907c8151987f677fc65dc2664c06bf199f89948c5c7c5dc617edb7d4319374f7490b52deaae5d016ab4f88d3f2383cf853010ebaf3a5dab428b48c6fa99957fac641fe0f80068e8a4e6fddad5e7e68a5d08ccad1778465b3247ee8b9d8926eab21979c98537b0fc38b05fd1d563c0dcabde0b694f963646684b5983a48e0d61a5e1fa1f91f82a99b28e496b441439829308bb3ec541ba6178b1da392b1948307e0a1945eb2ea0b040e2ba2bde53b66019b47a76ce39af45d05826bda82949dfdb5448895bfd9f961925347890ab0987d0222c348b03a8907757619410f3e9a7a95055e5a2606072a2e74047e4440f3aea05dfa7bf3bfc1325308766f914cf3588827ad2f1007284f36da4fe21269a1952f70a23ca90b7130c184a15bf2666236402f21282afa8ed90c2299e3ebc8d9b6b053cba9f66c112a968a2de5fb06455fab136d36d31dbbbed024d0544d77234c066ae87f6dca39f3c8050a4fe0eae38f9a9fbc1fdcf87558892e6d2d4aa2af36de4c0a17d71318c32ea3f17a0eac692074925d7b1b982eb6a23eb9fbd02df36c456ce30287855201f808690f6e6f11e3f0e5afb54663ac3edbcb7c26e81e9299d86364fcf17d757d874a05cc9b8c2ab3d151a26dcf707e9097b163fb606df2251968c1ae75b320de504754d05eae60293c26fd0a9e5bb530770630eb33d87405eb0438550e414c28b3bbde4b48ad1556ae3113faf4a6e5ceaf1c9b6f98730459b921c649341fd92e3bd0ac4ed5d8cbd45480d7a932221f05471de41ae2bffcf051dbcafcb6bed54559524f74d424cd4ff24b12cce7a47c49e9d4e7b9fc1671</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>四战六级查分日记</title>
    <url>/post/20250816022035.html</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6aa4a15cde126e3840cba62c5bfbabb097d0fb98cb3c40efd30acca38720a8bf">d5a250a6880d98c21c2687900615c59200d352abced21b1c1b6bffac82edeb0fa6f4499f2e9b8ab6fbf1a91fb055ecd674cca0b42aec3bfb00a556774c9866cf91a1c1f0b43ef24291983127594936b0636250ed989943f8ad07bd0f6364c4e3c6e6692f2370d7d45dedba021d4db6efb11909705cf6eb04f1a379d3893cb0824fee33145a022ec69e014493b4cdd5d84f105e21424a3f15e896c52f494b63766240ca23530778ee594021e3e9f1108b1d0bcdb4f708436fd5095f59ff4d2b2e88d0a5dec202f54b9e295b6b0ab39140ddcdfb1d83a537428ab5eada9af0e90801d2d676788d495d4b163eb86cd203d2c2401e0940c2a7fb031dcf7e267c70f649a1b672e40c1c42c77a81b9b7c33d994f0247a8708897767796e7a3667543e18ab0386c268fd9af19e0033a117f68b277328aec3b37668dfe3eaa9afeb6db2a463e8cf4ac7cbfc6c5c54163fce5f8206d894492534f8637a85d5abb814dcd9970c92b039c9ff687c4d6495faca11ee835a26a14d70729706e778a15b05c838411993beec6eef9dfc89839446390a2e4dc73e9999cb96177141030fc5c6c13dddd6362e6cb6709d896a95a041d60de990cbbb461bb89410fd66eb2e47d582b5753fd78bac73157818212a55753b6b9a2949851cb3174e8192bfd7628c526d35f4d15dcf65e80584e0f4ddf806cb07e3367fe88aa2ea19af88b860c058c13875f850c1737ebcd197e2b730f424da24f9e6f17c875b71563646dd249b12fa7d320ddfc06f954c0908cb3c9765f657a3cb75a8bc2598ac40129847d073f8a770b33942664419e22ea182e32084a31084215ef8d5790635a63c64fd7d561b811144c0599ac3fe47ef0d4635af950695c23f0eeed87d003cf1821c464db8c65177f4a7a1b888673d0d296ec996733dcd038ce85556590f63b209db44052896ec5894132b5480ade36884eff6b92ceac70a70c5fd2c3ba0e8bd37c39c8b571c06e1eef07bd7c7ad773248adcb9718f59920e02cba833b231d4500363d59e30b0ed64ccf450f2a89fe46cefc1e64fa7d660cc7bff45e2bcd1293a9577888749cc85e863d952cc8e5cf94d3a9607938c020ee6bbac710cb68823f85cb97f48c3cce0dddd89d2c2d39646dc78978ff62c60541f2e56a50f2e233fa983a1bf4ed901ee99db30b87814b9308aba7c39fed1aa61abd3fbb4c9a9a181e9bda3858d99017f5562a8ca19cc9e9dabc2ef7940d0c458720aef714fe45f4f4b889f4bf38037e865400c4504857bdbadda538d548367282bde40276fa933fbc7171801bdbcd5ce28c05798cd16c773bc4f116011df3fa6b638e56b8d576b8588fa33d14f05b95a05ec4f86c24472ad7f8eacb7201f0ed3e562c564abf0db9a75e030dc792fd74bbf538aba67aa51cfbb2b88ec3dcc126ca2dd0619f3af0853d3292a9158f79599663b17909da19b8f5f478e6a91ae7e6e0866ce8542d95e7cb744d428acb798e4d42f00b7bc797d83a11edbb35190b9b85fca95be2be7eb8d43cc27ce84058ed34fd6dca2ea337b15a673080f2c17301b185b316c6e03590a05eaf646af354e3feb3ef5e2484a1ba164981868dd5bec53386766c6fed8c1b27034c1e018ab4e28eb9d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>github.io进不去</title>
    <url>/post/20250817003210.html</url>
    <content><![CDATA[<h2 id="github-io进不去了怎么办？"><a href="#github-io进不去了怎么办？" class="headerlink" title="github.io进不去了怎么办？"></a>github.io进不去了怎么办？</h2><p>如果你的界面如下图所示：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250816/2.png"
                      alt="a"
                ></p>
<blockquote>
<p>网上有很多介绍原因的，还有什么更改DNS的，我感觉好麻烦啊，我在这就说一种比较简单的，换句话说，我认为比较简单的办法，清除浏览器缓存。</p>
</blockquote>
<blockquote>
<p>我先说明一下啊，我是偶尔有情况进不去，不是说我没有配置成功的进不去，我平常都可以进去的，偶尔，偶尔有情况进不去了、</p>
</blockquote>
<p>按下面的图示操作就行了：<br>①右上角有仨点，点完以后清除缓存就行了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250816/3.png"
                      alt="a"
                ><br>②这个时间选一个就行了，不影响<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250816/4.png"
                      alt="a"
                ><br>③然后就可以了，如果要是没进来，关闭浏览器重新打开浏览器再试一下就行了。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250816/5.png"
                      alt="a"
                ></p>
<hr>
<p>如果要是还不行的话，你就关机重启就行了。嘿嘿嘿~~~  这法子，搁哪里都可好用😂</p>
]]></content>
      <categories>
        <category>解决错误</category>
      </categories>
      <tags>
        <tag>解决错误</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub不用魔法上网方式</title>
    <url>/post/20250820112816.html</url>
    <content><![CDATA[<p>昨天给朋友发了个github上很好用的软件的链接，他问我为啥进不去，所以写一下文章，如果有朋友有相同的问题的话，可以参考一下，下图是进不去的界面。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/4.png"
                      alt="a"
                ><br> <strong>本文介绍两种“加速器”软件进去GitHub</strong></p>
<hr>
<h2 id="GitHub-为啥进不去？"><a href="#GitHub-为啥进不去？" class="headerlink" title="GitHub 为啥进不去？"></a>GitHub 为啥进不去？</h2><p>平时可能有人进入github.com的时候会进不去，其实开个“魔法”就行了，但是有人可能没有“魔法”资源，这里推荐两个加速器，也可以不用“魔法”就可以访问github。<br>但是总有一些天选之子，直接就进去了，确实是幸运啊。</p>
<p>可能有些人只是想看一下某个界面，但是一直被卡着进不去，也不“搭桥架梯”的，就把浏览器记录清一下，就可以临时的访问了，方法如下：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/8.png"
                      alt="a"
                ></p>
<p>​<strong>​为啥好好的 GitHub 就访问不了了呢？简单说就俩字儿：干扰。​</strong>​</p>
<p>说白了，不是 GitHub 自己“挂”了，而是咱们连接过去的路不太顺畅，中间有点“关卡”。想稳定访问，关键就是​<strong>​找到一条靠谱的“桥”或者“梯子”跨过去，连接到真正的 GitHub 服务器。​</strong>​</p>
<hr>
<p>原因有感兴趣的朋友可以自己去搜，我这里就不过多的介绍了，网上有很多人都讲，讲的也特别明白，我这里直接讲这么弄。</p>
<h2 id="搭桥神器一：FastGithub-推荐"><a href="#搭桥神器一：FastGithub-推荐" class="headerlink" title="搭桥神器一：FastGithub (推荐)"></a>搭桥神器一：FastGithub (推荐)</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/6.png"
                      alt="a"
                ><br>就博主个人来讲，比较推荐这一款，好用，也很稳定，github上也有，但是现在不是进不去吗，所以用清华云里面的就行。<br>链接：<a class="link"   href="https://cloud.tsinghua.edu.cn/d/df482a15afb64dfeaff8/" >清华大学云盘<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/1.png"
                      alt="a"
                ><br>找一下你的系统，然后下载就行了运行起来就行了，下载完解压后如下图：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/2.png"
                      alt="a"
                ><br>运行起来的结果如下图：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/3.png"
                      alt="a"
                ><br>然后就可以了，再访问GitHub如下图：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/5.png"
                      alt="a"
                ></p>
<hr>
<h2 id="搭桥神器二：Steamcommunity"><a href="#搭桥神器二：Steamcommunity" class="headerlink" title="搭桥神器二：Steamcommunity"></a>搭桥神器二：Steamcommunity</h2><p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/7.png"
                      alt="a"
                ><br>这款软件也挺好的，是博主第一次进GitHub用的软件，但是这个有个很烦的一点就是“端口可能会被占用”还要改端口就会很麻烦，博主是计算机专业的学生，有一个web前端网页设计的课程，用的html软件，他和这个steamcommunity用的端口一样，还得改端口，很麻烦。如果你没有这个html相关课程的话，可以用这个软件，这个加速器也很好用。<br>链接：<a class="link"   href="https://www.dogfight360.com/blog/18682/" >Steamcommunity 302 Ver.13.0.06 – Dogfight360<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>解压后就可以运行下面这个程序：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/10.png"
                      alt="a"
                ><br>先在设置中勾选GitHub，然后启动服务，步骤如下：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250820/9.png"
                      alt="a"
                ><br>然后就可以访问GitHub了，官网链接如下：<a class="link"   href="https://github.com/" >GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<h2 id="总结一下：两个软件都很好，各有千秋"><a href="#总结一下：两个软件都很好，各有千秋" class="headerlink" title="总结一下：两个软件都很好，各有千秋"></a>总结一下：两个软件都很好，各有千秋</h2><ul>
<li><p>​​专攻 GitHub，​首选<strong>​FastGithub​</strong>​ ，简单粗暴效果好。</p>
</li>
<li><p>​经常打游戏（Steam&#x2F;PS&#x2F;Xbox等），顺带也想 GitHub 跑快点，就选​<strong>​steamcommunity​</strong>​ 。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>解决错误</category>
      </categories>
      <tags>
        <tag>解决错误</tag>
      </tags>
  </entry>
</search>
