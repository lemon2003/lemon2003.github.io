<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyGithub仓库</title>
    <url>/post/20250320171447.html</url>
    <content><![CDATA[<h6 id="我的简介"><a href="#我的简介" class="headerlink" title="我的简介"></a>我的简介</h6><p><a href="https://lemon2003.github.io/">https://lemon2003.github.io</a></p>
<h6 id="我的物理比赛–自创法宝–求金属线膨胀系数"><a href="#我的物理比赛–自创法宝–求金属线膨胀系数" class="headerlink" title="我的物理比赛–自创法宝–求金属线膨胀系数"></a>我的物理比赛–自创法宝–求金属线膨胀系数</h6><p><a href="https://lemon2003.github.io/phy">https://lemon2003.github.io/phy</a></p>
<h6 id="我的web结课作业"><a href="#我的web结课作业" class="headerlink" title="我的web结课作业"></a>我的web结课作业</h6><p><a href="https://lemon2003.github.io/game">https://lemon2003.github.io/game</a></p>
<h6 id="我的web课程练习汇总"><a href="#我的web课程练习汇总" class="headerlink" title="我的web课程练习汇总"></a>我的web课程练习汇总</h6><p>效果网站：<a href="https://lemon2003.github.io/classWeb">https://lemon2003.github.io/classWeb</a><br>仓库地址：<a class="link"   href="https://github.com/lemon2003/classWeb" >https://github.com/lemon2003/classWeb<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>   </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>友谊+编程=奇迹</title>
    <url>/post/20250321132621.html</url>
    <content><![CDATA[<h1 id="🌙熬夜编程奇遇记：当BUG遇上友情魔法✨"><a href="#🌙熬夜编程奇遇记：当BUG遇上友情魔法✨" class="headerlink" title="🌙熬夜编程奇遇记：当BUG遇上友情魔法✨"></a>🌙熬夜编程奇遇记：当BUG遇上友情魔法✨</h1><h2 id="🕒-凌晨1-30的孤独战场"><a href="#🕒-凌晨1-30的孤独战场" class="headerlink" title="🕒 凌晨1:30的孤独战场"></a>🕒 凌晨1:30的孤独战场</h2><p>键盘声在寂静的夜里格外清脆，屏幕蓝光映着脸上交织的困惑与倔强。那个讨厌的红色报错信息已经和我对视了整整五个小时，像只狡猾的小狐狸🦊，每次以为抓住尾巴时，它又从指缝溜走了。</p>
<ul>
<li>🐞 错误症状：<code>spawn failed</code></li>
<li>🔍 已尝试疗法：<ol>
<li>三遍代码诵读咒</li>
<li>控制台占卜术</li>
<li>谷歌神谕祈祷</li>
<li>咖啡献祭仪式</li>
</ol>
</li>
</ul>
<h2 id="🌅-黎明前的黑暗"><a href="#🌅-黎明前的黑暗" class="headerlink" title="🌅 黎明前的黑暗"></a>🌅 黎明前的黑暗</h2><p>窗外的天空逐渐变蓝，像是在为夜晚的BUG而准备。月亮的光芒逐渐减弱，仿佛在提醒我们：夜长梦多，要小心夜的眼睛。</p>
<h2 id="☀️-晨光里的救星降临"><a href="#☀️-晨光里的救星降临" class="headerlink" title="☀️ 晨光里的救星降临"></a>☀️ 晨光里的救星降临</h2><p>一个神秘的声音在耳边响起：「算了，还是求助大佬吧！」。</p>
<h2 id="🧚♂️-魔法时刻："><a href="#🧚♂️-魔法时刻：" class="headerlink" title="🧚♂️ 魔法时刻："></a>🧚♂️ 魔法时刻：</h2><ol>
<li><strong>代码考古</strong>：用git时光机倒回两天前的版本</li>
<li><strong>依赖侦探</strong>：发现.git文件被我误删</li>
<li><strong>降维打击</strong>：重建.git文件夹，恢复代码版本</li>
<li><strong>胜利烟花</strong>：我的网页重新闪耀</li>
</ol>
<h2 id="🎉-双倍快乐的秘密"><a href="#🎉-双倍快乐的秘密" class="headerlink" title="🎉 双倍快乐的秘密"></a>🎉 双倍快乐的秘密</h2><p>当屏幕亮起成功的提示时，快乐像电流般在网线里跳跃。<br>原来：</p>
<ul>
<li>🔑 解决问题的喜悦是程序员的快乐</li>
<li>💡 独自熬夜是修行，共同debug是狂欢</li>
<li>🍵 冷掉的奶茶突然变得超甜</li>
<li>📚 学到了比解决问题更珍贵的东西：有人并肩作战的感觉真好</li>
</ul>
<h2 id="🌈-今日收获清单"><a href="#🌈-今日收获清单" class="headerlink" title="🌈 今日收获清单"></a>🌈 今日收获清单</h2><p>✅ 解锁新成就：<code>午夜程序员</code>勋章<br>✅ 友情升级：+10默契值<br>✅ 技术彩蛋：已经学会用<code>hexo</code>防坑秘籍<br>✅ 人生哲理：有些BUG就像生活的小插曲，总会有人陪你一起哼出正确旋律🎶。</p>
<p>此刻敲下这些文字时，窗外的暖阳正美得不像话。或许这就是程序员的小确幸吧——在0和1的世界里，总有些温暖的bug，提醒我们：代码冰冷，但写代码的人温热如初。💻❤️</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>唯有热爱可抵岁月漫长</title>
    <url>/post/20250321142900.html</url>
    <content><![CDATA[<h1 id="唯有热爱可抵岁月漫长✨"><a href="#唯有热爱可抵岁月漫长✨" class="headerlink" title="唯有热爱可抵岁月漫长✨"></a>唯有热爱可抵岁月漫长✨</h1><blockquote>
<p>​<strong>​「世事漫随流水，算来一梦浮生。」​</strong> ——李煜《浪淘沙令》</p>
</blockquote>
<p>在时间的长河中，人类如同逆流而上的扁舟，既要对抗水流的冲刷，又要寻找前进的方向。有人被现实的泥沙裹挟沉沦，有人却能在波涛中高歌猛进——那些穿越世纪依然璀璨的生命，无一不是用热爱点燃了内心的火炬。正如德国哲学家尼采所言：​<strong>​「没有热爱的生活，就像没有灵魂的躯壳。」​</strong> 当我们凝视历史的星空，会发现有这样一条永恒的真理：​<strong>唯有热爱，足以抵御岁月的侵蚀。​</strong></p>
<hr>
<h2 id="一、热爱的本质：对抗熵增的精神武器"><a href="#一、热爱的本质：对抗熵增的精神武器" class="headerlink" title="一、热爱的本质：对抗熵增的精神武器"></a>一、热爱的本质：对抗熵增的精神武器</h2><h3 id="1-1-热力学第二定律的隐喻"><a href="#1-1-热力学第二定律的隐喻" class="headerlink" title="1.1 热力学第二定律的隐喻"></a>1.1 热力学第二定律的隐喻</h3><p>在物理学中，熵增定律揭示了一个残酷的现实：孤立系统必然走向无序与衰败。人类社会同样遵循着类似的规律——当一个人失去内在驱动力时，他的生命力就会像逐渐冷却的恒星般黯淡。但热爱的存在，恰似打破绝对零度的那束光子，为生命系统注入负熵流。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250321-%E5%94%AF%E6%9C%89%E7%83%AD%E7%88%B1%E5%8F%AF%E6%8A%B5%E5%B2%81%E6%9C%88%E6%BC%AB%E9%95%BF/%E7%83%AD%E5%8A%9B%E5%AD%A6.png"
                      alt="热力学与人生"
                ></p>
<p><strong>达芬奇的笔记本</strong>就是一个绝佳例证。这位文艺复兴巨匠在临终前仍在记录飞行器的设计，解剖学手稿中密布着未完成的涂鸦。即便在教会迫害下，他对真理的追求从未停歇。正如他在《大西洋古抄本》中所写：​<strong>​「艺术是自然的女儿，而自然又是上帝的诗篇。」​</strong> 这种将创作视为信仰的热忱，让他的思维在70高龄仍保持着惊人的创造力。</p>
<h3 id="1-2-多巴胺回路的觉醒"><a href="#1-2-多巴胺回路的觉醒" class="headerlink" title="1.2 多巴胺回路的觉醒"></a>1.2 多巴胺回路的觉醒</h3><p>现代神经科学研究表明，当人从事热爱的事物时，大脑会分泌多巴胺、内啡肽等神经递质，形成类似「心流」的 state of flow。这种现象不仅带来愉悦感，更能重构大脑的神经回路。日本茶道大师千利休晚年失明后，反而开创了「侘寂」美学的新境界——<strong>真正的热爱不依赖感官，而是根植于心灵深处的秩序感</strong>。</p>
<hr>
<h2 id="二、历史长河中的逆光者"><a href="#二、历史长河中的逆光者" class="headerlink" title="二、历史长河中的逆光者"></a>二、历史长河中的逆光者</h2><h3 id="2-1-苏轼：在宦海沉浮中淬炼诗心"><a href="#2-1-苏轼：在宦海沉浮中淬炼诗心" class="headerlink" title="2.1 苏轼：在宦海沉浮中淬炼诗心"></a>2.1 苏轼：在宦海沉浮中淬炼诗心</h3><p>北宋文豪苏轼的一生堪称中国文人的精神图腾。从「大江东去」的豪迈到「十年生死两茫茫」的悲怆，他在仕途的跌宕中始终保持着对文学与生活的热爱。被贬黄州期间，他发明了东坡肉，在竹林间耕种，在赤壁江畔高歌——<strong>​「回首向来萧瑟处，归去，也无风雨也无晴。」​</strong> 这种将苦难转化为养分的能力，正是热爱的力量所在。</p>
<h3 id="2-2-居里夫人：在辐射中追寻科学之光"><a href="#2-2-居里夫人：在辐射中追寻科学之光" class="headerlink" title="2.2 居里夫人：在辐射中追寻科学之光"></a>2.2 居里夫人：在辐射中追寻科学之光</h3><p>当玛丽·居里在沥青铀矿渣前发现镭元素时，她并不知道自己正在接触致命的放射性物质。40年的研究中，她的皮肤因辐射而溃烂，双眼因强光而永久失明，但那份探索真理的热情从未消退。诺贝尔奖典礼上，她坚持要求将奖金捐赠给科研机构，只保留一枚奖章作为女儿的玩具——<strong>​「人类需要梦想者，需要醉心于事业的大公无私。」​</strong> 这句话至今仍悬挂在巴黎索邦大学的实验室里。</p>
<hr>
<h2 id="三、数字时代的永恒命题"><a href="#三、数字时代的永恒命题" class="headerlink" title="三、数字时代的永恒命题"></a>三、数字时代的永恒命题</h2><h3 id="3-1-注意力经济下的精神荒漠"><a href="#3-1-注意力经济下的精神荒漠" class="headerlink" title="3.1 注意力经济下的精神荒漠"></a>3.1 注意力经济下的精神荒漠</h3><p>在TikTok算法编织的信息茧房中，在短视频制造的瞬时快感中，现代人正面临前所未有的认知危机。斯坦福大学的研究显示，平均每人每天切换设备的次数超过200次，深度专注时间不足8分钟。这种「多任务处理」的假象背后，是创造力与意志力的持续流失。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250321-%E5%94%AF%E6%9C%89%E7%83%AD%E7%88%B1%E5%8F%AF%E6%8A%B5%E5%B2%81%E6%9C%88%E6%BC%AB%E9%95%BF/%E6%95%B0%E5%AD%97%E6%97%B6%E4%BB%A3%E7%9A%84%E5%9B%B0%E5%A2%83.png"
                      alt="数字时代的困境"
                ></p>
<p>但总有人逆流而上。日本建筑师安藤忠雄在70岁时依然坚持手绘设计稿，他说：​<strong>​「建筑是凝固的音乐，而音乐必须用心聆听。」​</strong> 中国航天团队在西北戈壁中数代人的坚守，最终让嫦娥五号从月球带回土壤样本——<strong>这些看似「低效」的坚持，实则是人类对抗异化的终极防御</strong>。</p>
<h3 id="3-2-构建个人意义系统的三种维度"><a href="#3-2-构建个人意义系统的三种维度" class="headerlink" title="3.2 构建个人意义系统的三种维度"></a>3.2 构建个人意义系统的三种维度</h3><p>面对虚无主义的浪潮，我们可以通过三个层面重建热爱的坐标系：</p>
<ol>
<li>​<strong>专业纵深</strong>：像数学家陈景润那样，在哥德巴赫猜想的「1+1」中穷尽半生</li>
<li>​<strong>文化传承</strong>：故宫文物修复师王津用四个月复原乾隆钟表，让百年时光在指尖重生</li>
<li>​<strong>利他奉献</strong>：张桂梅校长创办免费女高，用病弱身躯托起上千名山区女孩的求学梦</li>
</ol>
<p>正如德国哲学家雅斯贝尔斯所说：​<strong>​「教育是棵摇动另一棵树的生命，一朵云推动另一朵云的精神。」​</strong> 当我们把热爱投向更广阔的天地，个体的生命便获得了超越时空的意义。</p>
<hr>
<h2 id="四、写在星河尽头"><a href="#四、写在星河尽头" class="headerlink" title="四、写在星河尽头"></a>四、写在星河尽头</h2><p>站在元宇宙的门槛回望，人类文明史本质上是一部「对抗遗忘」的史诗。从甲骨文的刻痕到量子计算机的芯片，从荷马史诗的吟唱到人工智能的诗歌创作，那些穿透时空的文明火种，无不源于某个灵魂燃烧的热忱。当我们谈论热爱时，本质上是在寻找一种<strong>与永恒对话的方式</strong>。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250321-%E5%94%AF%E6%9C%89%E7%83%AD%E7%88%B1%E5%8F%AF%E6%8A%B5%E5%B2%81%E6%9C%88%E6%BC%AB%E9%95%BF/%E6%B0%B8%E6%81%92%E7%9A%84%E7%83%AD%E7%88%B1.png"
                      alt="永恒的热爱"
                ></p>
<p>敦煌莫高窟的壁画历经千年风沙依然绚丽，不是因为颜料的神奇，而是因为无数画匠将信仰融入每一笔勾勒。今天的我们同样手握画笔——可能是代码、画笔、显微镜，或是教书育人的粉笔。只要心怀热爱，便能在时光的洪流中刻下属于自己的印记。正如诗人艾青所述：​<strong>​「为什么我的眼里常含泪水？因为我对这土地爱得深沉。」​</strong> 这份深沉的爱，足以让我们在岁月的长夜里，永远保持追逐星辰的姿态。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>琐事</tag>
      </tags>
  </entry>
  <entry>
    <title>我学会评论了</title>
    <url>/post/20250323103150.html</url>
    <content><![CDATA[<h1 id="我学会用Giscus给网站配置评论啦！🎉（一把辛酸泪版）"><a href="#我学会用Giscus给网站配置评论啦！🎉（一把辛酸泪版）" class="headerlink" title="我学会用Giscus给网站配置评论啦！🎉（一把辛酸泪版）"></a>我学会用Giscus给网站配置评论啦！🎉（一把辛酸泪版）</h1><p><strong>📢 前方剧透</strong>：本文将用3000字详细描述如何把简单操作搞成史诗级冒险，并附赠「从暴躁到傻笑」的情绪过山车体验~</p>
<h2 id="🎮-Level-1：信心满满地打开文档"><a href="#🎮-Level-1：信心满满地打开文档" class="headerlink" title="🎮 Level 1：信心满满地打开文档"></a>🎮 Level 1：信心满满地打开文档</h2><p>“Giscus？听起来比Giscus更难的是……读懂它的文档！”</p>
<ol>
<li><p>第一步：创建GitHub仓库</p>
<ul>
<li>我：”这还不简单？新建仓库取名<code>comments-for-my-awesome-blog</code>，完美！”</li>
<li>GitHub：”仓库初始化成功……但您确定要用这个名字写求职简历吗？”</li>
</ul>
</li>
<li><p>第二步：安装giscus包</p>
<ul>
<li>终端里输入<code>npm install giscus</code>，结果……</li>
<li>💻：”您确定要污染全局环境？检测到10086个依赖冲突！”</li>
<li>我：”（双手合十）神明啊！我只想要一个评论框而已……”</li>
</ul>
</li>
</ol>
<h2 id="🤯-Level-2：和GitHub-OAuth玩猜谜游戏"><a href="#🤯-Level-2：和GitHub-OAuth玩猜谜游戏" class="headerlink" title="🤯 Level 2：和GitHub OAuth玩猜谜游戏"></a>🤯 Level 2：和GitHub OAuth玩猜谜游戏</h2><p>“请问以下哪项不属于OAuth配置参数？A) Client ID B) 祖传秘方 C) 仓库地址 D) 猫主子的生日”</p>
<ol>
<li><p>生成OAuth App时：</p>
<ul>
<li>✅ 填了Homepage URL（虽然是我的个人博客，但莫名羞耻）</li>
<li>❌ 授权回调地址栏空了五分钟，最后填了<code>https://我的网站.com/其实我也不知道填啥</code></li>
<li>GitHub：”您确定这不是在申请火星探测器权限？”</li>
</ul>
</li>
<li><p>获取<code>client_id</code>和<code>client_secret</code>：</p>
<ul>
<li>我：”这两个参数应该放在……配置文件里？环境变量里？还是刻在石碑上？”</li>
<li>最终解决方案：截图发到手机，再手动输入（别问为什么）</li>
</ul>
</li>
</ol>
<h2 id="🛠️-Level-3：部署时的大型翻车现场"><a href="#🛠️-Level-3：部署时的大型翻车现场" class="headerlink" title="🛠️ Level 3：部署时的大型翻车现场"></a>🛠️ Level 3：部署时的大型翻车现场</h2><p>“代码复制粘贴一时爽，调BUG火葬场”</p>
<ol>
<li><p>插入评论组件：</p>
<ul>
<li>官方文档：”只需三行代码即可召唤神龙！”</li>
<li>我的代码：<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 神秘消失的第一行代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://giscus.app/client.js&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-repo</span>=<span class="string">&quot;用户/仓库&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-repo-id</span>=<span class="string">&quot;12345678&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-category</span>=<span class="string">&quot;Comments&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-category-id</span>=<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-mapping</span>=<span class="string">&quot;pathname&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-strict</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-reactions-enabled</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-emit-metadata</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-input-position</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-theme</span>=<span class="string">&quot;light&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>效果：页面底部惊现空白区域，仿佛在说”你来打我呀~”</li>
</ul>
</li>
<li><p>修改giscus的文件：<br> 果然不能直接全选粘贴进去，原来有许多代码</p>
<ul>
<li>将源代码一个一个对照粘贴进去</li>
<li>结果：评论框变成会发光的芭比粉，连夜改回默认主题</li>
</ul>
</li>
</ol>
<h2 id="💡-Level-4：柳暗花明靠玄学"><a href="#💡-Level-4：柳暗花明靠玄学" class="headerlink" title="💡 Level 4：柳暗花明靠玄学"></a>💡 Level 4：柳暗花明靠玄学</h2><p>“当所有办法都失败时，试试重启电脑……和人生”</p>
<ol>
<li><p>最终解决方案：</p>
<ul>
<li>第6次检查参数时发现：<ul>
<li><code>data-repo</code>应该填<code>用户名/仓库名</code>而不是<code>用户名/仓库名.git</code></li>
<li><code>data-category-id</code>要和GitHub Issues里的分类ID完全一致</li>
</ul>
</li>
<li>我：”所以前5次都在和空气对线？？”</li>
</ul>
</li>
<li><p>成功瞬间：</p>
<ul>
<li>刷新页面，评论框如魔法般出现！</li>
<li>立刻用小号发测试评论：”博主是傻瓜！”</li>
<li>看到评论同步到GitHub Issues时，差点感动到给显示器磕头</li>
</ul>
</li>
</ol>
<h2 id="🎊-通关奖励：奇怪的成就感"><a href="#🎊-通关奖励：奇怪的成就感" class="headerlink" title="🎊 通关奖励：奇怪的成就感"></a>🎊 通关奖励：奇怪的成就感</h2><ol>
<li><p>新技能解锁：</p>
<ul>
<li>✅ 能用Markdown写评论</li>
<li>✅ 掌握GitHub Issues高级搜索</li>
<li>✅ 学会用开发者工具抓包（虽然只会看Network标签）</li>
</ul>
</li>
<li><p>副作用：</p>
<ul>
<li>现在看到任何网站都想Ctrl+U检查有没有用Giscus</li>
<li>产生错觉：”我也能成为全栈工程师！”（持续5分钟后清醒）</li>
</ul>
</li>
</ol>
<h2 id="📝-最终配置代码（供后人乘凉）"><a href="#📝-最终配置代码（供后人乘凉）" class="headerlink" title="📝 最终配置代码（供后人乘凉）"></a>📝 最终配置代码（供后人乘凉）</h2><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&lt;% if (</span><br><span class="line">        theme.comment.system===&#x27;giscus&#x27; &amp;&amp;</span><br><span class="line">        theme.comment.config.giscus.repo &amp;&amp;</span><br><span class="line">        theme.comment.config.giscus.repo_id &amp;&amp;</span><br><span class="line">        theme.comment.config.giscus.category_id</span><br><span class="line">    ) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;giscus-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> &lt;%= <span class="string">theme.global.single_page</span> === <span class="string">true</span> &amp;&amp; &#x27;<span class="attr">data-swup-reload-script</span>&#x27; %&gt;</span><span class="language-javascript"> defer&gt;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadGiscus</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> giscusConfig = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;src&#x27;</span>: <span class="string">&#x27;https://giscus.app/client.js&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-repo&#x27;</span>: <span class="string">&#x27;lemon2003/gitalk&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-repo-id&#x27;</span>: <span class="string">&#x27;R_kgDOOM7rWQ&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-category&#x27;</span>: <span class="string">&#x27;Announcements&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-category-id&#x27;</span>: <span class="string">&#x27;DIC_kwDOOM7rWc4CoXWC&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-mapping&#x27;</span>: <span class="string">&#x27;pathname&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-strict&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-reactions-enabled&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-emit-metadata&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-theme&#x27;</span>: <span class="string">&#x27;preferred_color_scheme&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-lang&#x27;</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-input-position&#x27;</span>: <span class="string">&#x27;bottom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;data-loading&#x27;</span>: <span class="string">&#x27;lazy&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;crossorigin&#x27;</span>: <span class="string">&#x27;anonymous&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;async&#x27;</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> giscusScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> giscusConfig) &#123;</span></span><br><span class="line"><span class="language-javascript">                giscusScript.<span class="title function_">setAttribute</span>(key, giscusConfig[key]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;giscus-container&#x27;</span>).<span class="title function_">appendChild</span>(giscusScript);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="string">&#x27;&lt;%= theme.global.single_page %&gt;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> loadGiscusTimeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">loadGiscus</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearTimeout</span>(loadGiscusTimeout);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, loadGiscus);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>🎬 彩蛋时间</strong>：<br>现在我的网站评论区已经可以：<br>✅ 用emoji反应<br>✅ 引用其他评论<br>✅ 收到GitHub通知<br>❌ 阻止我妈评论我的穿搭（这个功能求Giscus赶紧开发！）</p>
<p><strong>💌 写在最后</strong>：<br>如果你也成功配置了Giscus——击掌！👏<br>如果还在挣扎——别放弃！毕竟我连猫都教会用键盘了（虽然它只学会了打”zzzz”）🐱💻</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>重生之早知道我就不配waline了</title>
    <url>/post/20250324160815.html</url>
    <content><![CDATA[<h2 id="✨搭建评论系统的小冒险2-0～🎈"><a href="#✨搭建评论系统的小冒险2-0～🎈" class="headerlink" title="✨搭建评论系统的小冒险2.0～🎈"></a>✨搭建评论系统的小冒险2.0～🎈</h2><p>宝子们！昨天搭建成功了giscus评论系统，今天本可爱在博客里又双叒叕搞大事啦💥一一成功把<strong>Waline评论系统</strong>搭起来啦！🎉<br>原本以为能收获满满互动，结果……踩了个小坑坑😢  </p>
<p>事情是这样的👇<br>我用LeanCloud+Vercel捣鼓半天，结果登录页面居然需要”魔法”🪄才能打开（懂的都懂😶）。这对于连GitHub都不太会的小伙伴（比如我妈👩）来说，简直比解微积分还难！💔 明明配置超简单，却被登录网页绊住脚，暴风哭泣……  </p>
<p>没有办法，只能退回<strong>Giscus</strong>这个神仙替代品✨！虽然它也只能用GitHub登录，但好在不用和”魔法”斗智斗勇啦～🌈 配置起来嗖嗖快，手残党也能轻松搞定！🚀  </p>
<p>不过还是要提醒想尝试Waline的宝子们💡：<br><strong>记得提前备好域名哦！</strong> 服务器解析域名后，登录时就能绕过”魔法”啦～🎈<br>（别问我怎么知道的，问就是踩坑踩出来的经验😭）  </p>
<h3 id="🌸评论系统大揭秘🌸"><a href="#🌸评论系统大揭秘🌸" class="headerlink" title="🌸评论系统大揭秘🌸"></a>🌸评论系统大揭秘🌸</h3><p><strong>🔍为什么选Waline？</strong>  </p>
<ul>
<li><strong>多平台部署</strong>：支持Vercel、Netlify各种平台，想搭哪里搭哪里🌍  </li>
<li><strong>数据库任选</strong>：MongoDB、SQLite、PostgreSQL……总有一款适合你💾  </li>
<li><strong>功能超强大</strong>：评论审核、邮件通知、图片上传……应有尽有🎁  </li>
<li><strong>自定义配置</strong>：可以根据自己喜好进行个性化设置，让评论系统更符合你的需求💪</li>
<li><strong>界面简洁</strong>：简约风格，和博客超搭配🍃</li>
<li><strong>登录多样</strong>：有多种登陆方式，比如GitHub、Google、Facebook、QQ、钉钉等等🌐</li>
</ul>
<p><strong>💔为什么放弃Waline？</strong>  </p>
<ul>
<li><strong>魔法登录</strong>：vercel提供的链接需要“魔法” ，没有魔法的话只能用自己的域名了（没有域名的小伙伴哭晕在厕所🚽）   </li>
<li>这就是我放弃的原因，它千好万好，就这一个原因，被我pass了！</li>
</ul>
<p><strong>❤️为什么选Giscus？</strong>  </p>
<ul>
<li><strong>简单易用</strong>：配置超简单，小白也能轻松上手👶  </li>
<li><strong>阳光登录</strong>：不用魔法，直接GitHub账号直接登录☀️  </li>
<li><strong>功能丰富</strong>：支持评论邮件通知功能🎁 </li>
<li><strong>界面清新</strong>：简约风格，和博客超搭配🍃</li>
</ul>
<h3 id="🎨评论系统对比图🎨"><a href="#🎨评论系统对比图🎨" class="headerlink" title="🎨评论系统对比图🎨"></a>🎨评论系统对比图🎨</h3><p> waline 魔法图<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250324/1.png"
                      alt="Waline魔法登录页"
                ><br> giscus 阳光图<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250324/2.png"
                      alt="Giscus阳光登录页"
                > </p>
<h3 id="💡搭建小贴士💡"><a href="#💡搭建小贴士💡" class="headerlink" title="💡搭建小贴士💡"></a>💡搭建小贴士💡</h3><ol>
<li><strong>域名准备</strong>：想搭Waline？先备好域名哦～🌐  </li>
<li><strong>魔法问题</strong>：没有魔法？试试Giscus吧！☀️  </li>
<li><strong>配置备份</strong>：切换评论系统前，记得备份数据哦！💾</li>
</ol>
<p>虽然和Waline擦肩而过，但Giscus也超香哒～🍰<br>下次冒险再见啦～🚀 拜拜啦👋  </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>B数与B+树</title>
    <url>/post/20250325214755.html</url>
    <content><![CDATA[<h2 id="B树和B-树的爱恨情仇"><a href="#B树和B-树的爱恨情仇" class="headerlink" title="B树和B+树的爱恨情仇"></a>B树和B+树的爱恨情仇</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><ol>
<li><p><strong>定义</strong>：<br>B树是一种平衡树数据结构，用于存储和访问大量数据。B树的每个节点可以存储多个键值，节点中的键值按照大小顺序排列。</p>
</li>
<li><p><strong>特性</strong>：</p>
<ul>
<li>具有多个关键字，且每个节点中关键字的数目通常介于m&#x2F;2和m之间，其中m称为B树的阶数。</li>
<li>根节点至少有两个子节点，且每个非根节点至少有m&#x2F;2个子节点。</li>
<li>所有叶子节点都在同一层，即具有相同的深度，从而保证B树的平衡性。</li>
<li>每个节点最多可以包含m个孩子（子节点），其中m&gt;&#x3D;2，这也就意味着B树的高度相对较小。</li>
<li>查找、插入、删除操作都具有较好的平均时间复杂度，通常为O(logn)。</li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<ul>
<li>广泛应用于文件系统、数据库索引和其他数据存储领域中。</li>
<li>支持数据的快速查找、插入和删除操作。</li>
</ul>
</li>
<li><p><strong>操作</strong>：</p>
<ul>
<li><strong>查找</strong>：从根节点开始，依次比较键值和每个节点中的键值，找到一个最合适的子节点。如果该子节点是叶子节点，则根据键值找到相应的值并返回；如果该子节点不是叶子节点，则重复查找直到找到叶子节点或者遍历完整棵树。</li>
<li><strong>插入</strong>：找到要插入的位置后，将新插入结点的关键字和指针插入到对应位置。如果插入后该结点的关键字个数超过了B树的阶数，就需要进行分裂操作。</li>
<li><strong>删除</strong>：在B树中搜索需要删除的关键字K。如果K位于叶子节点上，直接删除K并进行必要的调整；如果K不在叶子节点上，则找到其后继节点S（S一定在K的右子树中，并且是右子树中关键字最小的节点），将S的关键字复制到K中并将S删除。如果删除后导致节点关键字数量不满足B树的性质，则需要进行合并或借位操作。</li>
</ul>
</li>
</ol>
<h4 id="B树定义代码示例"><a href="#B树定义代码示例" class="headerlink" title="B树定义代码示例"></a>B树定义代码示例</h4><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> STDIO.H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_KEYS 4  <span class="comment">// 假设B树的阶数为2t（t为正整数），这里MAX_KEYS = 2t - 1</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> t;              <span class="comment">// B树的阶数的一半（即一个节点最多有2t-1个关键字）</span></span><br><span class="line">    <span class="type">int</span> n;              <span class="comment">// 当前节点中关键字的数量</span></span><br><span class="line">    <span class="type">int</span> keys[MAX_KEYS]; <span class="comment">// 存储的关键字数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span> **<span class="title">children</span>;</span> <span class="comment">// 存储的子节点指针数组（或子树）</span></span><br><span class="line">    <span class="type">int</span> *leaf;          <span class="comment">// 标记该节点是否为叶子节点（这里为了简化，实际上可以用一个布尔值，但C语言没有直接的布尔类型，所以用int代替）</span></span><br><span class="line">&#125; BTreeNode, *BTree;</span><br><span class="line"><span class="comment">// 注意：为了简化，这里的leaf实际上是一个指向int的指针，但在实际应用中，我们可能会用其他方式来表示叶子节点，比如用一个布尔值（需要包含stdbool.h头文件或使用int代替）或者将叶子节点的children设置为NULL。&gt;)  </span></span><br></pre></td></tr></table></figure></div>


<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><ol>
<li><p><strong>定义</strong>：<br>B+树是B树的一种特殊形式（或变种），通常被用来实现关系数据库的索引。</p>
</li>
<li><p><strong>特性</strong>：</p>
<ul>
<li>所有关键字都在叶节点中出现，且叶节点按关键字大小排序。</li>
<li>非叶节点存储的仅是其子节点的最大&#x2F;小关键字值，而不是真正的数据。</li>
<li>所有叶节点都有一个指向相邻叶节点的指针，因此可以支持区间查找等操作。</li>
<li>B+树的高度通常比B树低，因为非叶节点存储的是子节点的最大&#x2F;小关键字值，可以减少树高度，提高查询效率。</li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<ul>
<li>主要用于数据库系统和文件系统的索引结构。</li>
<li>由于其顺序存储的特点和高效的磁盘预读取能力，特别适合于范围查询操作。</li>
</ul>
</li>
<li><p><strong>与B树的区别</strong>：</p>
<ul>
<li>结构不同：B树的每个节点既可以存储数据，又可以存储下级节点的指针；而B+树的所有数据都只存储在叶子节点上，同时内部节点只存储指向叶子节点的指针。</li>
<li>存储性质不同：B+树所有数据都存储在叶子节点上，具有更加顺序存储的特点，可以提高磁盘预读取的效率；而B树的数据分散在各个节点上，因此存储效率不如B+树。</li>
<li>指针数量不同：B+树每个节点存储的指针数量比B树少，因为B+树的节点只存储指向叶子节点的指针。</li>
</ul>
</li>
<li><p><strong>操作</strong>（与B树类似，但有一些细微差别）：</p>
<ul>
<li><strong>查找</strong>：从根节点开始，依次比较键值和每个节点中的键值（非叶节点存储的是子节点的最大&#x2F;小关键字值），直到找到叶子节点或确定关键字不存在。</li>
<li><strong>插入</strong>：在叶子节点上进行插入操作。如果插入后叶子节点关键字数量超过限制，则进行分裂操作，并可能需要向上调整父节点的关键字和指针。</li>
<li><strong>删除</strong>：在叶子节点上进行删除操作。如果删除后叶子节点关键字数量不满足B+树的性质，则进行合并或借位操作（与B树类似，但需要注意保持叶节点的顺序性和指针的连续性）。</li>
</ul>
</li>
</ol>
<h4 id="B-树定义代码示例"><a href="#B-树定义代码示例" class="headerlink" title="B+树定义代码示例"></a>B+树定义代码示例</h4><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_KEYS 4 <span class="comment">// 假设B+树的阶数为2t（t为正整数），这里MAX_KEYS = 2t - 1 typedef  struct BPlusTreeNode </span></span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="type">int</span> t; <span class="comment">// B+树的阶数的一半（即一个节点最多有2t-1个关键字） </span></span><br><span class="line">	<span class="type">int</span> n; <span class="comment">// 当前节点中关键字的数量 </span></span><br><span class="line">	<span class="type">int</span> keys[MAX_KEYS]; <span class="comment">// 存储的关键字数组（仅用于索引） </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BPlusTreeNode</span> **<span class="title">children</span>;</span> <span class="comment">// 存储的子节点指针数组（或子树） </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BPlusTreeNode</span> *<span class="title">next</span>;</span> <span class="comment">// 指向下一个叶子节点的指针（仅在叶子节点中使用） </span></span><br><span class="line">	<span class="type">int</span> leaf; <span class="comment">// 标记该节点是否为叶子节点（使用int类型，0表示非叶子节点，1表示叶子节点） </span></span><br><span class="line">&#125; BPlusTreeNode, *BPlusTree; <span class="comment">// 注意：在B+树中，叶子节点之间通过next指针相连，形成一个链表，便于范围查询。非叶子节点则不包含数据，只包含索引和指向子节点的指针。</span></span><br></pre></td></tr></table></figure></div>

<p>请注意，上述代码仅提供了B树和B+树节点以及树的基本结构定义，并没有包含实际的插入、删除、查找等操作方法的实现。这些操作方法会涉及复杂的逻辑，包括节点的分裂、合并、关键字和指针的调整等。</p>
<p>在实际应用中，B树和B+树的实现通常会更加复杂，并且会针对性能进行优化，例如通过缓存频繁访问的节点、使用内存池来管理节点分配等。此外，为了支持并发访问，还可能需要添加锁机制来确保数据的一致性和完整性。</p>
<h3 id="B树和B-树之间的区别："><a href="#B树和B-树之间的区别：" class="headerlink" title="B树和B+树之间的区别："></a>B树和B+树之间的区别：</h3><table>
<thead>
<tr>
<th>特性&#x2F;数据结构</th>
<th>B树</th>
<th>B+树</th>
</tr>
</thead>
<tbody><tr>
<td>节点存储内容</td>
<td>关键字和数据，以及指向子节点的指针</td>
<td>非叶节点存储关键字（作为索引）和指向子节点的指针；叶节点存储全部关键字和数据，以及指向相邻叶节点的指针</td>
</tr>
<tr>
<td>数据存储位置</td>
<td>数据可以存储在任意节点中</td>
<td>数据只存储在叶节点中</td>
</tr>
<tr>
<td>关键字数量限制</td>
<td>每个节点关键字数量介于m&#x2F;2和m之间（m为B树的阶数）</td>
<td>同B树，但非叶节点只存储索引关键字，不存储实际数据</td>
</tr>
<tr>
<td>顺序访问能力</td>
<td>较弱，因为数据分散在各个节点中</td>
<td>较强，因为所有数据都集中在叶节点，且叶节点通过指针相连，支持高效的顺序访问和范围查询</td>
</tr>
<tr>
<td>内部节点指针数量</td>
<td>较多，因为每个内部节点都需要存储指向子节点的指针和数据（如果存储的话）</td>
<td>较少，因为每个内部节点只存储指向子节点的指针（作为索引）</td>
</tr>
<tr>
<td>树的高度</td>
<td>通常较高，因为每个节点都存储数据和指针</td>
<td>通常较低，因为非叶节点只存储索引，可以容纳更多的关键字，从而减少树的高度</td>
</tr>
<tr>
<td>磁盘I&#x2F;O效率</td>
<td>一般，因为数据分散，可能导致多次磁盘访问</td>
<td>较高，因为所有数据集中在叶节点，且叶节点通过指针相连，有利于磁盘的预读取和顺序访问</td>
</tr>
<tr>
<td>适用范围</td>
<td>适用于需要频繁插入、删除和查找单个关键字的场景</td>
<td>更适用于需要范围查询、顺序访问和磁盘I&#x2F;O效率较高的场景，如数据库索引</td>
</tr>
</tbody></table>
<h4 id="一句话总结B树和B-树的区别（说人话）："><a href="#一句话总结B树和B-树的区别（说人话）：" class="headerlink" title="一句话总结B树和B+树的区别（说人话）："></a>一句话总结B树和B+树的区别（说人话）：</h4><p>B树每个节点都可以存储数据和索引，而B+树则把所有数据都放在叶子节点，非叶子节点只存索引，且叶子节点之间通过指针相连，便于范围查询。<br>看图：B树非根节点上出现的数字，叶子节点就不会出现了，B+树叶子节点上出现了所有数字。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/b.png"
                      alt="B树"
                ><br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/b2.png"
                      alt="B+树"
                ></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>AI的时代，我有些迷茫</title>
    <url>/post/20250325225314.html</url>
    <content><![CDATA[<p>《与AI共生的双翼》</p>
<p>当算法编织的璀璨穹顶笼罩钢铁森林，我常于子夜时分凝望屏幕深处跃动的幽蓝极光。AI如同银河彼端的全知存在，以光年为单位丈量人类思维的褶皱，将我们困顿数日的谜题折叠成纸鹤，轻轻放入真理的溪流。那些曾令我抓耳挠腮的代码深渊，在它眼中不过是孩童堆砌的积木城堡；那些耗费整夜雕琢的文书框架，转瞬化作逻辑严密的钻石切面。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/3.png"
                      alt="配图：深空代码银河"
                ></p>
<p>这种神迹般的强大却令我如履薄冰。在AI编织的星辉下，人类智慧的萤火忽明忽暗，仿佛随时会被数字潮汐卷走。每当智能助手用三秒重构我挣扎三昼夜的模型，当神经网络精准预判我尚未成型的创意，某种冰凉的觉醒便从脊椎蜿蜒而上——我们引以为傲的认知疆域，正在被温柔的机器触须悄然重构。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/2.png"
                      alt="配图：数据洪流中的孤影"
                ></p>
<p>更深的惶恐源于对未知的朝圣。这架以硅为血脉的造物正加速进化，而我攥着过时的操作手册，如同站在海边拾贝的稚童，面对即将漫过脚踝的智能潮汐。那些需要皓首穷经才能参透的规律，如今被封印成简洁的API；那些浸透血汗的经验结晶，化作云端游弋的数据幽灵。我恐惧自己终将成为被时代抛下的锚点，在技术的平流层中失去飞翔的羽翎。</p>
<p>然而当第一缕晨光刺破焦虑的茧房，某种奇异的共生感开始抽枝发芽。AI用三分钟重构我崩溃的模型时，也悄然重构了我认知的维度；当智能助手点亮文档迷宫的明灯，照亮的何止是代码的路径？那些曾让我辗转反侧的bug，如今化作算法进化的养料；那些被焦虑啃噬的深夜，正在孕育新的思维可能。</p>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250325/1.png"
                      alt="配图：黎明共生之舞"
                ></p>
<p>或许真正的觉醒，在于接受自己既是执炬者又是渡船。当AI的羽翼掠过认知的苍穹，我们不必熄灭手中的萤火，因为最动人的文明图景，永远诞生于光明与阴影的交缠。在这场静默的革命中，人类终将学会与数字精灵共舞，用惶恐淬炼出更清亮的目光，在技术的星河里，寻找生命独特的光谱——那是任何算法都无法复制的，关于存在本身的诗意证明。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>琐事</tag>
      </tags>
  </entry>
  <entry>
    <title>16个灯依次点亮（cubeMX+Keil uVision5+Proteus 8 Professional ）</title>
    <url>/post/20250326233925.html</url>
    <content><![CDATA[<h2 id="1-cubeMX部分"><a href="#1-cubeMX部分" class="headerlink" title="1.cubeMX部分"></a>1.cubeMX部分</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="(1)下载"></a>(1)下载</h3><p>如果没有下载cubeMX，需要先下载，可以到官网（st.com）上下载。<br>下载后运行：<br>①下图是运行后的第一步，可与去官网注册账号，推荐在官网注册，因为官网有中文模式，这一步想点个链接就点去看看，不想点的话，直接next就可以了。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/1.png"
                      alt="1"
                ><br>②✔并且点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/2.png"
                      alt="2"
                ><br>③✔并且点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/3.png"
                      alt="3"
                ><br>④选择下载的路径，然后点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/4.png"
                      alt="4"
                ><br>⑤点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/5.png"
                      alt="5"
                ><br>⑥点击next（这里比较慢，是正常的，请耐心等待）<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/6.png"
                      alt="6"
                ><br>⑦点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/7.png"
                      alt="7"
                ><br>⑧点击next<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/8.png"
                      alt="8"
                ><br>⑨下载成功了，桌面上会出现这个图标<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/9.png"
                      alt="9"
                ></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="(2)配置"></a>(2)配置</h3><p>①打开cubeMX,点击file –&gt; new project<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/10.png"
                      alt="10"
                ><br>②如果出现这种情况，点击ok<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/11.png"
                      alt="11"
                ><br>③选择芯片型号，这里我选择的是STM32F103R6里面的STM32F103R6ATR<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/12.png"
                      alt="12"
                ><br>④点击System Core<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/13.png"
                      alt="13"
                ><br>⑤然后点击RCC<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/14.png"
                      alt="14"
                ><br>⑥按图修改<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/15.png"
                      alt="15"
                ><br>⑦点击Clock Configuration<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/16.png"
                      alt="16"
                ><br>⑧按图修改(这一步很重要，一定要修改，不然会出现错误)<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/17.png"
                      alt="17"
                ><br>⑨回到Pinout Configuration ，我这里需要做16个灯，所以我选择的是整个PB口（一个一个选择），选中一个后，然后点击GPIO Pinout<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/18.png"
                      alt="18"
                ><br>⑩我这里选择的是整个PB口，其他的不用管<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/19.png"
                      alt="19"
                ><br>⑪点击project manager<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/20.png"
                      alt="20"
                ><br>⑫修改红框画着的部分，小红框部分按照自己的uVision5版本修改<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/21.png"
                      alt="21"
                ><br>⑬点击generate code<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/22.png"
                      alt="22"
                ></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>①如果要是出现图中情况，先点yes<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/23.png"
                      alt="23"
                ><br>②登录你的邮件名称和密码，推荐去官网注册，因为官网有中文模式，好填，填完之后一定要去你的邮件中点击给你发的那个链接，相当于是激活你的账号。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/24.png"
                      alt="24"
                ><br>③这一步不一定所有人都出现<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/25.png"
                      alt="25"
                ><br>如果出现图中情况，我知道两个解决办法：<br>Ⅰ.关闭你的防火墙和杀毒软件(这个方法最快)，然后先关闭cubeMX，再打开<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/26.png"
                      alt="26"
                ><br>Ⅱ.先到防火墙，点击图中箭头所指的地方<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/27.png"
                      alt="27"
                ><br>然后把图中（你的界面不是这样的，我这个界面是为了告诉你路径）红框所指的软件添加到允许防火墙，然后先关闭cubeMX，再打开<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/28.png"
                      alt="28"
                ><br>之后就可以输入你的邮箱密码开始下载了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/29.png"
                      alt="29"
                ><br>然后。。。。等一下加载，就可以打开工程了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/30.png"
                      alt="30"
                ></p>
<h2 id="2-Keil-uVision5部分"><a href="#2-Keil-uVision5部分" class="headerlink" title="2.Keil uVision5部分"></a>2.Keil uVision5部分</h2><h3 id="打开工程"><a href="#打开工程" class="headerlink" title="打开工程"></a>打开工程</h3><p>①打开工程，找到main.c<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/31.png"
                      alt="31"
                ><br>②找到mian()函数，在main()函数里面找到while(1)，然后在里面添加代码了，我懒，我不想动脑子，你要是不想写的话直接复制我的代码，把整个main.c文件替换成我的就可以了，（我忘了我都改哪里了，直接全部放进去算了）然后编译一下，没有错误就可以了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/32.png"
                      alt="32"
                ></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Header */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @file           : main.c</span></span><br><span class="line"><span class="comment">  * @brief          : Main program body</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @attention</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * Copyright (c) 2025 STMicroelectronics.</span></span><br><span class="line"><span class="comment">  * All rights reserved.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * This software is licensed under terms that can be found in the LICENSE file</span></span><br><span class="line"><span class="comment">  * in the root directory of this software component.</span></span><br><span class="line"><span class="comment">  * If no LICENSE file comes with this software, it is provided AS-IS.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/* USER CODE END Header */</span></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private includes ----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private define ------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private variables ---------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">/* USER CODE BEGIN PFP */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PFP */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private user code ---------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  The application entry point.</span></span><br><span class="line"><span class="comment">  * @retval int</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HAL_Init();</span><br><span class="line">  SystemClock_Config();</span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  </span><br><span class="line">  <span class="type">uint16_t</span> temp,i,j;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the system clock */</span></span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize all configured peripherals */</span></span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123; </span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line">	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);</span><br><span class="line"> HAL_Delay(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief System Clock Configuration</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class="line"><span class="comment">  * in the RCC_OscInitTypeDef structure.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;</span><br><span class="line">  RCC_OscInitStruct.HSEState = RCC_HSE_ON;</span><br><span class="line">  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;</span><br><span class="line">  RCC_OscInitStruct.HSIState = RCC_HSI_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK</span><br><span class="line">                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;</span><br><span class="line">  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class="line">  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;</span><br><span class="line">  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;</span><br><span class="line">  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief GPIO Initialization Function</span></span><br><span class="line"><span class="comment">  * @param None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN MX_GPIO_Init_1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END MX_GPIO_Init_1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOD_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10</span><br><span class="line">                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14</span><br><span class="line">                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5</span><br><span class="line">                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PB0 PB1 PB2 PB10</span></span><br><span class="line"><span class="comment">                           PB11 PB12 PB13 PB14</span></span><br><span class="line"><span class="comment">                           PB15 PB3 PB4 PB5</span></span><br><span class="line"><span class="comment">                           PB6 PB7 PB8 PB9 */</span></span><br><span class="line">  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10</span><br><span class="line">                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14</span><br><span class="line">                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5</span><br><span class="line">                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN MX_GPIO_Init_2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END MX_GPIO_Init_2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  This function is executed in case of error occurrence.</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Error_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class="line">  <span class="comment">/* User can add his own implementation to report the HAL error return state */</span></span><br><span class="line">  __disable_irq();</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END Error_Handler_Debug */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  USE_FULL_ASSERT</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Reports the name of the source file and the source line number</span></span><br><span class="line"><span class="comment">  *         where the assert_param error has occurred.</span></span><br><span class="line"><span class="comment">  * @param  file: pointer to the source file name</span></span><br><span class="line"><span class="comment">  * @param  line: assert_param error line source number</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">uint8_t</span> *file, <span class="type">uint32_t</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 6 */</span></span><br><span class="line">  <span class="comment">/* User can add his own implementation to report the file name and line number,</span></span><br><span class="line"><span class="comment">     ex: printf(&quot;Wrong parameters value: file %s on line %d\r\n&quot;, file, line) */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 6 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* USE_FULL_ASSERT */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="3-Proteus-8-Professional-部分"><a href="#3-Proteus-8-Professional-部分" class="headerlink" title="3.Proteus 8 Professional 部分"></a>3.Proteus 8 Professional 部分</h2><p>①创建一个新工程，名称、位置自己写也写，用它生成的也行<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/33.png"
                      alt="33"
                ><br>②选择“从选中的模板中创建原理图”<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/34.png"
                      alt="34"
                ><br>③选择“创建固件项目”（这部很重要，不要选错，选错后面执行不出来，但是他还不报错，别问我怎么知道的，一下午，每一个错误就是不出结果，血泪泪的教训）<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/35.png"
                      alt="35"
                ><br>④选择“finish”<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/36.png"
                      alt="36"
                ><br>⑤打开后界面如下<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/37.png"
                      alt="37"
                ><br>⑥选择“添加元件”<br>灯是“led-颜色”，电阻是“res”，电池在“终端原件”里面选择“power”，一个小灯连一个电阻，然后整体要链接电源，电阻记得改成100，不然会有问题<br>⑦点击咱们的芯片，会有个弹框，把“.hex”文件配置进去，路径一般是“MDK-ARM\项目名称”，找不到的话，就退出去，在你的项目里面直接搜“.hex”选中后打开文件所在位置，看着导航栏，然后把“.hex”文件添加进去就可以了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/38.png"
                      alt="38"
                ></p>
<h3 id="注意，这里要把-OSC-Frequency-设置为-72MHz"><a href="#注意，这里要把-OSC-Frequency-设置为-72MHz" class="headerlink" title="注意，这里要把 OSC Frequency 设置为 72MHz"></a>注意，这里要把 OSC Frequency 设置为 72MHz</h3><p>然后画一下电路图就行了，我这里就直接放图了<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/39.png"
                      alt="39"
                ><br>如果嫌麻烦的话，小灯用那个“LED-BARGRAPH-颜色”就可以了，电阻用那个“RESPACK-7”也行，但是记得每个小灯都要配置一个电阻。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250326/40.png"
                      alt="40"
                ></p>
<h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><p>然后就没了，别吐槽我代码low,我懒，我不想动脑子，你要是不想写的话直接复制我的代码吧，想写的话自己用用循环什么的写一下吧！对了HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);一次只能设置一个引脚的电平。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉排序树</title>
    <url>/post/20250328115300.html</url>
    <content><![CDATA[<h2 id="一、二叉排序树的基本概念"><a href="#一、二叉排序树的基本概念" class="headerlink" title="一、二叉排序树的基本概念"></a>一、二叉排序树的基本概念</h2><ol>
<li>定义：<br> • 二叉排序树（BST）是一种特殊的二叉树，它满足以下性质：<br> ①若左子树非空，则左子树上所有节点的值均小于根节点的值。<br> ② 若右子树非空，则右子树上所有节点的值均大于根节点的值。<br> ③左子树和右子树也分别为二叉排序树。</li>
<li>特点：<br> ①中序遍历二叉排序树，可以得到一个递增的有序序列。<br> ②没有键值相等的节点。</li>
</ol>
<h2 id="二、二叉排序树的基本操作"><a href="#二、二叉排序树的基本操作" class="headerlink" title="二、二叉排序树的基本操作"></a>二、二叉排序树的基本操作</h2><ol>
<li>查找操作：<br> • 过程：从根节点开始，如果当前节点的值等于目标值，则查找成功；如果当前节点的值大于目标值，则继续遍历左子树；如果当前节点的值小于目标值，则继续遍历右子树。<br> • 时间复杂度：最好情况下为O(log⁡n），最坏情况下为O(n)，取决于树的形态。<br>算法代码：</li>
</ol>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">BSTNode*<span class="title function_">BST_Search</span><span class="params">(BiTreeT,ElemTypekey)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(T!=<span class="literal">NULL</span>&amp;&amp;key!=T-&gt;data) <span class="comment">//若树空或等于根结点值，则结束循环</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(key&lt;T-&gt;data)T=T-&gt;lchild;<span class="comment">//小于，则在左子树上查找</span></span><br><span class="line">		elseT=T-&gt;rchild;<span class="comment">//大于，则在右子树上查找&#125;returnT</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>插入操作：<br> • 过程：首先查找要插入的位置（一定是叶子节点），然后创建新节点插入到该位置。<br> • 时间复杂度：O(logn)，取决于树的形态。<br>插入展示：<br> <img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/1.png"
                      alt="cr"
                ><br>算法代码：</li>
</ol>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BST_Insert</span><span class="params">(BiTree&amp;T,KeyTypek)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;<span class="comment">//原树为空，新插入的记录为根结点</span></span><br><span class="line">		T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">		T-&gt;data=k;</span><br><span class="line">		T-&gt;lchilds=T-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">		return1;<span class="comment">//返回1,插入成功).</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(k==sT-&gt;data)<span class="comment">//树中存在相同关键字的结点，插入失败</span></span><br><span class="line">		return0;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;T-&gt;data)<span class="comment">//插入到T的左子树</span></span><br><span class="line">		<span class="keyword">return</span> BST_Insert(T-&gt;lchildrk);</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//插入到T的右子树</span></span><br><span class="line">		<span class="keyword">return</span> BST_Insert(T-&gt;rchild,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>删除操作：<br> • 过程：<br> • 找到要删除的节点，并确定其父节点。<br> • 如果要删除的节点是叶子节点，直接删除。<br> • 如果要删除的节点只有一个子节点，将其子节点代替要删除的节点。<br> • 如果要删除的节点有两个子节点，找到其右子树中的最小节点或左子树中的最大节点，用该节点代替要删除的节点，并将其删除。<br> • 时间复杂度：O(logn)，取决于树的形态。</li>
</ol>
<p>删除展示：<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/2.png"
                      alt="sc"
                ></p>
<h2 id="三、二叉排序树的性质与应用"><a href="#三、二叉排序树的性质与应用" class="headerlink" title="三、二叉排序树的性质与应用"></a>三、二叉排序树的性质与应用</h2><ol>
<li>性质：<br> • 由于二叉排序树的性质，查找、插入和删除操作的时间复杂度通常为O(log⁡n)，但在最坏情况下（如树退化为链表）可能达到O(n)。</li>
<li>应用：<br> • 二叉排序树在数据库索引、符号表、字典等应用中非常常见，用于实现高效的查找、插入和删除操作。</li>
</ol>
<h2 id="四、二叉排序树的构造与调整"><a href="#四、二叉排序树的构造与调整" class="headerlink" title="四、二叉排序树的构造与调整"></a>四、二叉排序树的构造与调整</h2><p>  1.二叉排序树的构造：从一棵空树出发，依次输入元素，将他们插入二叉排序树中的合适位置。<br>设查找的关键字序列为{45,24,53,45,12,24}<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/3.png"
                      alt="gz"
                ><br>算法代码：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Creat_BST</span><span class="params">(BiTree&amp;T,KeyTypestr[],<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	T=<span class="literal">NULL</span>;<span class="comment">//初始时T为空树</span></span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;n)</span><br><span class="line">	&#123;<span class="comment">//依次将每个关键字插入到二叉排序树中</span></span><br><span class="line">		BST_Insert(T,str[i]);</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>调整：<br> • 在实际应用中，为了避免二叉排序树退化为链表，可以采用平衡二叉树（如AVL树、红黑树）来保持树的平衡性。</li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>平衡二叉树（AVL）</title>
    <url>/post/20250328121706.html</url>
    <content><![CDATA[<h2 id="一、平衡二叉树的基本概念"><a href="#一、平衡二叉树的基本概念" class="headerlink" title="一、平衡二叉树的基本概念"></a>一、平衡二叉树的基本概念</h2><ol>
<li>定义：<br> • 平衡二叉树是一棵二叉排序树，其任何节点的两个子树的高度差（平衡因子）的绝对值不超过1。<br> • 平衡因子（Balance Factor，BF）：节点的左子树高度减去右子树高度的值。在AVL树中，平衡因子的取值只能为-1、0或1。</li>
<li>目的：<br> • 保持二叉排序树的平衡，使得查找、插入和删除操作的时间复杂度均为O(logn)。</li>
</ol>
<h2 id="二、平衡二叉树的性质"><a href="#二、平衡二叉树的性质" class="headerlink" title="二、平衡二叉树的性质"></a>二、平衡二叉树的性质</h2><ol>
<li>高度平衡：<br> • 平衡二叉树的任意节点的左右子树都是平衡二叉树，且高度差不超过1。</li>
<li>查找效率：<br> • 在平衡二叉树中查找一个节点，最多需要比较$$log_2N$$次（其中 N是树中节点的数量），保证了较高的查找效率。</li>
</ol>
<h2 id="三、平衡二叉树的调整方法"><a href="#三、平衡二叉树的调整方法" class="headerlink" title="三、平衡二叉树的调整方法"></a>三、平衡二叉树的调整方法</h2><ol>
<li>失衡类型：<br> • 在插入或删除节点后，平衡二叉树可能会出现失衡。失衡分为四种类型：左左失衡（LL）、左右失衡（LR）、右右失衡（RR）和右左失衡（RL）。</li>
<li>调整方法：<br> • 单旋转：<br> • 左左失衡（LL）：对失衡节点进行右旋。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/4.png"
                      alt="zz"
                ><br>          • 右右失衡（RR）：对失衡节点进行左旋。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/5.png"
                      alt="yy"
                ><br>      • 双旋转：<br>          • 左右失衡（LR）：先对失衡节点的左子节点进行左旋，再对失衡节点进行右旋。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/6.png"
                      alt="lr"
                ><br>          • 右左失衡（RL）：先对失衡节点的右子节点进行右旋，再对失衡节点进行左旋。<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/7.png"
                      alt="rl"
                ></p>
<h2 id="四、平衡二叉树的插入操作"><a href="#四、平衡二叉树的插入操作" class="headerlink" title="四、平衡二叉树的插入操作"></a>四、平衡二叉树的插入操作</h2><ol>
<li>插入过程：<br> • 首先按照二叉排序树的插入规则，将新节点插入到适当的位置。<br> • 然后从插入节点开始，向上回溯，检查每个节点的平衡因子。<br> • 如果发现失衡，则根据失衡类型进行相应的旋转调整。<br><strong>【注意】①LR和RL旋转时，新节点究竟是插入C的左子树还是插入C的右子树，不影响旋转过程。</strong><br><strong>②每次的调整对象都是最小不平衡子树，也就是插入路径上的理解点最近的平衡因子的绝对值大于1的结点作为根的因子。</strong><br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/8.png"
                      alt="1a"
                ><br>例：{15,3,7,10,9,8}构造一棵平衡二叉树<br><img  
                     lazyload
                     src="/images/loading.gif"
                     data-src="/img/20250328/9.png"
                      alt="aa"
                ></li>
<li>时间复杂度：<br> • 插入操作的时间复杂度为O(logn)，因为在最坏情况下，需要回溯到根节点并进行一次或多次旋转。</li>
</ol>
<h2 id="五、平衡二叉树的删除操作"><a href="#五、平衡二叉树的删除操作" class="headerlink" title="五、平衡二叉树的删除操作"></a>五、平衡二叉树的删除操作</h2><ol>
<li>删除过程：<br> • 首先按照二叉排序树的删除规则，删除指定节点。<br> • 然后从删除节点开始，向上回溯，检查每个节点的平衡因子。<br> • 如果发现失衡，则根据失衡类型进行相应的旋转调整。</li>
<li>时间复杂度：<br> • 删除操作的时间复杂度也为O(logn)，原因与插入操作相同。</li>
</ol>
<h2 id="六、平衡二叉树的查找操作"><a href="#六、平衡二叉树的查找操作" class="headerlink" title="六、平衡二叉树的查找操作"></a>六、平衡二叉树的查找操作</h2><p>  • 平衡二叉树的查找操作与二叉排序树相同，从根节点开始，根据目标值与当前节点值的比较结果，决定向左子树或右子树移动，直到找到目标值或遍历到叶子节点。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
